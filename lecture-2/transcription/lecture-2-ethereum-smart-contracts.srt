1
00:00:00,000 --> 00:00:05,000
Так, отлично. Значит, сегодня у нас, в общем-то, как раз вторая лекция.

2
00:00:05,240 --> 00:00:11,820
Мы опять, как и в первой лекции, мы попробуем довольно-таки быстро обозреть,

3
00:00:11,960 --> 00:00:15,920
как душами смарт-контракты эфирные, как они работают для того,

4
00:00:16,020 --> 00:00:19,580
чтобы вы дальше могли выбирать себе курсовые проекты,

5
00:00:19,680 --> 00:00:22,560
может быть, там, потыкать где-то в код, как бы посмотреть.

6
00:00:23,880 --> 00:00:27,400
Первая домашка, соответственно, тоже к курсу, как бы это, по сути,

7
00:00:27,400 --> 00:00:31,540
внести дифы в Solidity код, вот, особо не пугайтесь,

8
00:00:31,640 --> 00:00:35,260
он достаточно легко, как бы, читается, и модифицировать его тоже, как бы, несложно.

9
00:00:36,520 --> 00:00:39,460
Вот, сложности, как бы, смарт-контрактов, они, на самом деле, в понимании

10
00:00:39,460 --> 00:00:43,360
таких низкоуровневых механизмов, вот, как бы, в самом, там, грубо говоря,

11
00:00:43,440 --> 00:00:48,240
написании кода, там, большого количества каких-то таких страшных тонкостей нет.

12
00:00:49,500 --> 00:00:50,640
Вот, значит, поехали.

13
00:00:52,280 --> 00:00:57,240
Возвращаясь к процессингу транзакций, то есть на этот раз мы уже их посмотрели,

14
00:00:57,400 --> 00:01:01,840
затем со стороны клиента, то есть как это выглядит вообще общение со смарт-контрактами

15
00:01:01,840 --> 00:01:04,940
для клиентов, то есть для ваших, там, пользователей, вот.

16
00:01:05,880 --> 00:01:12,440
Ну, например, предположим, я зашел на какой-то сайт, который посвящен финансам,

17
00:01:12,740 --> 00:01:17,600
я сейчас нахожусь в тестовой сети, сейчас уже не помню в какой, в Герле.

18
00:01:18,460 --> 00:01:21,080
Вы ее, кстати говоря, будете довольно часто использовать, возможно,

19
00:01:21,080 --> 00:01:27,080
имеет смысл, как бы, туда, как бы, деплоить свои, не знаю, там, проекты,

20
00:01:27,400 --> 00:01:31,280
то есть вы можете там разворачивать свои контракты, пользоваться этой сетью спокойно.

21
00:01:32,100 --> 00:01:36,740
В Герле сейчас наиболее из всех вот этих вот тестовых сетей, как видите, там много.

22
00:01:37,840 --> 00:01:41,020
Ринки бай уже, как бы, скоро будет деприкейтед.

23
00:01:42,540 --> 00:01:46,640
Герле сейчас наиболее такая свежая, как бы, которая поддерживает последнюю версию эфира,

24
00:01:46,640 --> 00:01:52,020
как бы, так что, значит, в ней, собственно, и, скорее всего, придется работать.

25
00:01:52,820 --> 00:01:53,500
Очень удобно.

26
00:01:53,900 --> 00:01:56,640
А там есть копия сайта, ну, кстати, да, в отличие, как бы, от источника,

27
00:01:57,400 --> 00:02:03,800
остальных от Web2 сервисов, в Web3 можно взять и скопировать свой сервис

28
00:02:03,800 --> 00:02:06,280
и запустить его в тестовые сети с игрушечным эфиром.

29
00:02:06,780 --> 00:02:11,000
Представьте, если бы у вас был там Тинькофф или Сбер, как бы, с игрушечными рублями,

30
00:02:11,000 --> 00:02:17,000
как бы, но стопроцентно повторяющий полностью, абсолютно всю бизнес-логику основного приложения.

31
00:02:18,580 --> 00:02:18,980
Ну, вот.

32
00:02:19,940 --> 00:02:22,900
Там, на самом деле, такие же, такие и есть, как бы, штуки,

33
00:02:23,080 --> 00:02:26,880
и недавно в Сбере была какая-то дичайшая бага как раз с тестовой версией приложения.

34
00:02:27,400 --> 00:02:30,080
Значит, для взаимодействия со смарт-контрактом,

35
00:02:30,480 --> 00:02:34,660
то есть для отправки вот такой же, вот такой вот транзакции,

36
00:02:35,300 --> 00:02:39,420
вот, в которой, как я говорил, находятся вот здесь вот в импуте,

37
00:02:39,700 --> 00:02:43,420
закодировано, какую функцию данного смарт-контракта я хочу вызвать.

38
00:02:43,620 --> 00:02:46,600
То есть я хочу бросить транзакцию вот на этот адрес

39
00:02:46,600 --> 00:02:50,200
и вызвать такую-то функцию с такими-то парами.

40
00:02:50,320 --> 00:02:52,880
Они здесь упакованы, конечно, но, тем не менее,

41
00:02:54,000 --> 00:02:55,160
выглядит это следующим образом.

42
00:02:55,160 --> 00:02:57,260
Ну, там, предположим, я хочу там включить,

43
00:02:57,400 --> 00:03:01,880
не знаю, свой, там, эфир, как калатору.

44
00:03:02,780 --> 00:03:05,180
Я сейчас отправлю, по сути, как бы, функцию, которая говорит,

45
00:03:05,320 --> 00:03:09,440
типа, разреши мне посылать, там, не знаю, эфир в этот смарт-контракт.

46
00:03:09,500 --> 00:03:11,440
То есть у него внутри произойдет запись.

47
00:03:12,180 --> 00:03:14,020
Для клиента это выглядит вот таким вот образом.

48
00:03:14,640 --> 00:03:17,220
То есть у него всплывает вот этот вот метамаск

49
00:03:17,220 --> 00:03:21,600
или какой там у вас есть, там, не знаю, там, кошелек там какой-нибудь

50
00:03:21,600 --> 00:03:24,120
и предлагает эту транзакцию подписать.

51
00:03:24,120 --> 00:03:26,200
Я эту транзакцию подтверждаю.

52
00:03:27,400 --> 00:03:30,220
Я не отправляю никакого эфира, вот.

53
00:03:30,240 --> 00:03:32,720
Но мне, конечно, придется заплатить за эту транзакцию.

54
00:03:32,880 --> 00:03:33,700
Сейчас надо нажать.

55
00:03:34,680 --> 00:03:35,080
Вот.

56
00:03:36,020 --> 00:03:37,640
И все, транзакция, как бы, поехала.

57
00:03:38,420 --> 00:03:40,820
Я жду, пока она, там, что-то там заманится,

58
00:03:40,940 --> 00:03:43,240
пока майнеры ее примут, пока они включат блок,

59
00:03:43,360 --> 00:03:44,300
пока, как бы, но...

60
00:03:44,300 --> 00:03:49,200
Я тоже не особо любитель плюс-сайза, да и таковым не являюсь.

61
00:03:49,680 --> 00:03:51,080
Я думаю, что...

62
00:03:51,080 --> 00:03:52,500
Никита, выключи микрофон.

63
00:03:54,020 --> 00:03:54,420
Да.

64
00:03:54,860 --> 00:03:57,080
И, соответственно, теперь, когда транзакция дошла,

65
00:03:57,400 --> 00:03:59,000
то собновился, вот.

66
00:03:59,120 --> 00:04:02,040
И, соответственно, эфир, как бы, теперь у меня включен.

67
00:04:02,100 --> 00:04:04,780
Я могу теперь его, там, например, не знаю, там,

68
00:04:05,120 --> 00:04:08,440
какое-то количество этого эфира положить, там, не знаю, процент, например.

69
00:04:09,200 --> 00:04:10,720
Будет выглядеть все точно так же.

70
00:04:11,620 --> 00:04:14,540
В чем, как бы, ну, как бы, удобство веб-три приложения,

71
00:04:14,600 --> 00:04:17,820
что я вот ровно таким же образом хожу, там, в сотни проектов

72
00:04:17,820 --> 00:04:20,860
абсолютно разных, как бы, могу делать в них, как бы,

73
00:04:20,860 --> 00:04:23,520
все делать при помощи одного и того же, не знаю,

74
00:04:23,620 --> 00:04:26,800
даже одного и того же адреса, одного и того же, вот, этого расширения.

75
00:04:27,840 --> 00:04:31,680
Нигде, как видите, нет никаких ни логинов, ни регистрации,

76
00:04:31,740 --> 00:04:33,300
вообще ничего, как бы, этого добра нет.

77
00:04:33,420 --> 00:04:35,200
Все свалено на пользователя.

78
00:04:35,400 --> 00:04:39,520
То есть за безопасность своих адресов, своей крипты, я отвечаю сам.

79
00:04:39,620 --> 00:04:42,720
То есть никто мне здесь не поможет никаких, там, восстановить аккаунт,

80
00:04:42,820 --> 00:04:43,860
ничего этого нету.

81
00:04:45,160 --> 00:04:50,360
А так, на секунду, так, вообще, как бы, взломы аккаунтов, угоны,

82
00:04:50,360 --> 00:04:52,600
короче говоря, получение персональных данных,

83
00:04:52,720 --> 00:04:56,200
оно в Web2-сервисах, в разных, там, почтах, как бы, сервисах

84
00:04:56,200 --> 00:04:57,280
очень часто делается.

85
00:04:57,400 --> 00:05:00,560
Как раз через функции восстановления доступа к аккаунту.

86
00:05:01,060 --> 00:05:04,280
Всякие вот эти секретные вопросы, Wi-Fi и так далее.

87
00:05:04,400 --> 00:05:07,140
Вы все это, как бы, в security штуках, как бы, видели.

88
00:05:07,820 --> 00:05:10,200
Ну, вот я положил, там, сколько-то, там, 0.12 эфира,

89
00:05:10,280 --> 00:05:13,240
положил под 11% годовых, все, они там валяются,

90
00:05:13,320 --> 00:05:14,560
потом захочу, как бы, вытащу.

91
00:05:15,560 --> 00:05:17,720
Вот, то есть все, как бы, довольно просто.

92
00:05:18,680 --> 00:05:20,740
И с точки зрения разработки ваших проектов,

93
00:05:20,740 --> 00:05:23,600
это тоже достаточно, как бы, удобно, потому что вы пишете,

94
00:05:24,020 --> 00:05:26,740
ну, если так, в минимальном варианте, то вы пишете смарт-контракт,

95
00:05:27,400 --> 00:05:31,940
деплойте, выкладываете его в сеть, куда-нибудь, там, не знаю, в тест-нет-герле,

96
00:05:32,600 --> 00:05:36,440
и пишете просто на Node.js какой-то, там, простейший, как бы, интерфейс.

97
00:05:37,540 --> 00:05:41,740
Ну, как бы, за этим интерфейсом, там, коду, на самом деле,

98
00:05:41,820 --> 00:05:44,380
там, на три строчки буквально, которые с эфиром общаются,

99
00:05:44,520 --> 00:05:48,340
потому что вся бизнес-логика, по сути, находится там где-то, в тест-нете.

100
00:05:49,540 --> 00:05:56,400
Вот, а бэкэнд вам нужен для того, чтобы на вашем проекте показывать,

101
00:05:56,400 --> 00:05:57,380
ну, всякие, там, цифры.

102
00:05:57,400 --> 00:06:00,800
Цифры, агрегации, там, сколько, там, не знаю, какие там проценты,

103
00:06:01,220 --> 00:06:04,700
total balances, вы можете взять, брать что-то из контрактов,

104
00:06:05,380 --> 00:06:08,580
но что-то вам понадобится, там, агрегировать, собирать статистику,

105
00:06:08,680 --> 00:06:10,460
чтобы пользователю дать больше информации,

106
00:06:10,540 --> 00:06:12,560
и для этого как раз используются бэкэнды, вот,

107
00:06:12,640 --> 00:06:14,400
поэтому с этой точки зрения Web3-разработка,

108
00:06:15,620 --> 00:06:18,400
она включает в себя, в том числе и Web2-разработка,

109
00:06:19,100 --> 00:06:21,340
то есть вам надо, там, курсы какие-то там переводить,

110
00:06:21,420 --> 00:06:23,420
еще что-нибудь, в общем, все это делается на бэке.

111
00:06:24,700 --> 00:06:27,000
Вот, значит, поехали.

112
00:06:27,400 --> 00:06:29,900
Значит, что происходит с транзакцией?

113
00:06:30,380 --> 00:06:33,000
На самом деле, на начальном этапе, когда мы ее только кинули,

114
00:06:33,080 --> 00:06:36,040
когда она попала в ноду, у нее, конечно, нету ни хэша-блоков,

115
00:06:36,080 --> 00:06:39,980
в которые она была включена, ни номера блока, вот,

116
00:06:40,140 --> 00:06:44,580
неизвестно, сколько она потратила газа, эта транзакция,

117
00:06:45,000 --> 00:06:47,080
то есть после того, как она была, как бы, замайнена.

118
00:06:47,860 --> 00:06:52,360
У нее непонятно, на какой позиции в блоке она находится, вот,

119
00:06:52,400 --> 00:06:55,140
но, в принципе, все остальное, как бы, оно, в общем-то, одно и то же,

120
00:06:55,140 --> 00:06:56,240
то есть вот здесь подпись,

121
00:06:56,240 --> 00:07:01,240
сколько эфира она на себе тащит, ее, соответственно, нагрузка,

122
00:07:01,840 --> 00:07:02,980
вот этот hex bytes.

123
00:07:03,700 --> 00:07:07,680
Кстати, что интересно, как бы, хакеры бывают, ну, точнее, не бывают,

124
00:07:07,780 --> 00:07:10,100
когда довольно часто переписываются с проектами

125
00:07:10,100 --> 00:07:12,880
вот посредством вот этих hex bytes,

126
00:07:13,080 --> 00:07:15,540
то есть вы можете отправить там транзакцию кому-нибудь с эфиром

127
00:07:15,540 --> 00:07:20,040
и здесь написать в комментарии, типа, вот, как бы, не знаю, там,

128
00:07:20,220 --> 00:07:23,080
спасибо за хак, короче говоря, вот, заберите часть денег.

129
00:07:24,320 --> 00:07:25,960
То есть бывает такое.

130
00:07:26,240 --> 00:07:29,660
Что и с хакерами переписываются, собственно, через вот эти вот hex bytes тоже бывает.

131
00:07:31,120 --> 00:07:35,640
Значит, что происходило вот здесь, когда я работал с Metamask?

132
00:07:36,180 --> 00:07:38,620
Сделал транзакцию, подписал транзакцию,

133
00:07:39,340 --> 00:07:41,860
затем мой вот этот вот Metamask,

134
00:07:42,460 --> 00:07:45,380
я напоминаю, это не ваше приложение,

135
00:07:45,680 --> 00:07:48,700
то есть не ваш DAP сделал эту транзакцию,

136
00:07:48,860 --> 00:07:52,440
ну, точнее, он ее изготовил, эту транзакцию сформировал,

137
00:07:52,440 --> 00:07:55,520
а подписал и отправил ее именно как раз Metamask,

138
00:07:56,240 --> 00:07:58,480
никакой JS с вашей страницы этого не делает,

139
00:07:58,580 --> 00:08:02,800
это делает расширение в валюту, то есть саму транзакцию отправляет, вот.

140
00:08:03,960 --> 00:08:06,340
Ну, а здесь, как бы, в JS-ке вы можете сделать, там, не знаю,

141
00:08:06,440 --> 00:08:11,100
PubSub, там, подписаться, там, на обновление, там, от Metamask, там, от ноды, как бы,

142
00:08:11,160 --> 00:08:15,460
и в нужный момент, когда пришла информация, что все, транзакция включена,

143
00:08:15,560 --> 00:08:19,380
как бы, галочки переключилась, стейт изменился.

144
00:08:20,160 --> 00:08:24,160
Соответственно, там используется обычный, там, JSON-RPC интерфейс,

145
00:08:24,160 --> 00:08:29,480
обычно у нод есть, как бы, два интерфейса, HTTPS и WebSockets,

146
00:08:29,580 --> 00:08:33,660
WebSockets, которые позволяют, как бы, вам держать все время открытым соединение,

147
00:08:33,760 --> 00:08:36,260
то есть если вам надо, как бы, там, непрерывно получать апдейты,

148
00:08:36,360 --> 00:08:40,160
все время страничку обновлять, как бы, это более удобно, ну, вот.

149
00:08:40,260 --> 00:08:44,460
Здесь, как бы, все стандартно, и поэтому, как бы, ноды, они, по сути,

150
00:08:44,560 --> 00:08:48,960
представляют собой, ну, так, для внешнего наблюдателя, по сути, такой веб-сервер,

151
00:08:49,060 --> 00:08:53,780
который прям JSON-RPC API, то есть открытые порты, как бы, вы можете,

152
00:08:54,160 --> 00:08:58,320
туда кинуть какой-нибудь запрос, и он вам в ответ, как бы, ответит,

153
00:08:58,400 --> 00:09:03,380
как бы, можете кинуть, там, послать транзакцию, и нода, как бы, отправит транзакцию.

154
00:09:04,380 --> 00:09:08,940
Значит, что делает нода? Нода валидирует транзакцию, чтобы ее, там,

155
00:09:08,980 --> 00:09:13,480
мусором не закинули, всякие черновые проверки, кладет, как торрент,

156
00:09:13,560 --> 00:09:19,220
как бы, начинает раздавать, как бы, через торрент и, там, через P2P эту транзакцию, вот.

157
00:09:20,120 --> 00:09:23,220
Причем, там, есть, по сути, как бы, несколько,

158
00:09:24,160 --> 00:09:29,220
несколько протоколов, по которым они работают, там, родной эфирный P2P,

159
00:09:30,080 --> 00:09:34,140
есть стэк, как бы, который использует другие ноды, вот, то есть, несколько вариантов,

160
00:09:34,240 --> 00:09:37,260
как бы, но смысл один и тот же, то есть, нода рассказывает другим, типа,

161
00:09:37,360 --> 00:09:41,520
чуваки, у меня есть, вот, новые хэши транзакций, кому надо, как бы, если хотите,

162
00:09:41,620 --> 00:09:45,440
я вам, типа, перешлю тело этих транзакций, ну, чтобы дважды, как бы, не слать.

163
00:09:46,320 --> 00:09:51,560
Вот, наконец, она добирается, там, до майнера, вот, и, соответственно, майнер,

164
00:09:54,160 --> 00:10:00,500
ее применяет. Значит, затем, ну, и после этого, после того, как, как бы,

165
00:10:00,540 --> 00:10:05,420
нода объявила о транзакции полной ноды, она стоит и ждет, как бы, новых блоков,

166
00:10:05,520 --> 00:10:09,880
подписывается на все, как бы, новые блоки. Когда прилетает новый блок,

167
00:10:10,580 --> 00:10:14,540
она узнает, что, как бы, я жду результатов вот этой транзакции,

168
00:10:14,620 --> 00:10:17,900
то есть, когда она будет включена в блок, она, по сути, как бы, подписана, в общем,

169
00:10:17,940 --> 00:10:23,440
на эти события, вот, она получает новый блок, проверяет его, выбирает,

170
00:10:23,440 --> 00:10:28,120
в соответствии с консенсусом, годится ли этот блок или нет, как бы, попадает ли он

171
00:10:28,120 --> 00:10:33,380
в основную цепочку, в мастер-чейн. Если и надо, как бы, как я там показывал

172
00:10:33,380 --> 00:10:38,300
на схемах, как бы, откатывать, может быть, предыдущие блоки и накатывать вот эти вот

173
00:10:38,300 --> 00:10:43,920
новые, вот, с ревертом, как бы, всех транзакций. Затем накатывает все транзакции

174
00:10:43,920 --> 00:10:49,340
из вот этого нового блока на свою state database. Вот, возможно, среди этих

175
00:10:49,340 --> 00:10:53,420
транзакций есть и наша, вот. И как раз вот в этот момент,

176
00:10:53,440 --> 00:10:59,260
когда она применяет, как бы, этот, ну, применяет, по сути, блок, бежит по

177
00:10:59,260 --> 00:11:03,160
транзакциях и делает вот эту вот apply, вот ровно в этом месте работает код

178
00:11:03,160 --> 00:11:09,360
контракта. Прямо здесь как раз запускается виртуальная машина, вот, и вот здесь, как

179
00:11:09,360 --> 00:11:14,400
бы, она бежит-бежит, как бы, по транзакции, по сути, исполняет, как бы, код контракта.

180
00:11:14,400 --> 00:11:23,060
Вот. Далее она решает, как я говорил, любой smart-контракт, любой вызов к smart-контракту

181
00:11:23,060 --> 00:11:28,160
заканчивается всего двумя исходами, да, типа, все окей, как бы, и реверт, и в случае реверта,

182
00:11:28,160 --> 00:11:34,400
как бы, ну, ничего не происходит. То есть никаких изменений абсолютно, как бы, вот, кроме, как бы,

183
00:11:34,400 --> 00:11:40,040
списания денег с баланса отправителя за потраченный газ. А в самой state database,

184
00:11:40,040 --> 00:11:44,360
как бы, там, во всех, там, данных контракта никаких значений, никаких изменений не происходит.

185
00:11:44,360 --> 00:11:52,340
После чего она обновляет state root, вот это вот в дерево организованное значение, грубо говоря,

186
00:11:53,060 --> 00:11:59,780
state, ну, hash state database, такой общий, который, как бы, зависит от всех значений этой базы

187
00:11:59,780 --> 00:12:05,780
данных, и, соответственно, проставляет транзакции, как бы, сколько было потрачено газа, какой блок

188
00:12:05,780 --> 00:12:12,260
она была включена, там, какой индекс, и так далее, и так далее. В этот момент наш metamask, как бы,

189
00:12:12,260 --> 00:12:19,040
висит на этой ноде, там, по вебсокетам или опрашивает ее по HTTPS, вот, и ждет, когда

190
00:12:19,040 --> 00:12:23,000
появится информация о его транзакции. Значит, приходит новый блок,

191
00:12:23,060 --> 00:12:29,540
он ждет, как бы, будет ли доказательство того, что моя транзакция попала в мой блок. Здесь, как раз,

192
00:12:29,540 --> 00:12:35,960
используются вот эти вот merkle proof, то есть доказательство того, что транзакция, она, как бы,

193
00:12:35,960 --> 00:12:41,060
в блок попала, в то время как в блоке есть буквально одно только число. Ну, про меркл деревья мы с вами

194
00:12:41,060 --> 00:12:46,960
обязательно, там, поговорим подробно, это широко используемый паттерн в блокчейнах. То есть она ждет,

195
00:12:46,960 --> 00:12:52,500
как бы, еще и доказательство того, что транзакция в текущий блок попала, вот.

196
00:12:53,060 --> 00:13:00,060
Затем получает, соответственно, апдейты от ноды, как бы, ну, там, она запрашивает, там, любые, там,

197
00:13:00,060 --> 00:13:08,540
интересные значения, например, там, включен ли флажок он для эфира для вот этого адреса клиента,

198
00:13:08,540 --> 00:13:16,220
который, как бы, запросил. Если да, то он там что-то отрисовывает. Вот, она это все дело опрашивает,

199
00:13:16,220 --> 00:13:19,880
и, как бы, после того, как понятно, что транзакция включена, все изменилось, как бы,

200
00:13:19,880 --> 00:13:22,940
все данные из контрактов получены, она апдейтит мордочку.

201
00:13:23,060 --> 00:13:27,380
Вот, то есть выглядит весь вот этот цикл таким образом.

202
00:13:27,380 --> 00:13:35,020
Кто является клиентами? То есть кто может дергать, как бы, оперировать эфиром? Значит,

203
00:13:35,020 --> 00:13:40,460
самые популярные это браузеры вот с этими расширениями, там, помимо Metamask есть еще много,

204
00:13:40,460 --> 00:13:47,540
там, всего. Есть, там, просто десктопные программы-клиенты, но браузеры, они, почему они,

205
00:13:47,540 --> 00:13:53,060
как бы, наиболее популярны? Ну, потому что, как я сказал, как бы, я своим браузером бегаю, там, я

206
00:13:53,060 --> 00:13:57,860
не знаю, по десяткам, как бы, проектов, что хочу, там, закладываю, перекладываю, как бы, как угодно,

207
00:13:57,860 --> 00:14:06,140
там, не знаю, в финансы регистрируюсь, играю, там, в игры, там, NFT какие-нибудь создаю, и все это

208
00:14:06,140 --> 00:14:11,720
делается при помощи, по сути, одного расширения в этом браузере. Это крайне удобно. Вот, то есть,

209
00:14:11,720 --> 00:14:16,040
как бы, тот, у кого, как бы, есть на балансе эфир, по сути, имеет доступ, там, к сотням разных

210
00:14:16,040 --> 00:14:22,340
финансовых инструментов, совершенно, там, разных типов, как бы, и, там, возможностям, там, десяткам

211
00:14:23,060 --> 00:14:32,540
и вообще кучу всего. Все это при помощи буквально одной софтины. Но есть еще, мы тоже будем про них

212
00:14:32,540 --> 00:14:37,840
говорить, это, наверное, самый надежный способ защитить отдельный адрес, это железные ключи

213
00:14:37,840 --> 00:14:45,500
хардварные. Это такие типа флешки, как бы, штуки, вставляются в USB, и их основная суть, то, что у

214
00:14:45,500 --> 00:14:51,860
них внутри зашит приватный ключ, они никогда его в жизни наружу не показывают. Вот, ты в эту флешку,

215
00:14:51,860 --> 00:14:53,040
как бы, ну, ты в этот ключ, как бы, не можешь, ну, как бы, не можешь, ну, ты в этот ключ, как бы,

216
00:14:53,040 --> 00:14:59,660
передаешь транзакцию а он в ответе выдает ее подпись то есть типа да я подписал вот и там

217
00:14:59,660 --> 00:15:04,980
если там например кнопочка есть на этой флешке то хакера как бы даже полностью захватив компьютер

218
00:15:04,980 --> 00:15:12,000
он не может получить не может получить доступ к этой кнопочки то есть как минимум там нажать

219
00:15:12,000 --> 00:15:20,640
нажать confirm и подписать за вас ну и там это маска умеет коннект с этими с этими ключами вот

220
00:15:20,640 --> 00:15:29,400
в общем их рекомендуется использовать мобильные валятся значит то что вы набираете когда вы

221
00:15:29,400 --> 00:15:37,120
наберете там эфириум wallet мобайл по большей части на самом деле это обрезанные браузеры такие

222
00:15:37,120 --> 00:15:43,360
которые входят на ограниченное количество сайтов то есть без строки url ада как вас кучей там не

223
00:15:43,360 --> 00:15:49,380
знаю там линков там favorites и тоже встроенные как бы истории управления ключами пока и это

224
00:15:49,380 --> 00:15:50,580
имеется паблике и инфо

225
00:15:50,640 --> 00:15:56,320
structure то есть там приватные публичные ключи адреса там и так далее вот то есть такие как

226
00:15:56,320 --> 00:16:01,320
бы популярные браузеры мобильные кошельки это по сути как бы браузер для того чтобы ну им было

227
00:16:01,320 --> 00:16:07,500
удобно ходить сюда там городить особо ничего не надо потому что джессон рпс и все стандартно все

228
00:16:07,500 --> 00:16:12,660
как в вебе как бы особо что-то придумать как бы смысла нет если вы будете самописный валит там

229
00:16:12,660 --> 00:16:20,260
писать на java вот вам придется реализовать вообще там ну ты фига там всяких взаимодействий там так

230
00:16:20,260 --> 00:16:20,640
далее

231
00:16:20,640 --> 00:16:33,660
и в этом же еще причина почему мобильщики не любят особо крипту значит потому что смотрите вы сделали

232
00:16:33,660 --> 00:16:40,440
какую-нибудь вас там мобилка у вас здесь ваша опка не знаю какая там крутая игра как бы там

233
00:16:40,440 --> 00:16:45,360
здесь эфир значит можно чего-нибудь покупать продавать всякие там предметы игровые там какая

234
00:16:45,360 --> 00:16:50,160
экономика интересная но для того чтобы каждую транзакцию вам отправить вам нужные подписались

235
00:16:50,640 --> 00:16:55,780
Для этого вам нужен секретный ключик, личный ключик, адреса.

236
00:16:56,580 --> 00:17:03,260
И зачастую вот это реализовать сложнее, чем реализовать всю вашу апку целиком.

237
00:17:04,160 --> 00:17:07,840
Потому что ваша апка, там, не знаю, красивые картинки плюс несколько типов транзакций,

238
00:17:08,400 --> 00:17:14,420
а вот здесь вот надо прям сильно поскрепеть, потому что здесь требования к безопасности очень высокие.

239
00:17:14,520 --> 00:17:19,200
То есть вам придется, по сути, в свое приложение встроить валет.

240
00:17:19,200 --> 00:17:22,320
А требования к валету, они крайне серьезные.

241
00:17:22,420 --> 00:17:26,040
То есть здесь вы что-то там набажете, как бы это еще можно будет поправить,

242
00:17:26,560 --> 00:17:30,340
а здесь что-нибудь не так сделаете, там, не знаю, генерацию адресов, там еще что-то.

243
00:17:31,580 --> 00:17:34,340
И будет очень плохо, как бы валет поломают.

244
00:17:35,480 --> 00:17:38,640
Вот, ну, буквально недавно там вот тоже дичайшая история в Салане.

245
00:17:39,060 --> 00:17:42,860
То есть когда там было взломано, там, не знаю, сотни, как бы тысячи адресов,

246
00:17:42,940 --> 00:17:45,780
огромное количество крипты было украдено как раз просто потому,

247
00:17:45,780 --> 00:17:48,780
что один из валетов, он генерировал...

248
00:17:49,920 --> 00:17:52,020
адреса несекьюрным образом.

249
00:17:52,640 --> 00:17:57,480
Вот, там, секретный ключ из него, публичный из него, там, адрес, соответственно.

250
00:17:58,300 --> 00:18:03,100
Он делал, ну, несекьюрно, как бы, и, по сути, это было взломано.

251
00:18:04,260 --> 00:18:06,440
Так, нет. Нет, я нет, я набрал.

252
00:18:06,520 --> 00:18:09,520
Нет, на самом деле, он не несекьюрный, да, я извиняюсь,

253
00:18:09,580 --> 00:18:15,120
а он отправлял дебажную информацию, дебажную информацию в сервис-центре.

254
00:18:15,120 --> 00:18:19,120
И там среди дебажной информации валялись, как бы, приватные клиенты.

255
00:18:19,220 --> 00:18:26,180
То есть то, что полностью вз installing, ну, перiąдовACcurrency и там е-ч Biern el ...

256
00:18:26,500 --> 00:18:28,180
كignment и и так далее,

257
00:18:28,180 --> 00:18:29,760
поэтому, наверное, ещё иyn клиент,

258
00:18:29,780 --> 00:18:31,260
поэтому его нужно вставить вот сюда,

259
00:18:31,260 --> 00:18:32,480
так что weekends.

260
00:18:32,540 --> 00:18:37,280
Ну, в общем, хоть и нелегче, но с генерацией адресов это вот,

261
00:18:37,320 --> 00:18:40,040
буквально, совсем недавняя бага, вот.

262
00:18:40,120 --> 00:18:44,720
Есть софт, который позволяет генерировать красивые адреса там с ноликами и так далее,

263
00:18:44,760 --> 00:18:47,720
как бы, и, вот, в этой генерации была найдена уязвимость.

264
00:18:47,720 --> 00:18:51,080
Все, кто автоматически ходят в эфир и шлют туда транзакции.

265
00:18:52,440 --> 00:18:53,400
Что-то там запрашивают.

266
00:18:54,120 --> 00:18:57,140
У них обычно приватные ключи в конфиге.

267
00:18:57,720 --> 00:19:01,100
Пугаться тут вообще особо не нужно, потому что штука вообще простая.

268
00:19:01,200 --> 00:19:05,840
На любом языке программирования, Python, Rust, JS и так далее,

269
00:19:05,840 --> 00:19:11,000
есть там прям куча библиотек, которые вам позволят сгенерировать адрес эфириумный

270
00:19:11,000 --> 00:19:13,380
и спокойно там все подписи ставить и так далее.

271
00:19:13,500 --> 00:19:16,900
То есть все вообще делается на самом деле очень просто, там несколько строчек.

272
00:19:16,900 --> 00:19:21,400
Вот, поэтому если вы что-то пишете автоматизированное, что работает там,

273
00:19:21,460 --> 00:19:23,820
не знаю, с эфиром, как бы это очень просто.

274
00:19:24,700 --> 00:19:28,120
Вот, то есть создать транзакцию, создать адрес, как бы создать ключ,

275
00:19:28,320 --> 00:19:29,920
можно без особых проблем.

276
00:19:31,400 --> 00:19:35,840
Вот, и еще, наверное, еще одна история про клиентов,

277
00:19:36,300 --> 00:19:39,880
которые могут работать со смарт-контрактами, про которые часто забывают,

278
00:19:40,040 --> 00:19:41,480
это различные девайсы.

279
00:19:42,400 --> 00:19:46,880
Вот, на хакатонах довольно часто, как бы раньше там довольно популярно,

280
00:19:46,900 --> 00:19:50,520
популярная штука была сейчас, по-моему, не очень уже стала, как бы популярная,

281
00:19:50,600 --> 00:19:53,600
а так-то раньше, как бы много народа, как бы пытались соединить эти вещи.

282
00:19:54,880 --> 00:19:59,200
Действительно удобно, как бы интернет вещей, ему блокчейн достаточно интересен,

283
00:19:59,240 --> 00:20:05,460
просто потому что нет единой точки отказа, то есть плевать любая сеть, короче,

284
00:20:05,580 --> 00:20:10,140
любая нода, как бы ваше устройство, считай, как бы подключено к сети, вот,

285
00:20:10,260 --> 00:20:15,680
у вашего устройства есть приватный ключ, есть адрес, как бы, который никто, как бы,

286
00:20:15,680 --> 00:20:16,780
там не остановит, как бы.

287
00:20:16,900 --> 00:20:21,960
Никто им там особо, как бы, не управляет, вот, и оно там может всякие штуки делать.

288
00:20:23,920 --> 00:20:27,480
Ну, у нас там знакомый проект, например, Робономика очень много занимается

289
00:20:27,480 --> 00:20:31,400
соединением как раз всяких, там, не знаю, там роботов, датчиков, там, и так далее,

290
00:20:31,520 --> 00:20:33,960
всего, как бы, с блокчейнами.

291
00:20:34,380 --> 00:20:39,140
Если у вас есть какая-то девайсина, мы, например, делали там счетчик электричества,

292
00:20:39,140 --> 00:20:46,580
там, 100 киловатт насчитал, он, соответственно, формирует транзакцию,

293
00:20:46,900 --> 00:20:50,400
то есть, мое следующее показание – это 100 киловатт, значит, подписывает ее,

294
00:20:51,440 --> 00:20:54,920
отправляет в сеть, у нас там была другая сеть, как бы, ну, неважно, например,

295
00:20:55,000 --> 00:21:00,020
отправляет в эфир, а здесь смарт-контракт, как бы, принимает эти показания,

296
00:21:00,240 --> 00:21:05,080
100 киловатт, у него есть, там, 90 предыдущие показания, как бы, теперь у него стало 100,

297
00:21:06,000 --> 00:21:13,340
у него получается 10, и он за эти 10 списывает плату по текущей, там, цене,

298
00:21:13,340 --> 00:21:15,620
как бы, за киловатт, то есть, такая, достаточно.

299
00:21:16,900 --> 00:21:21,380
Понятная, как бы, история, и при этом, что, как бы, удобно, ни одного сервера нету,

300
00:21:21,740 --> 00:21:25,580
ну, то есть, у вас нет ни облака, никаких, там, бэкэндов, никаких хайпи, короче,

301
00:21:25,640 --> 00:21:29,660
у вас есть просто счетчик, и все, как бы, его просто как-нибудь подрубить, там, не знаю,

302
00:21:29,740 --> 00:21:35,040
к Wi-Fi или куда-нибудь в сеть, он уже там сам разберется, там, достучится до какой-нибудь,

303
00:21:35,040 --> 00:21:40,320
до какой-нибудь, там, из сотни нод публичных, и отправит, как бы, туда транзакцию,

304
00:21:40,320 --> 00:21:46,560
вот он, там, считает, соответственно, показания, но для этого есть некоторые ограничения.

305
00:21:46,560 --> 00:21:58,640
Технически, прошу прощения, в первую очередь, они связаны с тем, что такие девайсы должны быть

306
00:21:58,640 --> 00:22:03,580
достаточно производительными, потому что им нужно будет сделать электронную подпись

307
00:22:03,580 --> 00:22:10,400
с использованием вот такой электрической кривой, то есть, это арифметика с числами,

308
00:22:10,400 --> 00:22:16,480
как бы, 256-битными, и на каком-нибудь, там, мелком каком-нибудь орудии,

309
00:22:16,560 --> 00:22:20,460
там, которые еле-еле, там, как бы, что-то там пашет, как бы, вы, скорее всего,

310
00:22:20,460 --> 00:22:25,880
такую подпись произвести не сможете. Ну, вот, а Raspberry Pi, например, может достаточно спокойно,

311
00:22:25,880 --> 00:22:32,180
как бы, сформировать транзакцию и ее отправить. Вот, ну, и понятно, что там должна быть, там, сеть,

312
00:22:32,300 --> 00:22:37,460
короче, там, вебка и так далее, то есть, возможность обращаться к ноде и сделать, по сути,

313
00:22:37,460 --> 00:22:41,960
JSON-RPC вызов, вот, то есть, ну, это тоже хороший вариант, и вот.

314
00:22:43,560 --> 00:22:46,460
Теперь, следующий такой кусочек.

315
00:22:46,560 --> 00:22:55,620
Как бы, важный. Это ноды, то есть, сами, сами ноды, которые наши узлы, как бы, наши узлы вот этой

316
00:22:55,620 --> 00:23:02,220
эфириум-сети. Кто-то из них майнером является, кто-то из них является, там, не знаю, валидатором,

317
00:23:02,220 --> 00:23:08,880
все они умеют принимать, как бы, транзакции от пользователей, все они, как бы, друг другу,

318
00:23:08,880 --> 00:23:14,520
как бы, про эти транзакции рассказывают, каждый из них, как бы, от других нод получает блоки,

319
00:23:14,520 --> 00:23:16,520
тоже так.

320
00:23:16,560 --> 00:23:21,460
То есть, они, как бы, строят цепочку по одним и тем же правилам, с одним и тем же консенсусом, вот.

321
00:23:21,460 --> 00:23:30,660
Но, опять же, в централизованном мире, мы видим, как бы, такую историю, нам говорят, как бы, вот, у нас есть, типа, Монго,

322
00:23:31,860 --> 00:23:40,460
она у нас, там, на четырех репликах, как бы, там, одна реплика, там, не знаю, в Китае, другая, там, в USA, как бы, третья реплика, там, не знаю, в России,

323
00:23:41,960 --> 00:23:45,160
и вот между ними настроена репликация, вот они вот так общаются.

324
00:23:45,160 --> 00:23:46,360
Вот этот софт, он одинаковый.

325
00:23:46,560 --> 00:23:51,420
То есть, везде, как бы, здесь стоит Монго, здесь стоит Монго, здесь стоит Монго, здесь стоит Монго,

326
00:23:51,420 --> 00:23:56,440
то есть, весь один и тот же код, один и тот же программный продукт одних и тех же версий.

327
00:23:56,440 --> 00:24:04,440
Из-за того, чтобы я говорил, что эфир — это, как бы, в первую очередь, как бы, протокол, да, нежели имплементация,

328
00:24:04,440 --> 00:24:09,420
у эфировских нод, у неё, вот, это вот просто самые, только известные, как бы,

329
00:24:09,420 --> 00:24:10,540
имплементации ноды.

330
00:24:10,580 --> 00:24:12,580
То есть, у вас здесь стоит здесь, здесь стоит Nethermind, написанный, там, не знаю,

331
00:24:16,560 --> 00:24:18,260
на C-Sharp, здесь

332
00:24:18,260 --> 00:24:20,100
GES на горшке написан,

333
00:24:20,420 --> 00:24:21,660
здесь какой-нибудь

334
00:24:21,660 --> 00:24:24,340
OpenEthereum, который на Rust

335
00:24:24,340 --> 00:24:26,360
написан, как бы здесь стоит

336
00:24:26,360 --> 00:24:26,840
Eragon,

337
00:24:28,600 --> 00:24:29,380
такая чуть более

338
00:24:29,380 --> 00:24:32,320
быстрая версия GES,

339
00:24:32,600 --> 00:24:34,140
тоже на горшке написано.

340
00:24:34,700 --> 00:24:36,360
Вот, и они все друг с другом, как бы

341
00:24:36,360 --> 00:24:38,040
по одному и тому же протоколу,

342
00:24:38,040 --> 00:24:40,240
в общем-то, общаются. Там есть у них отличия

343
00:24:40,240 --> 00:24:42,080
в P2P, там, в стэках и так далее,

344
00:24:42,160 --> 00:24:44,260
но, как бы, по большей части они все, как бы, друг друга

345
00:24:44,260 --> 00:24:45,900
видят и друг друга понимают.

346
00:24:46,560 --> 00:24:48,180
И в этом, собственно, крутость

347
00:24:48,180 --> 00:24:48,820
как раз

348
00:24:48,820 --> 00:24:52,420
всей вот этой вот истории,

349
00:24:52,560 --> 00:24:54,400
потому что, когда были атаки на эфир,

350
00:24:55,260 --> 00:24:56,580
ну, такие прям вот эксплойты

351
00:24:56,580 --> 00:24:58,160
как бы на ноды, он

352
00:24:58,160 --> 00:25:00,400
достаточно достойно их выставил, потому что

353
00:25:00,400 --> 00:25:02,240
была там, по-моему, там атака на

354
00:25:02,240 --> 00:25:04,320
там Rust-имплементацию, как бы

355
00:25:04,320 --> 00:25:06,180
их там много сразу полегло,

356
00:25:07,580 --> 00:25:10,220
а там горшечная, она, как бы,

357
00:25:10,400 --> 00:25:12,340
осталась в строю,

358
00:25:12,380 --> 00:25:13,860
ну, или наоборот, как бы было, вот.

359
00:25:13,860 --> 00:25:15,720
Но смысл в том, что клиентов много,

360
00:25:15,720 --> 00:25:17,180
и всех атаковать, как бы, сразу

361
00:25:17,180 --> 00:25:19,380
не получится, найти дыры, как бы,

362
00:25:19,420 --> 00:25:21,780
одновременно во всех. А оставшиеся

363
00:25:21,780 --> 00:25:23,540
продолжат тащить сеть, как бы,

364
00:25:23,620 --> 00:25:25,540
да, там отвалится, может, часть майнеров, там,

365
00:25:25,600 --> 00:25:27,500
еще что-то, но сама сеть продолжит работать.

366
00:25:28,660 --> 00:25:29,300
Это, опять же,

367
00:25:29,580 --> 00:25:31,760
в пользу довода о том,

368
00:25:31,820 --> 00:25:33,500
что блокчейны круто подходят, как бы,

369
00:25:33,540 --> 00:25:36,200
в условиях тотального киберпротивостояния,

370
00:25:36,220 --> 00:25:37,900
как бы, крайне устойчивой

371
00:25:37,900 --> 00:25:38,420
сети.

372
00:25:40,780 --> 00:25:41,440
Отличаются они,

373
00:25:41,980 --> 00:25:43,980
ну, как бы, с точки зрения

374
00:25:43,980 --> 00:25:45,700
протокола, отличаются они,

375
00:25:45,720 --> 00:25:47,700
не сильно, вот, но

376
00:25:47,700 --> 00:25:49,620
отличия все-таки есть, как бы,

377
00:25:49,680 --> 00:25:50,680
ну, например, там у них

378
00:25:50,680 --> 00:25:53,960
различные API, то есть какие-то стандартные

379
00:25:53,960 --> 00:25:55,240
функции, как бы, есть везде,

380
00:25:56,440 --> 00:25:57,860
вот, а какие-то,

381
00:25:57,940 --> 00:25:59,720
какие-то вот эти, вот, как бы, функции

382
00:25:59,720 --> 00:26:01,720
через JSON RPC, как бы, вызываются,

383
00:26:01,880 --> 00:26:03,560
как бы, на некоторых нодах написано,

384
00:26:03,760 --> 00:26:05,260
типа, not supported.

385
00:26:06,260 --> 00:26:07,780
То есть кто-то там не отдает, как бы,

386
00:26:07,840 --> 00:26:09,460
сырые транзакции в байтах,

387
00:26:09,560 --> 00:26:11,540
кто-то там не позволяет, там, типа, не знаю,

388
00:26:11,620 --> 00:26:13,500
подписаться на какой-то особый вид,

389
00:26:13,500 --> 00:26:15,460
я не знаю, там, событий.

390
00:26:16,040 --> 00:26:17,520
Тут еще там что-то, как бы, то есть

391
00:26:17,520 --> 00:26:19,600
здесь уже, как бы, колдует

392
00:26:19,600 --> 00:26:20,780
команды разработки.

393
00:26:21,580 --> 00:26:23,420
И это, кстати говоря, разработка

394
00:26:23,420 --> 00:26:25,660
нод, вот, собственно, вот этого софта.

395
00:26:26,580 --> 00:26:27,640
Это тоже называется,

396
00:26:27,740 --> 00:26:29,480
как бы, блокчейн-разработка, не та,

397
00:26:29,600 --> 00:26:31,440
которую мы будем изучать,

398
00:26:31,460 --> 00:26:33,340
то есть это, собственно, люди, которые сами ноды

399
00:26:33,340 --> 00:26:35,760
разрабатывают. И эта работа,

400
00:26:35,840 --> 00:26:37,440
она больше похожа на системную

401
00:26:37,440 --> 00:26:38,560
разработку. То есть

402
00:26:38,560 --> 00:26:41,320
можете считать, как бы, что те, кто

403
00:26:41,320 --> 00:26:43,120
пишут эти ноды, ну, точнее, даже

404
00:26:43,120 --> 00:26:45,280
не можете считать, а на самом деле там, собственно,

405
00:26:45,720 --> 00:26:52,320
которая этим занимается это разработчики которые до этого разрабатывали движки субэдэ различные

406
00:26:52,320 --> 00:27:00,300
это и там из маиску или какого-нибудь там кто делал там поздно с манги редис и и так далее

407
00:27:00,300 --> 00:27:06,420
то есть те кто вот это писали прям вот по сути изнутри собственно сам сам как бы движок вот они

408
00:27:06,420 --> 00:27:14,580
же пишут и вот чей на победителями в языках здесь однозначно как бы являются го и раз

409
00:27:14,580 --> 00:27:20,940
потому что именно вот эти вот два языка как бы они могут обеспечить во первых как бы крайне

410
00:27:20,940 --> 00:27:28,260
высокую производительность да как бы хотя как бы но блокчейн и да может и не славятся у нас

411
00:27:28,260 --> 00:27:32,520
там миллионами tps и меня там каждый раз на конференции холод надо объяснять как вы

412
00:27:32,520 --> 00:27:39,120
через сделаю вообще зачем сюда пришел как бы со своими этим блокчейн ими тормознут ими вот

413
00:27:39,120 --> 00:27:44,260
но на самом деле внутри как бы здесь not как бы оптимизации производительности огромное внимание

414
00:27:44,260 --> 00:27:44,520
в деле

415
00:27:44,580 --> 00:27:51,300
поэтому пишется они в основном на низкоуровневых языках как бы гошка за счет того что у нее

416
00:27:51,300 --> 00:27:56,760
многопоточность как бы хорошо сделано здесь прям это там серьезно там надо много к на эту держать

417
00:27:56,760 --> 00:28:02,480
там подписываться на кучу событий все это трекать одновременно в нужном порядке устраивать ну а раз

418
00:28:02,480 --> 00:28:07,500
потому что он просто позволяет там контролировать буквально там каждый чих то есть там вообще любой

419
00:28:07,500 --> 00:28:13,860
как бы там любой алгоритм прямо как бы гвоздями прибит как он исполняется максимально оптимизирован

420
00:28:14,580 --> 00:28:20,400
вот поэтому там блокчейн и как бы на питоне блокчейн и там на растя не сильно приветствуется

421
00:28:20,400 --> 00:28:26,700
но вот есть еще пример как бы например nether майнт тоже там знакомый к команда как раз писал

422
00:28:26,700 --> 00:28:32,580
они написали его на си шарпе вот что в принципе наверно как бы тоже вполне себе варианта у них

423
00:28:32,580 --> 00:28:39,900
очень достойных сочи клиент получился как бы nether майнт его тоже используют во все вот так что и на

424
00:28:39,900 --> 00:28:44,420
java вот эта консорциум гипер ledger тоже как бы сделал свою имплементацию

425
00:28:44,580 --> 00:28:51,240
на java не знаю как она поддерживается мы с ней дела не имели далее тоже по терминологии

426
00:28:51,240 --> 00:28:59,280
как бы вот этих вот нод когда я буду говорить ну то есть по сути есть наверное два вида как

427
00:28:59,280 --> 00:29:07,800
бы нот ну точнее не 2 я первым может быть сюда даже добавил как бы архивные ноды если

428
00:29:07,800 --> 00:29:13,580
говорить как бы об эфире значит архивная нода я прям с нее наверно начну

429
00:29:14,580 --> 00:29:21,540
архивная нода если вам кстати такая нужна то вы можете получить там в сервисе типа алкими возможно

430
00:29:21,540 --> 00:29:27,360
вам и понадобится если вам нужна своя нода как бы вы идете как бы вот здесь вот регистрируйтесь и вам

431
00:29:27,360 --> 00:29:36,060
бесплатно дадут доступ но по сути прям дадут урл секретный ваш собственный как бы к по которому вы

432
00:29:36,060 --> 00:29:44,020
можете обращаться к ноде эфира там у меня есть там ноды майнета есть но до этого тестового герле а вот

433
00:29:44,580 --> 00:29:49,200
и вы можете как бы с ней работать как бы это будет бесплатно пока вы там совсем и не нагрузить там

434
00:29:49,200 --> 00:29:55,080
немеряным количеством запросов вот тогда с вас денег попросят вот для обучения прекрасно как бы

435
00:29:55,080 --> 00:30:03,240
хватает значит архивные ноды это самые честные ноды блокчейна то есть та которая собирает все

436
00:30:03,240 --> 00:30:12,000
блоки начиная там с первого и до текущего вот такого вот блока она полностью ведет короче говоря

437
00:30:14,580 --> 00:30:20,640
абсолютно все апдейты она сохраняет все транзакции на ней есть которые были за время существования

438
00:30:20,640 --> 00:30:30,720
эфира и что самое важное вы у архивной ноды всегда можете запросить состояние прям стоит то есть

439
00:30:30,720 --> 00:30:36,780
обратиться к этой базе данных на на какой-то определенный блок зафиксированы если вы говорите

440
00:30:36,780 --> 00:30:43,820
хочу короче что ты мне сказала как бы вот начиная с этого блока какое было вот это вот значение там

441
00:30:44,580 --> 00:30:50,800
тракте как чему была равна вот этот переменная там не знаю там три дня назад ровно в 5 утра вот на

442
00:30:50,800 --> 00:30:55,540
этот номер блока и архивные ноды вам ответить то есть она умеет перепроигрывать весь эфир как бы

443
00:30:55,540 --> 00:31:04,680
вперед-назад как вам нравится она довольно большая сейчас чтобы ее крутить как бы надо там там больше

444
00:31:04,680 --> 00:31:12,120
двух терабайт место занимает эфир по моему 16 или 17 терабайт вот это вся как бы полностью вся инфа

445
00:31:14,580 --> 00:31:19,380
и чтобы просто догнать эту ноду до последнего блока она же по-честному как бы бежит его

446
00:31:19,380 --> 00:31:24,000
фабула по блоковых накатывает как бы нужно несколько дней на очень хорошем и мощном

447
00:31:24,000 --> 00:31:35,720
сервере так что эта штука не дешевая крайне дайте мне секундочку потерял

448
00:31:40,500 --> 00:31:44,060
вот а

449
00:31:44,580 --> 00:31:51,820
архивные надо штука довольно такая прожорливая вот и в общем один из путей как бы развитие эфир

450
00:31:51,820 --> 00:32:02,280
это как раз но облегчение not вообще по сути даже как бы отказ от архива вот этого от архива

451
00:32:02,280 --> 00:32:07,640
транзакции от архива блоков от снапшотов вот этой вот базы как бы это один из путей по сути

452
00:32:07,640 --> 00:32:14,160
развития эфира вы не можете скелет эфир довести его там до десятков и сотен тысяч транзакций в

453
00:32:14,580 --> 00:32:19,620
и все это как бы хранить вот на архивной ноде у вас как бы никого компьютер как бы никогда это

454
00:32:19,620 --> 00:32:26,280
не потянет вот поэтому но при этом как бы должны соблюдаться все крипто графические доказательства

455
00:32:26,280 --> 00:32:30,720
того что какие-то конкретные транзакции были включены в блоке там и так далее поэтому задача

456
00:32:30,720 --> 00:32:37,460
такая немаленькая обычно мы все используем вот когда вот я смита маскам до отправлял

457
00:32:37,460 --> 00:32:44,420
транзакция все используют так называемые фолл-ноды это нода которая тащит актуально

458
00:32:44,580 --> 00:32:52,820
стоит database то есть последнего последнего формата она может не сохранять как бы транзакции

459
00:32:52,820 --> 00:32:58,080
вот она просто накатывает как бы новые блоки получают как бы новый блок накатывают и и

460
00:32:58,080 --> 00:33:04,440
растает database держит последний там не знаю там последний какой-то кусочек как бы блокчейна

461
00:33:04,440 --> 00:33:11,840
вот держит актуальную версию вот этой вот как бы стоит базы данных перепроверяет вот но при

462
00:33:14,580 --> 00:33:22,320
всеми по всей по сути истории вот но еще понятие light но да как бы но тут ее прям как-то

463
00:33:22,320 --> 00:33:27,600
формализовать довольно сложно потому что от структуры блокчейна сильно зависит как бы ну

464
00:33:27,600 --> 00:33:33,600
что вообще нужно от этой light но да то есть легкая нода который вообще как-то ну там минимальная там

465
00:33:33,600 --> 00:33:39,660
самое дешевое в поездка который просто висит где-то там на конце как бы блокчейна у нее

466
00:33:39,660 --> 00:33:44,340
есть там какая-то может маленькой стоит database который следит только за заданными адресами

467
00:33:44,580 --> 00:33:49,840
зафиксирован имя зафиксирован ими контрактами протоколами то есть здесь можно конечно

468
00:33:49,840 --> 00:33:56,840
народить как бы чего угодно очень много простора для творчества вот поэтому то есть это такое

469
00:33:56,840 --> 00:34:03,560
понятие как бывает но до легкий но вы там чуть ли не ноты в браузере которые понимаются вот в

470
00:34:03,560 --> 00:34:08,260
некотором видео но были идеи до бутыльных которые вообще как бы работает из браузер то есть вы

471
00:34:08,260 --> 00:34:12,420
включаете браузер власты к аппарату джаз на странице как бы начинает общаться с другими

472
00:34:12,420 --> 00:34:14,520
браузерами и учиться к тому-то нет поршивны的 района видов sacred board с той Halloween

473
00:34:14,580 --> 00:34:22,560
как бы в работе такого блокчейна такие идеи тоже это были ну и конечно же но до валидатор которые

474
00:34:22,560 --> 00:34:30,840
производят блоки вот но это по сути то же самое и ему сгодится как бы full но да да как бы валидатор

475
00:34:30,840 --> 00:34:36,000
штука нагруженная получает последнюю версию блока у него есть как бы текущий стейт даты

476
00:34:36,000 --> 00:34:42,020
бейсом формирует как бы новый блок формирует изменения в стейт даты бейс как бы все это

477
00:34:42,020 --> 00:34:50,140
записывает как были отдает как другим ну то есть майнеры майнеры валидаторы так далее вот это значит

478
00:34:50,140 --> 00:34:58,600
к софту мы про надо еще тоже как бы поговорим с вами вот это просто для того чтобы вы обозрели

479
00:34:58,600 --> 00:35:07,900
как бы горизонт софта как бы с которым придется работать а теперь значит про распределенные базы

480
00:35:07,900 --> 00:35:11,060
данных распределенные базы данных

481
00:35:12,020 --> 00:35:20,900
ну то есть блокчейн подают по сути как какой-то какое-то новое не знаю там направление какой-то

482
00:35:20,900 --> 00:35:28,580
отдельный какой-то там не знаю там область знания но на самом-то деле на самом деле сама вот это

483
00:35:28,580 --> 00:35:34,760
как бы идея вот этого блокчейна как бы сетевого консенсуса она уже изо всех сил прорабатывается

484
00:35:34,760 --> 00:35:41,840
в базах данных то что много у кого были бы были базы данных вот чтобы изоляция

485
00:35:42,020 --> 00:35:46,860
транзакции там какой-то хэдлок репликация было у кого-нибудь

486
00:35:46,860 --> 00:36:00,340
так понятно ну ладно ну вообще это довольно как бы важная такая концепция и кстати говоря

487
00:36:00,340 --> 00:36:06,500
над sky до что для блокчейна разработчика база данных это типа одна из областей как бы знаний

488
00:36:06,500 --> 00:36:12,020
в которой хорошо бы хорошо рубать у нас в общем то наверное если так

489
00:36:12,020 --> 00:36:17,780
сформулируйте по требования какие был член разработчики крутые то но так вот если на

490
00:36:17,780 --> 00:36:24,280
пальцах то это человек который имеет хорошие такие глубокие знания в трех из пяти как бы

491
00:36:24,280 --> 00:36:30,240
областей области такие лишь первый это алгоритм и структуры данных второе это там криптография

492
00:36:30,240 --> 00:36:37,100
но это понятно естественно это все как вы говорили третье это как ни странно базы данных 4 это

493
00:36:37,100 --> 00:36:42,020
операционная система потому что но именно прям вот как внутри как бы устроена операционная

494
00:36:42,020 --> 00:36:47,120
система переключения процессов всякие там страничные механизмы так далее то что там на

495
00:36:47,120 --> 00:36:54,200
самом деле очень много всего используется крайне эффективно как бы зубья из алгоритмов и 5 это там

496
00:36:54,200 --> 00:37:00,860
безопасность сетевые протоколы то есть умение построить именно сам протокол там я тебе рандом

497
00:37:00,860 --> 00:37:06,400
ты мне подпись этого рандома как бы я тебе в ответ как бы там еще что то то есть то есть понимание

498
00:37:06,400 --> 00:37:11,840
таких низкого уровня механизмах тоже круто для всего в трех из пяти этих областей как бы

499
00:37:12,020 --> 00:37:20,120
да то есть если вы действительно хорошо разбираетесь то с букчейнами будет не очень сложно значит

500
00:37:20,120 --> 00:37:29,720
про репликации я уже много раз говорил значит мы говорим о самом сложном виде репликации которые

501
00:37:29,720 --> 00:37:36,820
есть он называется master мастер значит таким мастер и если вы заходите на индекс там на какую

502
00:37:36,820 --> 00:37:41,720
бы там страницу там не знаю на страницу маркета и делайте выборку дай мне все товары как бы цена

503
00:37:42,020 --> 00:37:49,340
короче говоря и которые там чайники там например у вас происходит выборка из базы данных и вам api

504
00:37:49,340 --> 00:37:55,160
вам api соответственно выдает все вот эти чайники отрисовывать значит на самом деле вы обращаетесь

505
00:37:55,160 --> 00:38:03,820
к базе данных который называется слив и в этой базе данных лежат все чайники но она ридон ли

506
00:38:03,820 --> 00:38:10,940
то есть она заточена на число запросу что вот этих селектов их немерено их там сотни тысяч и

507
00:38:10,940 --> 00:38:16,460
поэтому как бы в яндексе огромное количество этих слоев серверов там не знаю там сотни как

508
00:38:16,460 --> 00:38:22,580
бы там я не знаю там сотни там не знаю может быть тысячи а на самом деле серверов в которой

509
00:38:22,580 --> 00:38:28,520
ведется запись куда добавляются чайники чайники добавляются гораздо реже чем они всплывают как

510
00:38:28,520 --> 00:38:35,420
бы запросах такие базы как бы которые именно у right они называются мастер вот вот мы как бы

511
00:38:35,420 --> 00:38:40,880
все это как бы архитектуры этих слоев как бы забыли у нас есть только мастера теперь

512
00:38:40,940 --> 00:38:51,540
вот по сути майнеры там валидаторы блок-блок продюсер это база данных она довольно часто

513
00:38:51,540 --> 00:38:57,020
эта штука как бы нужно если мы говорим о банке о каком-то дата у нас есть там не знаю там 100

514
00:38:57,020 --> 00:39:05,540
долларов на счету здесь как бы а банк международный и у него вот эта реплика там юсей как бы вот эта

515
00:39:10,940 --> 00:39:17,260
и нам нужно консистентность между ними соблюсти то есть если человек одновременно отправит запрос

516
00:39:17,260 --> 00:39:22,880
сюда и сюда и скажет как бы здесь минус 100 баксов я покупаю велосипед а здесь минус 100 баксов я

517
00:39:22,880 --> 00:39:28,140
покупаю там чайник то как бы надо будет что-то делать то есть либо у него станет баланс минус

518
00:39:28,140 --> 00:39:35,880
100 долларов вот ну то есть поставка не договорятся как бы и там придется там как-то это решать либо

519
00:39:35,880 --> 00:39:40,840
каждый из этих серверов должен поменяться как бы сказать у меня вот столько времени а чувак хочет

520
00:39:40,940 --> 00:39:46,700
снять 100 баксов ты типа согласен тут говорит но у меня время попозже так что я вот ему дам от лук

521
00:39:46,700 --> 00:39:53,420
как бы а тебе как бы разрешаю выполнить эту транзакцию и потом еще и вот и вот это спросит

522
00:39:53,420 --> 00:39:59,740
как бы это же получит вам ответ или там или динай посчитает эти голоса вот в общем мастер мастер

523
00:39:59,740 --> 00:40:05,500
репликация штука такая непростая вот и когда начинаешь читать эти алгоритмы вот этой мастер

524
00:40:05,500 --> 00:40:10,920
мастер репликации там raft access если вам там интересно то они почитают

525
00:40:10,940 --> 00:40:16,340
то после изучения как бы консенсуса в блокчейне вы увидите что это вообще как бы одно и то же

526
00:40:16,340 --> 00:40:23,060
просто как бы здесь будут вместо типа ответов битиков типа окей не окей будут просто электронные

527
00:40:23,060 --> 00:40:27,980
подписи участников ну и проверка что они в правильном реестр там находится и так далее

528
00:40:27,980 --> 00:40:35,900
то есть здесь те же самые как бы подтверждение между репликами это значит тут по сути репликация

529
00:40:35,900 --> 00:40:40,940
данных между между базами данных теперь что такое брайтах от лока

530
00:40:40,940 --> 00:40:49,340
мы теперь смотрим на одну базу данных в которой постоянно валится дофига всяких запросов там

531
00:40:49,340 --> 00:40:56,000
вставка удаления но у нас там в базе данных там соответственно строчки как бы кто-то как бы добавил

532
00:40:56,000 --> 00:41:01,160
новую строчку там с васей как бы его 100 долларов то таки за вычеркнул какую-то строчку там у него

533
00:41:01,160 --> 00:41:09,020
баланс до нуля кто-то про апдейтил строчку insert апдейт и доделит вот они валятся тут мастер реплика

534
00:41:10,940 --> 00:41:18,980
как она это дело процессе во-первых если она будет их просто накатывать как бы атомарно каждую

535
00:41:18,980 --> 00:41:25,820
транзакцию вот так вот как бы на таблицу возникает проблема различных блокировок то есть там я сейчас

536
00:41:25,820 --> 00:41:31,680
вот апдейт вот эту вот строчку а мой менеджер делает выборку там не знаю делает среднее там

537
00:41:31,680 --> 00:41:39,920
не знаю число как бы денег на балансе и вот пока как бы я вот эту свою апдейт не закончу не разберусь

538
00:41:40,940 --> 00:41:45,180
его менеджеру придется подождать потому что он там тоже там стучится со своими там не знаю там

539
00:41:45,180 --> 00:41:51,980
селекциями там и так далее то есть я вот эту штуку блокирую на это время или оставляя там тысячу новых

540
00:41:51,980 --> 00:41:59,180
как бы строк или еще что-то а еще как бы в базы данных вот эти вещи они объединяются в транзакции

541
00:41:59,180 --> 00:42:03,940
то есть там сначала две вставки потом одно удаление потом один апдейт то есть это в одну

542
00:42:03,940 --> 00:42:10,940
таблицу другую то встретит 4 и все это должно выполняться еще атомарно то есть

543
00:42:10,940 --> 00:42:16,820
либо все выполнилось либо все как бы откатилась целиком то есть баз данных нам так позволяют

544
00:42:16,820 --> 00:42:21,760
делать как бы не задумываться что там под капотом как бы а под капотом там как раз находится вот этот

545
00:42:21,760 --> 00:42:29,900
в райдах от лог то есть лог который пишет только вперед значит туда вот эти все транзакции складываются

546
00:42:29,900 --> 00:42:40,060
t1 t2 t3 прям в порядке в котором они приходят t4 там и у него есть понятие у этого в райдах лога так называемый чекпоинт

547
00:42:40,940 --> 00:42:50,780
ну потом опять сколько транзакции потом опять как бы потом опять чипом там опять в транзакции опять

548
00:42:50,780 --> 00:42:58,480
как бы чип он вот чип видом . в которой в нашей базе данных информация фиксируется то есть сделали

549
00:42:58,480 --> 00:43:04,540
т1 т23 т4 поставили чекпоинт то есть провели первую транзакцию вторую транзакцию третью

550
00:43:04,540 --> 00:43:10,740
транзакцию 4 транзакция за комит или по сути как бы сделали комик в базы данных

551
00:43:10,940 --> 00:43:15,540
есть прям собственно инструкция такая как бы комит провести вот эту мою транзакцию как бы

552
00:43:15,540 --> 00:43:24,140
и в конце как бы сделать камень если все хорошо прошло вот соответственно база запоминает свои

553
00:43:24,140 --> 00:43:30,980
так называемые снэпшоты снимки как бы на каждый чекпоинт и если вот здесь вот я вырублю свет

554
00:43:30,980 --> 00:43:36,260
внутри как бы чекпоинт ну то давайте вот здесь вот короче говоря выключу свет то есть я сделал

555
00:43:36,260 --> 00:43:42,260
там закатил первую транзакцию вторую а вот 3 4 не успел как бы у меня компьютер вырубили то

556
00:43:42,260 --> 00:43:45,960
в следующий раз когда база поднимется она поймет как бы что она находится вот на этом

557
00:43:45,960 --> 00:43:51,820
чекпоинте она поймет что вот эти накаченные мной изменения на диск запиши записаны они

558
00:43:51,820 --> 00:43:58,140
еще не за комыми чен и то есть они еще не в комите и она как бы откатит базу да вот это

559
00:43:58,140 --> 00:44:04,520
учит по это и начнет как с него работать а начнет наказывать как бы то есть такие как

560
00:44:04,520 --> 00:44:06,140
бы именно такието

561
00:44:06,260 --> 00:44:10,520
точки невозврата, по сути, вот этим, как бы, чекпоинтами,

562
00:44:10,680 --> 00:44:13,660
и базы данных умеют быстро между ними переключаться,

563
00:44:13,780 --> 00:44:14,920
то есть быстренько сбрасывать.

564
00:44:16,220 --> 00:44:20,000
То есть там есть версии строк, там, в общем, куча разных механизмов.

565
00:44:20,080 --> 00:44:22,420
Это, кстати, очень, ну, очень полезно почитать.

566
00:44:22,580 --> 00:44:26,840
Полезно почитать, как это сделано там в MySQL, в Postgres, наверное,

567
00:44:26,840 --> 00:44:30,520
наиболее такая, как бы, хорошо описанная, как бы, вот эта вот история

568
00:44:30,520 --> 00:44:33,700
с версионированием строк, как они вот с этим работают.

569
00:44:33,700 --> 00:44:38,480
То есть интересно, да, почитать, как это все сделано в KVL, в базах данных.

570
00:44:38,740 --> 00:44:42,260
Значит, в KVL, в базах данных, вот всякие наши Mongo и Redis,

571
00:44:42,760 --> 00:44:46,080
вот эти вот транзакции, то есть почему они такие быстрые,

572
00:44:46,140 --> 00:44:49,260
потому что они очень простые, то есть они просто, как бы, тупые,

573
00:44:49,320 --> 00:44:52,060
они не бегают, как бы, не захватывают там миллионы строк, как бы,

574
00:44:52,080 --> 00:44:56,560
в одной транзакции, вот, ну, либо они как-то очень так

575
00:44:56,560 --> 00:45:00,340
аранжируются там правильно, там быстрее работают чекпоинты,

576
00:45:00,340 --> 00:45:03,320
вот эти вот откаты, как бы, поэтому эти базы, они более,

577
00:45:03,440 --> 00:45:03,680
более...

578
00:45:03,700 --> 00:45:05,420
более быстрые, вот.

579
00:45:05,460 --> 00:45:08,380
Но они, конечно, такую логику, как SQL, не позволяют реализовать,

580
00:45:08,460 --> 00:45:12,360
там, типа, не знаю, там, там, очень сложных выборок.

581
00:45:13,200 --> 00:45:15,580
Вот, и вот эта вот конструкция называется Write a Headlock.

582
00:45:17,100 --> 00:45:21,180
Секрет KVL в баз данных, как раз, вот тоже, в Mongo и Redis,

583
00:45:21,220 --> 00:45:27,440
в том, что они бегут по вот этому логу крайне предсказуемо

584
00:45:27,440 --> 00:45:30,160
с точки зрения потребления ресурсов.

585
00:45:30,160 --> 00:45:32,560
То есть они вот эти вот расстояния между чекпоинтами,

586
00:45:32,560 --> 00:45:36,740
они, в отличие от SQL, очень здорово измеримы, то есть прям

587
00:45:36,740 --> 00:45:39,240
по количеству обновляемых ключей, то есть здесь прямо

588
00:45:39,240 --> 00:45:42,820
есть какое-то такое фиксированное N, как бы, и они очень здорово

589
00:45:42,820 --> 00:45:47,180
отмеряют вот эти вот кванты исполнения, и у вас компьютер,

590
00:45:47,180 --> 00:45:50,940
ну, задействован, задействован на полную, как бы, мощность,

591
00:45:51,020 --> 00:45:53,560
он прям жрет максимальное количество вот этих транзакций.

592
00:45:53,640 --> 00:45:56,420
А в SQL потенциально может прилететь вот эта вот прям

593
00:45:56,420 --> 00:45:59,640
огромная какая-нибудь штука, которая все это дело, как бы,

594
00:45:59,640 --> 00:46:01,120
затормозит сильно надолго.

595
00:46:01,120 --> 00:46:08,060
Ну, и в SQL базах там бывают, как бы, всякие там процедуры

596
00:46:08,060 --> 00:46:12,520
оптимизации вот этих таблиц, уплотнения, когда они приходят,

597
00:46:12,580 --> 00:46:15,600
здесь все начинает тормозить, все, все, как бы, останавливаются,

598
00:46:15,740 --> 00:46:18,900
процессинг вау останавливается, вот.

599
00:46:20,360 --> 00:46:25,100
И есть такой класс, как бы, k-value баз данных, levelDB,

600
00:46:25,600 --> 00:46:29,680
его наследница rocksDB, здесь такие две, короче говоря,

601
00:46:29,680 --> 00:46:30,900
k-value базы данных.

602
00:46:31,120 --> 00:46:36,900
Которые знамениты тем, что они наиболее предсказуемым образом

603
00:46:36,900 --> 00:46:39,900
вот этот вот вал, как бы, процесса, то есть очень-очень ровно,

604
00:46:40,180 --> 00:46:44,240
то есть никогда не бывает у вас там на компьютере, что CPU у вас вот такой,

605
00:46:44,320 --> 00:46:49,380
а потом вдруг вот такой вот, потому что пришел скрипт компактификации

606
00:46:49,380 --> 00:46:53,860
вот этой вот таблицы или там что-нибудь еще, то есть или там пришел там,

607
00:46:53,900 --> 00:46:57,180
я не знаю, там какой-то супер запрос, который все, как бы, повалил,

608
00:46:57,180 --> 00:47:00,860
то есть они работают прям ровно, то есть больше ключей вот так вот,

609
00:47:00,960 --> 00:47:01,100
вот так вот.

610
00:47:01,120 --> 00:47:06,120
И пока не упрутся в 100%, как бы, ну, там уже, как бы, да, ловить нечего,

611
00:47:06,200 --> 00:47:08,420
там все умерло, вот.

612
00:47:10,020 --> 00:47:15,120
И, ну, у них там специально от слова, как бы, level, там на самом деле идет,

613
00:47:15,900 --> 00:47:21,600
как бы, вот этот первый вал в write a headlock, данные из него собираются,

614
00:47:21,680 --> 00:47:27,140
как бы, там во второго уровня, там level 2, как бы, там упаковываются,

615
00:47:27,140 --> 00:47:31,080
там достаточно тоже предсказуемо, потом level 2, как бы, еще,

616
00:47:31,120 --> 00:47:35,400
упаковываются в следующий, как бы, лейер, вот.

617
00:47:35,440 --> 00:47:39,680
И вот таким вот образом здесь получается такой очень ровный, предсказуемый процессор.

618
00:47:39,800 --> 00:47:44,320
Поэтому вот блокчейн ноды выбирают вот такие вот базы данных,

619
00:47:44,480 --> 00:47:50,380
level db, rocks db, под капотом и у Геса, и там, по-моему, и у Эрегона,

620
00:47:50,760 --> 00:47:55,340
и в RAST-имплементациях, и в Тоне, и в Polkadot, короче говоря,

621
00:47:55,340 --> 00:48:00,880
ну, то есть и в разных блокчейнах, как бы, под капотом очень часто стоит вот это вот level db,

622
00:48:00,880 --> 00:48:04,820
или rocks db, как раз вот за счет вот этих вот ее фишек.

623
00:48:05,700 --> 00:48:11,140
Очень жестко структурированные транзакции, прибитые прям гвоздями, там, по размеру,

624
00:48:11,220 --> 00:48:15,400
по времени исполнения, предсказуемая вот эта компактификация, как бы,

625
00:48:15,620 --> 00:48:21,440
и отсутствие таких производительности просадок таких жестких, вот.

626
00:48:21,520 --> 00:48:23,660
Потому что для блокчейна это смерти подобно.

627
00:48:24,280 --> 00:48:30,360
Если вы можете какой-то транзакции вызвать, не знаю, залипание блокчейн ноды

628
00:48:30,880 --> 00:48:34,140
в очень серьезное время, как бы, вы, по сути, атаковали блокчейн.

629
00:48:34,340 --> 00:48:39,920
Вот, если найдете такую штуку, вот, можете приватно отрепортить, как бы, разработчикам,

630
00:48:40,020 --> 00:48:40,780
получите баунти.

631
00:48:42,660 --> 00:48:49,740
Теперь, опять же, с этой точки зрения, тоже, как бы, у кого не было, у кого не было баз данных,

632
00:48:50,280 --> 00:48:52,020
объясню, что такое хранимая процедура.

633
00:48:52,280 --> 00:48:58,480
Хранимая процедура – это как раз вот эта вот пачка вставок, делитов, еще какая-то логика,

634
00:48:58,480 --> 00:49:00,780
там, типа, если, как бы, там, не знаю, там, денег.

635
00:49:00,880 --> 00:49:05,820
Больше нуля, то еще сделать вставку в такую-то таблицу, и так далее, и так далее.

636
00:49:06,320 --> 00:49:07,440
Там, проапдейтить.

637
00:49:07,880 --> 00:49:13,420
И вся вот эта вот штука, она, по сути, лежит в базе данных, прям код, как бы, вот этой вот процедуры,

638
00:49:13,540 --> 00:49:18,640
он прям лежит прямо в SQL-базе данных, и вы вызываете его названием функции.

639
00:49:18,700 --> 00:49:24,860
Ну, например, в Тинькофф, как бы, приносите деньги, там, не знаю, там, оплата, как бы, за кредит.

640
00:49:25,280 --> 00:49:30,380
У него в базе вызывается вот эта вот хранимая процедура, что же это про сейджи,

641
00:49:30,880 --> 00:49:38,540
как бы, увеличит вам баланс, потом, там, типа, удалит, там, типа, задолженность за текущий месяц,

642
00:49:38,800 --> 00:49:41,780
за current month, там, не знаю, платеж, например, если за кредит.

643
00:49:42,460 --> 00:49:47,300
Типа, если, как бы, там, остались еще деньги, как бы, на кредите,

644
00:49:47,420 --> 00:49:52,380
то он вам еще добавит, короче говоря, еще план платежей на следующий месяц,

645
00:49:52,900 --> 00:49:55,260
проапдейтит ваш кредитный рейтинг.

646
00:49:55,860 --> 00:49:59,600
И исполняться вот эта функция, она будет тоже, как бы, атомарной.

647
00:50:00,400 --> 00:50:00,840
Да.

648
00:50:00,880 --> 00:50:04,680
То есть либо выполнится, либо целиком не выполнится, как бы,

649
00:50:04,740 --> 00:50:09,260
либо целиком выполнится, то есть для того, чтобы целостность в базе данных обеспечена.

650
00:50:09,400 --> 00:50:11,600
Такие штуки называются хранимые процедуры.

651
00:50:12,980 --> 00:50:16,100
Вот, там, по-разному, там, вот, там, вызывают в разных базах,

652
00:50:16,180 --> 00:50:20,980
там, где функции, где хранимые процедуры, вот, в общем, там, терминологии, как бы, очень много.

653
00:50:21,660 --> 00:50:25,260
Но, по сути, это, как бы, пачка атомарных действий с...

654
00:50:25,900 --> 00:50:28,400
Атомарная пачка действий из базы данных.

655
00:50:28,860 --> 00:50:30,640
И смарт-контракты очень похожи на вот эти...

656
00:50:30,880 --> 00:50:32,640
хранимые процедуры. То есть если просто

657
00:50:32,640 --> 00:50:34,540
рассматривать эфир как базу данных, то как бы

658
00:50:34,540 --> 00:50:36,420
смарт-контракт это, можно сказать, как бы в нем

659
00:50:36,420 --> 00:50:38,560
хранимые процедуры. Транзакции,

660
00:50:38,640 --> 00:50:40,120
это понятно, как бы пишущие,

661
00:50:40,480 --> 00:50:42,800
это транзакции, которые пишут

662
00:50:42,800 --> 00:50:44,720
в базу, то есть такая же

663
00:50:44,720 --> 00:50:46,700
аналогия. Консенсус

664
00:50:46,700 --> 00:50:49,140
алгоритма это репликация мастер-мастер,

665
00:50:50,260 --> 00:50:50,660
то есть точно

666
00:50:50,660 --> 00:50:52,700
так же как бы то, что здесь

667
00:50:52,700 --> 00:50:54,760
у нас ноды для того, чтобы

668
00:50:54,760 --> 00:50:56,820
договориться о том, как бы

669
00:50:56,820 --> 00:50:58,740
принять блок или не

670
00:50:58,740 --> 00:51:00,540
принять блок, использовать для этого как бы

671
00:51:00,540 --> 00:51:02,540
деньги какие-то там, я не знаю,

672
00:51:02,660 --> 00:51:04,460
там Proof of Work или там Kilowatt,

673
00:51:04,560 --> 00:51:06,600
или там в Proof of Stake договариваться

674
00:51:06,600 --> 00:51:08,820
как бы входишь ли ты в список валидаторов,

675
00:51:08,880 --> 00:51:10,480
за которые деньгами проголосовали.

676
00:51:10,880 --> 00:51:12,340
Это на самом деле второй вопрос.

677
00:51:13,580 --> 00:51:14,940
Здесь просто получается

678
00:51:14,940 --> 00:51:16,180
решать вот эту проблему

679
00:51:16,180 --> 00:51:18,720
распределенного консенсуса этой репликации

680
00:51:18,720 --> 00:51:20,780
при помощи экономических механизмов.

681
00:51:20,780 --> 00:51:22,780
Потому что многие действия как бы просто

682
00:51:22,780 --> 00:51:24,680
невыгодны большинству участников.

683
00:51:26,020 --> 00:51:26,840
Вот. А

684
00:51:26,840 --> 00:51:28,680
по сути это как бы и есть та самая

685
00:51:28,680 --> 00:51:30,080
репликация мастер-мастер,

686
00:51:30,080 --> 00:51:32,200
причем это на

687
00:51:32,200 --> 00:51:34,520
низком уровне это репликация

688
00:51:34,520 --> 00:51:36,040
LevelDB, ну там или

689
00:51:36,040 --> 00:51:38,360
ROXDB, там неважно, какие вы или базы данных

690
00:51:38,360 --> 00:51:40,360
как бы получаются, на самом деле как бы по сути

691
00:51:40,360 --> 00:51:42,580
это механизм репликации

692
00:51:42,580 --> 00:51:44,260
для вот этих вот баз данных, так если

693
00:51:44,260 --> 00:51:45,900
прям совсем как бы на пальцы.

694
00:51:47,440 --> 00:51:47,860
Вот.

695
00:51:48,120 --> 00:51:50,300
Тогда в этом случае наш write a headlock

696
00:51:50,300 --> 00:51:52,180
вот этот, в который мы как бы складируем

697
00:51:52,180 --> 00:51:54,000
транзакции одни за другой, потом их

698
00:51:54,000 --> 00:51:56,500
оформляем как бы в пачки и накатываем

699
00:51:56,500 --> 00:51:57,920
их, то есть на там

700
00:51:57,920 --> 00:51:58,520
чекпоинт,

701
00:52:00,080 --> 00:52:02,080
то как бы вот это вот наш пул транзакций

702
00:52:02,080 --> 00:52:04,140
в P2P, который висит

703
00:52:04,140 --> 00:52:05,940
полностью такой публичный,

704
00:52:06,620 --> 00:52:07,800
а чекпоинты

705
00:52:07,800 --> 00:52:08,980
и коммиты в этом

706
00:52:08,980 --> 00:52:12,440
в этом write a headlock

707
00:52:12,440 --> 00:52:14,080
это по сути как бы новые блоки.

708
00:52:14,920 --> 00:52:15,920
То есть произвели блок,

709
00:52:16,040 --> 00:52:18,140
взяли вот такое вот количество транзакций,

710
00:52:18,740 --> 00:52:19,840
а тамарных накатили

711
00:52:19,840 --> 00:52:22,080
как бы на state database, если потом блок

712
00:52:22,080 --> 00:52:23,780
нам не понравился, мы его откатили

713
00:52:23,780 --> 00:52:24,960
так же как бы а тамарных.

714
00:52:25,700 --> 00:52:28,000
Там вернулись вот сюда как бы к предыдущему

715
00:52:28,000 --> 00:52:28,920
как бы чекпоинту.

716
00:52:30,080 --> 00:52:33,100
Это к тому, что

717
00:52:33,100 --> 00:52:34,980
как бы блокчейн не какие-то там

718
00:52:34,980 --> 00:52:37,020
космолеты, а на самом деле в общем по сути

719
00:52:37,020 --> 00:52:38,740
используют штуки, которые

720
00:52:38,740 --> 00:52:41,020
большие, там крупные

721
00:52:41,020 --> 00:52:42,880
как бы сайты, высоконагруженные

722
00:52:42,880 --> 00:52:44,900
приложения, как бы используют уже годами.

723
00:52:45,080 --> 00:52:46,320
То есть там уже очень много

724
00:52:46,320 --> 00:52:49,120
всего сделано. Там под капотом на самом

725
00:52:49,120 --> 00:52:50,700
деле все те же самые механизмы

726
00:52:50,700 --> 00:52:52,020
находятся.

727
00:52:53,200 --> 00:52:54,500
Вот это про как бы

728
00:52:54,500 --> 00:52:56,640
аналогии с базой данных.

729
00:52:58,320 --> 00:52:59,240
Теперь про

730
00:52:59,240 --> 00:53:00,060
сам шаг.

731
00:53:00,080 --> 00:53:02,120
Смарт-контракт. Так, давайте по прошлому.

732
00:53:02,280 --> 00:53:03,860
Материалы есть? Какие-то вопросы?

733
00:53:09,960 --> 00:53:10,520
Тишина.

734
00:53:11,240 --> 00:53:11,720
Все понятно.

735
00:53:12,160 --> 00:53:14,380
Да, вопросов нет. Отлично.

736
00:53:15,420 --> 00:53:16,560
Так, я еще хотел узнать

737
00:53:16,560 --> 00:53:20,360
как идет ли у нас

738
00:53:20,360 --> 00:53:22,000
запись. Да, идет. Отлично.

739
00:53:22,480 --> 00:53:23,700
Так, поехали.

740
00:53:23,980 --> 00:53:24,860
Вращаю обратно.

741
00:53:28,180 --> 00:53:29,960
Теперь что же

742
00:53:30,080 --> 00:53:32,120
с собой представляется собственно сам

743
00:53:32,120 --> 00:53:34,400
смарт-контракт? Что на них можно

744
00:53:34,400 --> 00:53:36,080
делать? Тоже немножко сегодня

745
00:53:36,080 --> 00:53:36,840
поговорим.

746
00:53:38,600 --> 00:53:40,120
Вернемся обратно как бы

747
00:53:40,120 --> 00:53:42,180
к той нашей как бы прошлой табличке.

748
00:53:42,560 --> 00:53:44,100
Что значит у нас там был Вася,

749
00:53:44,580 --> 00:53:46,520
у него соответственно

750
00:53:46,520 --> 00:53:47,900
был баланс эфира,

751
00:53:48,840 --> 00:53:50,320
у него был анонс

752
00:53:50,320 --> 00:53:52,040
счетчик его транзакций,

753
00:53:52,680 --> 00:53:54,320
у него не было никакого кода,

754
00:53:55,400 --> 00:53:56,480
вот, у него не было

755
00:53:56,480 --> 00:53:57,960
никакого там сториджа.

756
00:54:00,080 --> 00:54:02,440
Вот. И потом он задеплоил

757
00:54:02,440 --> 00:54:03,740
смарт-контракт в сеть.

758
00:54:04,200 --> 00:54:06,060
У этого смарт-контракта появился

759
00:54:06,060 --> 00:54:08,620
адрес, что очень важно. То есть у смарт-контрактов

760
00:54:08,620 --> 00:54:09,300
есть адрес.

761
00:54:10,020 --> 00:54:12,260
У него есть баланс эфира. Когда он создал

762
00:54:12,260 --> 00:54:13,940
он, например, был ноль, как бы, но

763
00:54:13,940 --> 00:54:16,220
в принципе, если контракт позволяет

764
00:54:16,220 --> 00:54:18,060
его код принять себе

765
00:54:18,060 --> 00:54:19,760
как бы эфир, то он может как бы быть

766
00:54:19,760 --> 00:54:22,040
и не нулевым. У него тоже

767
00:54:22,040 --> 00:54:23,720
есть нонс у этого контракта.

768
00:54:24,160 --> 00:54:26,040
Он меняется, если контракт

769
00:54:26,040 --> 00:54:27,960
создает другие контракты, то есть

770
00:54:27,960 --> 00:54:30,040
деплоит как бы там следующие,

771
00:54:30,080 --> 00:54:31,840
как бы там контракты, то у него

772
00:54:31,840 --> 00:54:32,720
нонс меняется.

773
00:54:34,040 --> 00:54:34,480
Вот.

774
00:54:35,860 --> 00:54:37,320
У него есть байт-код.

775
00:54:38,980 --> 00:54:39,940
То есть прям вот

776
00:54:39,940 --> 00:54:41,500
как, не знаю, как содержимое

777
00:54:41,500 --> 00:54:43,120
экзешника, грубо говоря, по сути.

778
00:54:44,340 --> 00:54:45,940
Машинные инструкции, как бы, которые

779
00:54:45,940 --> 00:54:46,920
исполняются EOM.

780
00:54:47,800 --> 00:54:49,860
А, и этот код, как бы, может обращаться

781
00:54:49,860 --> 00:54:51,620
к своему собственному сториджу,

782
00:54:51,780 --> 00:54:53,760
который представляет собой k-value.

783
00:54:53,960 --> 00:54:54,780
Я вообще решил, наверное,

784
00:54:55,340 --> 00:54:58,120
ну, я раньше всегда рисовал вот так вот,

785
00:54:58,120 --> 00:55:00,060
типа кусочки в этом k-value, там, типа,

786
00:55:00,080 --> 00:55:02,020
что у адреса один, там, такие-то данные,

787
00:55:02,080 --> 00:55:04,340
у адреса два, как бы, вторые, другие данные.

788
00:55:04,840 --> 00:55:06,100
Но это вообще не очень правильно,

789
00:55:06,440 --> 00:55:08,020
когда я вам рисую, как бы,

790
00:55:08,080 --> 00:55:10,020
ну, я очень люблю вот эту картинку,

791
00:55:11,040 --> 00:55:12,040
когда здесь, типа, код,

792
00:55:12,300 --> 00:55:14,080
а здесь у нас записано, типа, что там

793
00:55:14,080 --> 00:55:16,040
у Васи, как бы, 100 токенов, значит,

794
00:55:16,140 --> 00:55:18,440
а у Пети 200 токенов.

795
00:55:18,500 --> 00:55:20,020
Вот просто может, как бы, показаться,

796
00:55:20,140 --> 00:55:22,120
что они один за другим идут,

797
00:55:22,220 --> 00:55:24,180
как бы, вот эти вот адреса, там, как-то в памяти

798
00:55:24,180 --> 00:55:25,840
они, там, располагаются рядом.

799
00:55:26,120 --> 00:55:28,040
На самом деле, ну, не так.

800
00:55:28,040 --> 00:55:30,020
То есть вся адресация, она именно k-value,

801
00:55:30,080 --> 00:55:32,240
то есть у этого есть ключ, как бы,

802
00:55:32,400 --> 00:55:33,500
у этого есть ключ,

803
00:55:34,240 --> 00:55:36,240
а value является,

804
00:55:36,320 --> 00:55:37,280
как бы, вот этой вот штукой.

805
00:55:37,680 --> 00:55:40,000
Вот, может, какой-то другой способ изобретать, рисовать

806
00:55:40,000 --> 00:55:41,640
эту вещь. Вот.

807
00:55:43,500 --> 00:55:43,980
Значит,

808
00:55:44,280 --> 00:55:48,000
очень важная, как бы, история о том,

809
00:55:48,160 --> 00:55:49,400
как устроен

810
00:55:49,400 --> 00:55:51,920
storage-контракт. Это штука

811
00:55:51,920 --> 00:55:53,820
такая, как бы, тоже

812
00:55:53,820 --> 00:55:55,160
относится к тому, что я сейчас

813
00:55:55,160 --> 00:55:56,340
рисовал.

814
00:55:58,120 --> 00:55:58,600
Смотрите,

815
00:55:59,280 --> 00:55:59,900
у меня,

816
00:56:00,080 --> 00:56:02,680
один и тот же код, у меня есть какая-нибудь переменная,

817
00:56:02,680 --> 00:56:04,680
variable a,

818
00:56:04,680 --> 00:56:08,280
значит, она где-то, как бы, в storage-е находится.

819
00:56:08,280 --> 00:56:10,280
Вот, вот здесь, вот у меня, вот здесь,

820
00:56:10,280 --> 00:56:12,280
ссылается, как бы, на переменную a.

821
00:56:12,280 --> 00:56:14,280
У меня там записано 100.

822
00:56:14,280 --> 00:56:16,280
Как бы, потом я говорю a равно 200,

823
00:56:16,280 --> 00:56:18,280
как бы, здесь становится 200.

824
00:56:18,280 --> 00:56:20,280
И

825
00:56:20,280 --> 00:56:22,280
вот этот вот код, представьте,

826
00:56:22,280 --> 00:56:24,280
что он...

827
00:56:24,280 --> 00:56:26,280
Ой, простите.

828
00:56:26,280 --> 00:56:28,280
Тихо, ну.

829
00:56:28,280 --> 00:56:29,280
Что этот код, он, как бы, не имеет никакого значения.

830
00:56:29,280 --> 00:56:31,280
Что этот код, он, на самом деле, находится

831
00:56:31,280 --> 00:56:33,280
на большом количестве разных компьютеров

832
00:56:33,280 --> 00:56:35,280
с разной архитектурой.

833
00:56:35,280 --> 00:56:37,280
Если бы мы этот код

834
00:56:37,280 --> 00:56:39,280
запускали, как бы, в разных, там,

835
00:56:39,280 --> 00:56:41,280
ну, не знаю, там, на JS

836
00:56:41,280 --> 00:56:43,280
и в разных браузерах, на

837
00:56:43,280 --> 00:56:45,280
C++, короче говоря, на разных

838
00:56:45,280 --> 00:56:47,280
машинах, то у нас у этой

839
00:56:47,280 --> 00:56:49,280
переменной каждый раз бы выделялся

840
00:56:49,280 --> 00:56:51,280
определенный адрес памяти, какой-нибудь, там,

841
00:56:51,280 --> 00:56:53,280
0x, там, не знаю, там,

842
00:56:53,280 --> 00:56:55,280
fa0000001,

843
00:56:55,280 --> 00:56:57,280
кто там на C, там, прогал.

844
00:56:57,280 --> 00:56:59,280
Вот.

845
00:56:59,280 --> 00:57:01,280
И эти адреса

846
00:57:01,280 --> 00:57:03,280
этой переменной, они, на самом деле,

847
00:57:03,280 --> 00:57:05,280
были бы разные. То есть в другом контракте,

848
00:57:05,280 --> 00:57:07,280
как бы, по D2A было бы

849
00:57:07,280 --> 00:57:09,280
выделено, было бы выделено другое

850
00:57:09,280 --> 00:57:11,280
место в памяти с другим

851
00:57:11,280 --> 00:57:13,280
адресом, там, и так далее, и так далее.

852
00:57:13,280 --> 00:57:15,280
Значит, для того, чтобы

853
00:57:15,280 --> 00:57:17,280
даже storage,

854
00:57:17,280 --> 00:57:19,280
как бы, имел полностью детерминированный

855
00:57:19,280 --> 00:57:21,280
вид на всех, как бы, компьютерах,

856
00:57:21,280 --> 00:57:23,280
переменные в смарт-контрактах,

857
00:57:23,280 --> 00:57:25,280
все внутренние, как бы, они адресуются

858
00:57:25,280 --> 00:57:27,280
исключительно по ключу. Вот.

859
00:57:27,280 --> 00:57:29,280
Причем довольно просто.

860
00:57:29,280 --> 00:57:31,280
Смотрите, у меня есть смарт-контракт,

861
00:57:31,280 --> 00:57:33,280
я объявил в нем первую переменную

862
00:57:33,280 --> 00:57:35,280
размером,

863
00:57:35,280 --> 00:57:37,280
ну, здесь у нас

864
00:57:37,280 --> 00:57:39,280
все будет размером 256 бит,

865
00:57:39,280 --> 00:57:41,280
практически все по дефолту, то есть любые

866
00:57:41,280 --> 00:57:43,280
данные размером 256 бит, любые

867
00:57:43,280 --> 00:57:45,280
ключи размером 256 бит.

868
00:57:45,280 --> 00:57:47,280
Сейчас объясню, почему.

869
00:57:47,280 --> 00:57:49,280
Я создал первую

870
00:57:49,280 --> 00:57:51,280
переменную, и

871
00:57:51,280 --> 00:57:53,280
грубо говоря, так называемый

872
00:57:53,280 --> 00:57:55,280
слот, есть такое, как бы,

873
00:57:55,280 --> 00:57:57,280
понятие в смарт-контрактах, вот этот вот слот,

874
00:57:57,280 --> 00:57:59,280
как бы, его адрес

875
00:57:59,280 --> 00:58:01,280
будет равен хэшу,

876
00:58:01,280 --> 00:58:03,280
вот тот самый, как бы, там,

877
00:58:03,280 --> 00:58:05,280
алгоритм хэширования, от

878
00:58:05,280 --> 00:58:07,280
адреса контракта и

879
00:58:07,280 --> 00:58:09,280
номера вот этого слота.

880
00:58:09,280 --> 00:58:11,280
Вот это, как бы, называется слот

881
00:58:11,280 --> 00:58:13,280
номер. Я

882
00:58:13,280 --> 00:58:15,280
переменную a объявил первой, как бы, она

883
00:58:15,280 --> 00:58:17,280
заняла слот 0.

884
00:58:17,280 --> 00:58:19,280
Она стала, как бы, вот сюда. То есть

885
00:58:19,280 --> 00:58:21,280
слот номер-то, конечно, 0,

886
00:58:21,280 --> 00:58:23,280
и когда я создам, как бы,

887
00:58:23,280 --> 00:58:25,280
переменную b, скажу, что там

888
00:58:25,280 --> 00:58:27,280
b равно a,

889
00:58:27,280 --> 00:58:29,280
и она у меня, переменная b, как бы,

890
00:58:29,280 --> 00:58:31,280
попадет в слот номер 1,

891
00:58:31,280 --> 00:58:33,280
хэш от контракта и от

892
00:58:33,280 --> 00:58:35,280
единицы. Вот здесь у меня будет

893
00:58:35,280 --> 00:58:37,280
переменная a, здесь будет переменная b,

894
00:58:37,280 --> 00:58:39,280
которая там будет равна,

895
00:58:39,280 --> 00:58:41,280
там, не знаю, там, 200.

896
00:58:41,280 --> 00:58:43,280
Тем не менее,

897
00:58:43,280 --> 00:58:45,280
то есть сам адрес

898
00:58:45,280 --> 00:58:47,280
вот этой вот ячейки в сторидже,

899
00:58:47,280 --> 00:58:49,280
он будет хэшом

900
00:58:49,280 --> 00:58:51,280
от адреса контракта и

901
00:58:51,280 --> 00:58:53,280
единицы.

902
00:58:53,280 --> 00:58:55,280
Для чего это сделано?

903
00:58:55,280 --> 00:58:57,280
Это сделано, чтобы на низком уровне

904
00:58:57,280 --> 00:58:59,280
в той же самой k-value базе данных,

905
00:58:59,280 --> 00:59:01,280
да, в нашей leveldb или roxdb

906
00:59:01,280 --> 00:59:03,280
один и тот же

907
00:59:03,280 --> 00:59:05,280
контракт работал всегда,

908
00:59:05,280 --> 00:59:07,280
ну, чтобы вот эту информацию

909
00:59:07,280 --> 00:59:09,280
о сторидже контракта хранить в

910
00:59:09,280 --> 00:59:11,280
k-value базе данных.

911
00:59:11,280 --> 00:59:13,280
То есть я на другом компьютере

912
00:59:13,280 --> 00:59:15,280
синканул блокчейн,

913
00:59:15,280 --> 00:59:17,280
накатил, как бы, свою state database,

914
00:59:17,280 --> 00:59:19,280
у меня там вот по вот этому адресу

915
00:59:19,280 --> 00:59:21,280
лежит переменная a

916
00:59:21,280 --> 00:59:23,280
от моего контракта,

917
00:59:23,280 --> 00:59:25,280
а по этому адресу

918
00:59:25,280 --> 00:59:27,280
лежит переменная b от адреса.

919
00:59:27,280 --> 00:59:29,280
Ну, от адреса контракта.

920
00:59:29,280 --> 00:59:31,280
Я могу всегда ее найти.

921
00:59:31,280 --> 00:59:33,280
И это будет абсолютно

922
00:59:33,280 --> 00:59:35,280
одинаково на всех компьютерах.

923
00:59:35,280 --> 00:59:37,280
То есть даже, как бы, значения переменных

924
00:59:37,280 --> 00:59:39,280
вот эти, они, по сути, будут в блокчейне

925
00:59:39,280 --> 00:59:41,280
реплицироваться через обновление

926
00:59:41,280 --> 00:59:43,280
вот этой вот state database.

927
00:59:43,280 --> 00:59:45,280
То есть кто-то выполнит транзакцию,

928
00:59:45,280 --> 00:59:47,280
запишет что-то в b,

929
00:59:47,280 --> 00:59:49,280
у b появится слот

930
00:59:49,280 --> 00:59:51,280
в сторидже, этот слот

931
00:59:51,280 --> 00:59:53,280
в сторидже, по сути, займет, как бы,

932
00:59:53,280 --> 00:59:55,280
определенную, ну, там,

933
00:59:55,280 --> 00:59:57,280
определенную данную

934
00:59:57,280 --> 00:59:59,280
и запишет, как бы, вот в этот вот leveldb,

935
00:59:59,280 --> 01:00:01,280
и

936
01:00:01,280 --> 01:00:03,280
вот этот ключ значения,

937
01:00:03,280 --> 01:00:05,280
они будут реплицированы.

938
01:00:05,280 --> 01:00:07,280
Ну, и, конечно, войдет в state root, будет включено

939
01:00:07,280 --> 01:00:09,280
в блок, там, и так далее. То есть каждые такие

940
01:00:09,280 --> 01:00:11,280
операции вот с этими переменами,

941
01:00:11,280 --> 01:00:13,280
которые находятся в сторидже,

942
01:00:13,280 --> 01:00:15,280
они все выполняются в консенсусе.

943
01:00:17,280 --> 01:00:19,280
То есть все изменения их

944
01:00:19,280 --> 01:00:21,280
реплицируются. Это довольно,

945
01:00:21,280 --> 01:00:23,280
как бы, важная штука, чтобы понимать, как бы,

946
01:00:23,280 --> 01:00:25,280
что там внутри контрактов происходит.

947
01:00:25,280 --> 01:00:27,280
То есть это, по сути,

948
01:00:27,280 --> 01:00:29,280
как бы, не оперативная

949
01:00:29,280 --> 01:00:31,280
память. Очень любят, как бы,

950
01:00:31,280 --> 01:00:33,280
там, контракт, как бы, выглядит

951
01:00:33,280 --> 01:00:35,280
так это по коду, как бы, что я

952
01:00:35,280 --> 01:00:37,280
объявил переменную, она у меня равна, там,

953
01:00:37,280 --> 01:00:39,280
тому-то, тому-то, но она там как-то сохраняется.

954
01:00:39,280 --> 01:00:41,280
На самом деле это именно

955
01:00:41,280 --> 01:00:43,280
сторидж.

956
01:00:43,280 --> 01:00:45,280
Сторидж это то, что аналог,

957
01:00:45,280 --> 01:00:47,280
я не знаю, записи на диск

958
01:00:47,280 --> 01:00:49,280
в реальной программе. Вот.

959
01:00:49,280 --> 01:00:51,280
А так у контракта, конечно же,

960
01:00:51,280 --> 01:00:53,280
есть у него, как бы, и оперативная

961
01:00:53,280 --> 01:00:55,280
память, memory,

962
01:00:55,280 --> 01:00:57,280
ему же там что-то надо делать, ему надо

963
01:00:57,280 --> 01:00:59,280
там, там, циклы какие-то делать, там,

964
01:00:59,280 --> 01:01:01,280
что-то там разворачивать в память, массивы

965
01:01:01,280 --> 01:01:03,280
в них там создавать, значит, бегать по ним,

966
01:01:03,280 --> 01:01:05,280
что-то там считать и так далее. То есть там

967
01:01:05,280 --> 01:01:07,280
тоже есть выделение памяти,

968
01:01:07,280 --> 01:01:09,280
локация этой памяти,

969
01:01:11,280 --> 01:01:13,280
ну, под определенные вещи. Ну, понятно,

970
01:01:13,280 --> 01:01:15,280
есть, конечно, там и del-локация,

971
01:01:15,280 --> 01:01:17,280
как бы, памяти, как бы, но она автоматом

972
01:01:17,280 --> 01:01:19,280
происходит, когда транзакция завершается,

973
01:01:19,280 --> 01:01:21,280
провод, все это выкидывается.

974
01:01:21,280 --> 01:01:23,280
А так, по-хорошему, есть, да, действительно,

975
01:01:23,280 --> 01:01:25,280
как бы, оперативная память. Поэтому не путайте, как бы,

976
01:01:25,280 --> 01:01:27,280
memory есть в смарт-контрактах,

977
01:01:27,280 --> 01:01:29,280
как бы, memory это

978
01:01:29,280 --> 01:01:31,280
отдельная история. Это то,

979
01:01:31,280 --> 01:01:33,280
что на момент исполнения одной функции,

980
01:01:33,280 --> 01:01:35,280
как бы, есть у контракта,

981
01:01:35,280 --> 01:01:37,280
то есть оперативная память,

982
01:01:37,280 --> 01:01:39,280
а есть storage.

983
01:01:39,280 --> 01:01:41,280
Вот, и

984
01:01:41,280 --> 01:01:43,280
поэтому там часть переменных, как бы, относится

985
01:01:43,280 --> 01:01:45,280
к storage, как бы, а часть переменных вы можете

986
01:01:45,280 --> 01:01:47,280
объявить, как бы, в памяти.

987
01:01:47,280 --> 01:01:49,280
Вот, это такая довольно важная штука.

988
01:01:49,280 --> 01:01:51,280
То, что storage в случае успешного

989
01:01:51,280 --> 01:01:53,280
завершения функции, если не будет

990
01:01:53,280 --> 01:01:55,280
реверта, как бы, оно сохраняется,

991
01:01:55,280 --> 01:01:57,280
так и вы, любая из данных, то есть вы присвоили

992
01:01:57,280 --> 01:01:59,280
а, там, 200, как бы, и оно будет

993
01:01:59,280 --> 01:02:01,280
все время 200, как бы, всегда,

994
01:02:01,280 --> 01:02:03,280
как бы, во всех следующих функциях вы

995
01:02:03,280 --> 01:02:05,280
обращаетесь к а, как бы, получите 200,

996
01:02:05,280 --> 01:02:07,280
там, через 100 блоков, там, если

997
01:02:07,280 --> 01:02:09,280
где-то обменений не было.

998
01:02:09,280 --> 01:02:11,280
Вот. Это такое, как бы,

999
01:02:11,280 --> 01:02:13,280
персистентное хранилище.

1000
01:02:13,280 --> 01:02:15,280
Значит,

1001
01:02:15,280 --> 01:02:17,280
сам код смарт-контрактов

1002
01:02:17,280 --> 01:02:19,280
мы сейчас тоже будем смотреть.

1003
01:02:19,280 --> 01:02:21,280
Давайте, может, прям сразу

1004
01:02:21,280 --> 01:02:23,280
сходим, какой-нибудь там глянем.

1005
01:02:23,280 --> 01:02:25,280
Простенький.

1006
01:02:25,280 --> 01:02:27,280
RapidEther. Вот здесь можно

1007
01:02:27,280 --> 01:02:29,280
посмотреть контракт его.

1008
01:02:29,280 --> 01:02:31,280
Там есть, правда, там

1009
01:02:31,280 --> 01:02:33,280
по-дурацки довольно. Sorry, там.

1010
01:02:33,280 --> 01:02:35,280
Не знаю, как побольше сделать.

1011
01:02:35,280 --> 01:02:37,280
То есть, вот так.

1012
01:02:37,280 --> 01:02:39,280
Значит,

1013
01:02:39,280 --> 01:02:41,280
так, тоже кратко, как бы, если по этой

1014
01:02:41,280 --> 01:02:43,280
штуке, как бы, пробежаться, то

1015
01:02:43,280 --> 01:02:45,280
на самом деле, в уме, как бы,

1016
01:02:45,280 --> 01:02:47,280
слово контракт можно заменить на слово

1017
01:02:47,280 --> 01:02:49,280
класс. Прям, вот, как

1018
01:02:49,280 --> 01:02:51,280
C++ класс. Здесь, действительно,

1019
01:02:51,280 --> 01:02:53,280
работает изо всех сил

1020
01:02:53,280 --> 01:02:55,280
объект-ориентированное программирование.

1021
01:02:55,280 --> 01:02:57,280
Солидить — это объект-ориентированный язык.

1022
01:02:57,280 --> 01:02:59,280
Что мы еще,

1023
01:02:59,280 --> 01:03:01,280
как бы, знаем, что у нас есть

1024
01:03:01,280 --> 01:03:03,280
в объект-ориентированных языках?

1025
01:03:03,280 --> 01:03:05,280
У нас есть конструкторы.

1026
01:03:05,280 --> 01:03:07,280
Здесь они тоже есть. То есть,

1027
01:03:07,280 --> 01:03:09,280
в тот момент, когда вы будете

1028
01:03:09,280 --> 01:03:11,280
деплоить, размещать вот этот ваш код,

1029
01:03:11,280 --> 01:03:13,280
как бы, у вас выполнится код конструктора,

1030
01:03:13,280 --> 01:03:15,280
который инициализирует какие-то базовые вещи

1031
01:03:15,280 --> 01:03:17,280
в сторидже.

1032
01:03:17,280 --> 01:03:19,280
У нас есть публичные

1033
01:03:19,280 --> 01:03:21,280
и приватные переменные.

1034
01:03:21,280 --> 01:03:23,280
Вот здесь тоже, как бы, есть там public.

1035
01:03:23,280 --> 01:03:25,280
Здесь, там, три вида, как бы, переменных.

1036
01:03:25,280 --> 01:03:27,280
Вот.

1037
01:03:27,280 --> 01:03:29,280
Имеются области видимости.

1038
01:03:29,280 --> 01:03:31,280
Если это public, вы можете снаружи к ней обратиться,

1039
01:03:31,280 --> 01:03:33,280
получить ее значение, использовать там

1040
01:03:33,280 --> 01:03:35,280
каких-то там внешних функций.

1041
01:03:35,280 --> 01:03:37,280
Если она private, то вы ее можете только

1042
01:03:37,280 --> 01:03:39,280
внутри контракта использовать.

1043
01:03:39,280 --> 01:03:41,280
Вот, снаружи не можете запросить.

1044
01:03:41,280 --> 01:03:43,280
Здесь есть,

1045
01:03:43,280 --> 01:03:45,280
ну, типы данных,

1046
01:03:45,280 --> 01:03:47,280
там, все это мы с вами как раз

1047
01:03:47,280 --> 01:03:49,280
на следующей лекции будем смотреть.

1048
01:03:49,280 --> 01:03:51,280
То есть, самые, как бы,

1049
01:03:51,280 --> 01:03:53,280
типовые солидите паттерны.

1050
01:03:53,280 --> 01:03:55,280
Здесь есть ассоциативные массивы,

1051
01:03:55,280 --> 01:03:57,280
там, массивы, как бы,

1052
01:03:57,280 --> 01:03:59,280
с динамическим размером,

1053
01:03:59,280 --> 01:04:01,280
фиксированной длины.

1054
01:04:01,280 --> 01:04:03,280
Вот.

1055
01:04:03,280 --> 01:04:05,280
Есть, соответственно, функция,

1056
01:04:05,280 --> 01:04:07,280
вот, собственно, их название.

1057
01:04:07,280 --> 01:04:09,280
У них тоже есть

1058
01:04:09,280 --> 01:04:11,280
области видимости.

1059
01:04:11,280 --> 01:04:13,280
Вот, есть всякие там ключевые словечки.

1060
01:04:13,280 --> 01:04:15,280
Например, payable означает, что можно вызвать эту функцию

1061
01:04:15,280 --> 01:04:17,280
и прислать в нее эфир.

1062
01:04:17,280 --> 01:04:19,280
То есть, я могу

1063
01:04:19,280 --> 01:04:21,280
создать транзакцию, сказать, вызываю функцию

1064
01:04:21,280 --> 01:04:23,280
deposit и прикладываю к этому вызову

1065
01:04:23,280 --> 01:04:25,280
10 эфира.

1066
01:04:25,280 --> 01:04:27,280
Вот. Соответственно,

1067
01:04:27,280 --> 01:04:29,280
контракт, если эту функцию правильно обработает,

1068
01:04:29,280 --> 01:04:31,280
он съест мои 10 эфира,

1069
01:04:31,280 --> 01:04:33,280
увеличит свой баланс на 10,

1070
01:04:33,280 --> 01:04:35,280
как бы, запишет там,

1071
01:04:35,280 --> 01:04:37,280
что-то себе, как бы, в storage про то, что

1072
01:04:37,280 --> 01:04:39,280
я принес 10 эфира.

1073
01:04:39,280 --> 01:04:41,280
Вот. Ну и, соответственно, функция там

1074
01:04:41,280 --> 01:04:43,280
закончится. Вот.

1075
01:04:43,280 --> 01:04:45,280
И есть функции

1076
01:04:45,280 --> 01:04:47,280
getter'ы, а есть функции

1077
01:04:47,280 --> 01:04:49,280
setter'ы. Так, чтобы я точно,

1078
01:04:49,280 --> 01:04:51,280
как бы, ничего не забыл.

1079
01:04:51,280 --> 01:04:53,280
Кстати, уберу вот это

1080
01:04:53,280 --> 01:04:55,280
окно, мне клип мешает.

1081
01:04:55,280 --> 01:04:59,280
Есть функции getter'ы, есть setter'ы.

1082
01:04:59,280 --> 01:05:01,280
Значит, getter'ы, вот это ключевое

1083
01:05:01,280 --> 01:05:03,280
слово view, это, по сути,

1084
01:05:03,280 --> 01:05:05,280
функции, которые ничего

1085
01:05:05,280 --> 01:05:07,280
не записывают.

1086
01:05:07,280 --> 01:05:09,280
И у людей сразу, соответственно, вопрос, блин,

1087
01:05:09,280 --> 01:05:11,280
ты же говорил, типа, что в блокчейне за все

1088
01:05:11,280 --> 01:05:13,280
платят, как бы, а что, за вызов

1089
01:05:13,280 --> 01:05:15,280
этой функции не платят?

1090
01:05:15,280 --> 01:05:17,280
Ну вот, да, здесь есть

1091
01:05:17,280 --> 01:05:19,280
проблема, за вызов этой функции не платят.

1092
01:05:19,280 --> 01:05:21,280
То есть, если я хочу вызвать total supply

1093
01:05:21,280 --> 01:05:23,280
у какого-нибудь контракта,

1094
01:05:23,280 --> 01:05:25,280
вот, смотрите, в rapid-эфир,

1095
01:05:25,280 --> 01:05:27,280
давайте у него вызовем функцию total supply.

1096
01:05:27,280 --> 01:05:29,280
ReadContract

1097
01:05:29,280 --> 01:05:31,280
здесь функция. Вот я хочу, короче, вызвать

1098
01:05:31,280 --> 01:05:33,280
у него функцию total supply, вот он ее возвращает.

1099
01:05:33,280 --> 01:05:35,280
Вот столько-то в rapid-эфире

1100
01:05:35,280 --> 01:05:37,280
было, соответственно, там, выдано,

1101
01:05:37,280 --> 01:05:39,280
там, напечатано пользователям

1102
01:05:39,280 --> 01:05:41,280
и так далее.

1103
01:05:41,280 --> 01:05:43,280
Как называется этот токен,

1104
01:05:43,280 --> 01:05:45,280
сколько у него десятичных знаков после запятой

1105
01:05:45,280 --> 01:05:47,280
и так далее.

1106
01:05:47,280 --> 01:05:49,280
Какой баланс этого эфира у какого-то адреса.

1107
01:05:49,280 --> 01:05:51,280
На эти вопросы,

1108
01:05:51,280 --> 01:05:53,280
на вот эти вот view'ы

1109
01:05:53,280 --> 01:05:55,280
мне нода отвечает,

1110
01:05:55,280 --> 01:05:57,280
в общем-то, бесплатно.

1111
01:05:57,280 --> 01:05:59,280
То есть, у меня

1112
01:05:59,280 --> 01:06:01,280
вот мой вот этот metamask,

1113
01:06:01,280 --> 01:06:03,280
мой клиент, как бы,

1114
01:06:03,280 --> 01:06:05,280
он идет на ноду,

1115
01:06:05,280 --> 01:06:07,280
он делает jsonrpc,

1116
01:06:07,280 --> 01:06:09,280
как бы, запрос, говорит

1117
01:06:09,280 --> 01:06:11,280
дай-ка мне функцию total supply

1118
01:06:11,280 --> 01:06:13,280
total supply

1119
01:06:13,280 --> 01:06:15,280
вот у этого контракта

1120
01:06:15,280 --> 01:06:17,280
и нода просто, как бы, лезет, соответственно,

1121
01:06:17,280 --> 01:06:19,280
сюда, там, в storage этого контракта

1122
01:06:19,280 --> 01:06:21,280
вызывает вот эту view'шную функцию,

1123
01:06:21,280 --> 01:06:23,280
которая view читает это значение,

1124
01:06:23,280 --> 01:06:25,280
как бы, отдает его мне бесплатно,

1125
01:06:25,280 --> 01:06:27,280
потому что никаких записей в блокчейн

1126
01:06:27,280 --> 01:06:29,280
произведено не было,

1127
01:06:29,280 --> 01:06:31,280
ни за что платить не надо,

1128
01:06:31,280 --> 01:06:33,280
никакие блоки сформированы не были,

1129
01:06:33,280 --> 01:06:35,280
но и, как бы,

1130
01:06:35,280 --> 01:06:37,280
view функции, они, по сути,

1131
01:06:37,280 --> 01:06:39,280
бесплатны.

1132
01:06:39,280 --> 01:06:41,280
Тут есть некоторая такая,

1133
01:06:41,280 --> 01:06:43,280
некоторый обман, потому что

1134
01:06:43,280 --> 01:06:45,280
по поводу того, что они бесплатны,

1135
01:06:45,280 --> 01:06:47,280
потому что, ну, они могут быть

1136
01:06:47,280 --> 01:06:49,280
не совсем бесплатны,

1137
01:06:49,280 --> 01:06:51,280
если у вас внутри вот здесь вот есть, как бы,

1138
01:06:51,280 --> 01:06:53,280
функция, которая пишет в write,

1139
01:06:53,280 --> 01:06:55,280
и она, как бы, внутри себя

1140
01:06:55,280 --> 01:06:57,280
вызывает

1141
01:06:57,280 --> 01:06:59,280
вот эту вот view функцию,

1142
01:06:59,280 --> 01:07:01,280
ну, которая считает, например, вот это вот

1143
01:07:01,280 --> 01:07:03,280
total supply.

1144
01:07:03,280 --> 01:07:05,280
То есть она ее вызывает

1145
01:07:05,280 --> 01:07:07,280
и потом использует ее результат.

1146
01:07:07,280 --> 01:07:09,280
Тогда, как бы, когда

1147
01:07:09,280 --> 01:07:11,280
майнер будет исполнять, как бы, вот эту штуку,

1148
01:07:11,280 --> 01:07:13,280
он, конечно, зайдет вот в эту функцию

1149
01:07:13,280 --> 01:07:15,280
и с удовольствием

1150
01:07:15,280 --> 01:07:17,280
вычитает с вас денежки

1151
01:07:17,280 --> 01:07:19,280
за то, что ему пришлось, там, лезть

1152
01:07:19,280 --> 01:07:21,280
в storage, что-то там обращаться,

1153
01:07:21,280 --> 01:07:23,280
число получать, там, load делать,

1154
01:07:23,280 --> 01:07:25,280
как бы, и так далее.

1155
01:07:25,280 --> 01:07:27,280
То есть вот эта вот стоимость, как бы, этой функции,

1156
01:07:27,280 --> 01:07:29,280
она все-таки будет приплюсована к газу.

1157
01:07:29,280 --> 01:07:31,280
Так что, как бы, view не то, чтобы

1158
01:07:31,280 --> 01:07:33,280
прям вот прям совсем бесплатный.

1159
01:07:33,280 --> 01:07:35,280
Если их использовать внутри, как бы,

1160
01:07:35,280 --> 01:07:37,280
других пишущих функций, они платные.

1161
01:07:37,280 --> 01:07:39,280
А если вы снаружи, как бы, дергаетесь,

1162
01:07:39,280 --> 01:07:41,280
то, пожалуйста, как бы, запрашивайте.

1163
01:07:41,280 --> 01:07:43,280
На здоровье, как бы, они, ну,

1164
01:07:43,280 --> 01:07:45,280
они открыты.

1165
01:07:45,280 --> 01:07:47,280
Вот.

1166
01:07:47,280 --> 01:07:49,280
Еще довольно важный, как бы,

1167
01:07:49,280 --> 01:07:51,280
кусок контракта

1168
01:07:51,280 --> 01:07:53,280
это так называемые ивенты.

1169
01:07:53,280 --> 01:07:55,280
Это такие, как бы,

1170
01:07:55,280 --> 01:07:57,280
события,

1171
01:07:57,280 --> 01:07:59,280
такой, можно сказать, как бы, особый вид

1172
01:07:59,280 --> 01:08:01,280
сториджа. Это, как бы, у нас будет

1173
01:08:01,280 --> 01:08:03,280
называться сторидж.

1174
01:08:03,280 --> 01:08:05,280
Грубо говоря,

1175
01:08:05,280 --> 01:08:07,280
ивенты это лог,

1176
01:08:07,280 --> 01:08:09,280
давайте я вот здесь, там, напишу, как бы,

1177
01:08:09,280 --> 01:08:11,280
это лог событий

1178
01:08:11,280 --> 01:08:13,280
контракта. То есть просто,

1179
01:08:13,280 --> 01:08:15,280
как бы, он тоже фиксируется

1180
01:08:15,280 --> 01:08:17,280
в блокчейне. То есть то, что у вас, как бы,

1181
01:08:17,280 --> 01:08:19,280
произошло вот здесь, вот,

1182
01:08:19,280 --> 01:08:21,280
emit, где у нас там.

1183
01:08:21,280 --> 01:08:23,280
Вот здесь, по сути,

1184
01:08:23,280 --> 01:08:25,280
вызывается ивент.

1185
01:08:25,280 --> 01:08:27,280
Ну, там, в новых версиях Solidity, на самом деле,

1186
01:08:27,280 --> 01:08:29,280
тут надо явно ключевое слово

1187
01:08:29,280 --> 01:08:31,280
emit писать.

1188
01:08:31,280 --> 01:08:33,280
Типа, произвести событие

1189
01:08:33,280 --> 01:08:35,280
withdraw.

1190
01:08:35,280 --> 01:08:37,280
То есть, вот этот чувак, msg sender,

1191
01:08:37,280 --> 01:08:39,280
адрес отправителя,

1192
01:08:39,280 --> 01:08:41,280
вывел столько-то

1193
01:08:41,280 --> 01:08:43,280
вот этих вот вадов. Ну, там, вывел

1194
01:08:43,280 --> 01:08:45,280
такое-то количество эфира, если все

1195
01:08:45,280 --> 01:08:47,280
хорошо, если здесь нигде ничего не упало.

1196
01:08:47,280 --> 01:08:49,280
Вот.

1197
01:08:49,280 --> 01:08:51,280
То тогда в этом логе появится

1198
01:08:51,280 --> 01:08:53,280
сообщение withdraw.

1199
01:08:53,280 --> 01:08:55,280
Withdraw, там, адрес,

1200
01:08:55,280 --> 01:08:57,280
там, не знаю, 100 токенов. Потом пришел другой

1201
01:08:57,280 --> 01:08:59,280
чувак, сделал, там, депозит,

1202
01:08:59,280 --> 01:09:01,280
там, A2, там, не знаю, там, 10.

1203
01:09:01,280 --> 01:09:03,280
И так далее, и так далее.

1204
01:09:03,280 --> 01:09:05,280
То есть это лог, который

1205
01:09:05,280 --> 01:09:07,280
привязан к контракту.

1206
01:09:07,280 --> 01:09:09,280
Вот здесь вот.

1207
01:09:09,280 --> 01:09:11,280
И, ну, в чем, как бы, его

1208
01:09:11,280 --> 01:09:13,280
важность? Во-первых, он

1209
01:09:13,280 --> 01:09:15,280
дешевый. Вот.

1210
01:09:15,280 --> 01:09:17,280
То есть он стоит дешевле, чем записать сюда

1211
01:09:17,280 --> 01:09:19,280
то, что вот, короче, вот этот чувак,

1212
01:09:19,280 --> 01:09:21,280
значит, положил 100 токенов, и это

1213
01:09:21,280 --> 01:09:23,280
его, там, депозит. Понятно, что здесь

1214
01:09:23,280 --> 01:09:25,280
значение, как бы, есть. Но

1215
01:09:25,280 --> 01:09:27,280
писать в лог, во-первых, дешевле. По газу,

1216
01:09:27,280 --> 01:09:29,280
там, 3000 плюс, там, количество

1217
01:09:29,280 --> 01:09:31,280
за каждый байт данных придется

1218
01:09:31,280 --> 01:09:33,280
заплатить. Во-вторых, из

1219
01:09:33,280 --> 01:09:35,280
контракта сходить в лог нельзя.

1220
01:09:35,280 --> 01:09:37,280
То есть контракт не может, как бы,

1221
01:09:37,280 --> 01:09:39,280
сходить и посмотреть, какие события произошли

1222
01:09:39,280 --> 01:09:41,280
вот в том контракте. Как бы, дай мне список,

1223
01:09:41,280 --> 01:09:43,280
там, ивентов, что-то отфильтровать. То есть

1224
01:09:43,280 --> 01:09:45,280
это такая, как бы, более, более тупое, как бы,

1225
01:09:45,280 --> 01:09:47,280
хранилище, которое просто сохраняет,

1226
01:09:47,280 --> 01:09:49,280
как бы, эти ивенты. Но они крайне удобные,

1227
01:09:49,280 --> 01:09:51,280
для клиентов.

1228
01:09:51,280 --> 01:09:53,280
То есть, когда я ходил вот сюда, там,

1229
01:09:53,280 --> 01:09:55,280
на компаунд,

1230
01:09:55,280 --> 01:09:57,280
на самом деле, когда я вам сказал, типа,

1231
01:09:57,280 --> 01:09:59,280
я подписался, типа, на

1232
01:09:59,280 --> 01:10:01,280
транзакцию, на самом деле,

1233
01:10:01,280 --> 01:10:03,280
чуть-чуть я схитрил, потому что

1234
01:10:03,280 --> 01:10:05,280
интерфейс подписался на

1235
01:10:05,280 --> 01:10:07,280
события, коллатер был

1236
01:10:07,280 --> 01:10:09,280
включен, или, там,

1237
01:10:09,280 --> 01:10:11,280
типа, деньги были положены. Как бы, он

1238
01:10:11,280 --> 01:10:13,280
подписался на вот это событие с

1239
01:10:13,280 --> 01:10:15,280
моим адресом. То есть, он подписался,

1240
01:10:15,280 --> 01:10:17,280
типа, и на попсабе висит

1241
01:10:17,280 --> 01:10:19,280
и ждет, когда произойдет

1242
01:10:19,280 --> 01:10:21,280
ивент, как бы, что

1243
01:10:21,280 --> 01:10:23,280
вот этот вот чувак, как бы, сделал

1244
01:10:23,280 --> 01:10:25,280
какой-то, там, не знаю, депозит.

1245
01:10:25,280 --> 01:10:27,280
И, соответственно, он висит, как бы,

1246
01:10:27,280 --> 01:10:29,280
с нодой общается, как бы, ждет, пока нода,

1247
01:10:29,280 --> 01:10:31,280
как бы, ему пришлет апдейт. Да, такое событие

1248
01:10:31,280 --> 01:10:33,280
произошло, вот этот ивент, как бы,

1249
01:10:33,280 --> 01:10:35,280
и, соответственно, можно, там, не знаю, извести

1250
01:10:35,280 --> 01:10:37,280
вот этот флажок. Поэтому

1251
01:10:37,280 --> 01:10:39,280
ивенты — это крайне важная штука

1252
01:10:39,280 --> 01:10:41,280
именно для, именно, взаимодействия

1253
01:10:41,280 --> 01:10:43,280
с блокчейном. Чем

1254
01:10:43,280 --> 01:10:45,280
еще они вам будут интересны,

1255
01:10:45,280 --> 01:10:47,280
как бы, эти ивенты? Это, если вы собираетесь

1256
01:10:47,280 --> 01:10:49,280
что-то там анализировать в блокчейне,

1257
01:10:49,280 --> 01:10:51,280
собирать, там, типа, не знаю,

1258
01:10:51,280 --> 01:10:53,280
инфу, короче, кто, какие,

1259
01:10:53,280 --> 01:10:55,280
там, какие были, там, не знаю, там,

1260
01:10:55,280 --> 01:10:57,280
сделки с этим токеном,

1261
01:10:57,280 --> 01:10:59,280
кто ходил, как бы, в этот контракт, кто, там,

1262
01:10:59,280 --> 01:11:01,280
не знаю, NFT-шки минтил и так далее.

1263
01:11:01,280 --> 01:11:03,280
То есть вы, когда, как бы, парсите,

1264
01:11:03,280 --> 01:11:05,280
парсите блокчейн, как бы,

1265
01:11:05,280 --> 01:11:07,280
вы бежите по блокам, из этого

1266
01:11:07,280 --> 01:11:09,280
блока получаете, по сути, пачку ивентов

1267
01:11:09,280 --> 01:11:11,280
и фильтруете

1268
01:11:11,280 --> 01:11:13,280
их.

1269
01:11:17,280 --> 01:11:19,280
И фильтруете их, соответственно, по адресу контракта,

1270
01:11:19,280 --> 01:11:21,280
по, там, по

1271
01:11:21,280 --> 01:11:23,280
топикам и так далее. Тоже чуть-чуть посмотрим

1272
01:11:23,280 --> 01:11:25,280
на этот код с вами, потому что

1273
01:11:25,280 --> 01:11:27,280
с этим, если вы займетесь блокчейном, вам тоже

1274
01:11:27,280 --> 01:11:29,280
придется работать.

1275
01:11:29,280 --> 01:11:31,280
Вот, ивенты — такой источник информации.

1276
01:11:31,280 --> 01:11:33,280
Так, поехали

1277
01:11:33,280 --> 01:11:35,280
дальше.

1278
01:11:35,280 --> 01:11:37,280
Тоже, что

1279
01:11:37,280 --> 01:11:39,280
очень важно, как бы, что один

1280
01:11:39,280 --> 01:11:41,280
контракт может вызывать другой

1281
01:11:41,280 --> 01:11:43,280
контракт. То есть у нас есть, как бы,

1282
01:11:43,280 --> 01:11:45,280
два контракта, AC-штрих

1283
01:11:45,280 --> 01:11:47,280
какой-нибудь, там, 0, там,

1284
01:11:47,280 --> 01:11:49,280
0 — неважно, у него тоже есть код.

1285
01:11:49,280 --> 01:11:51,280
Здесь есть специальный

1286
01:11:51,280 --> 01:11:53,280
апкод, специальная инструкция

1287
01:11:53,280 --> 01:11:55,280
call, которая,

1288
01:11:55,280 --> 01:11:57,280
как бы, может пойти

1289
01:11:57,280 --> 01:11:59,280
в другой контракт, исполнить там

1290
01:11:59,280 --> 01:12:01,280
функцию и, соответственно, вернуться обратно.

1291
01:12:01,280 --> 01:12:03,280
То есть,

1292
01:12:03,280 --> 01:12:05,280
опять же, когда вы

1293
01:12:05,280 --> 01:12:07,280
строите что-то серьезное,

1294
01:12:07,280 --> 01:12:09,280
то по большей части, как бы,

1295
01:12:09,280 --> 01:12:11,280
ваша система представляет не один

1296
01:12:11,280 --> 01:12:13,280
смарт-контракт, а много.

1297
01:12:13,280 --> 01:12:15,280
И они отвечают, как бы, за разные вещи.

1298
01:12:15,280 --> 01:12:17,280
То есть у вас есть какой-нибудь, там, базовый

1299
01:12:17,280 --> 01:12:19,280
контроллер,

1300
01:12:19,280 --> 01:12:21,280
здесь есть какой-нибудь, там,

1301
01:12:21,280 --> 01:12:23,280
пришел пользователь, делает какой-нибудь, там,

1302
01:12:23,280 --> 01:12:25,280
депозит, вносит вам 10

1303
01:12:25,280 --> 01:12:27,280
эфира.

1304
01:12:27,280 --> 01:12:29,280
На самом деле ваш контроллер, как бы, функцию

1305
01:12:29,280 --> 01:12:31,280
депозит, там,

1306
01:12:31,280 --> 01:12:33,280
исполняет, а 10 эфира

1307
01:12:33,280 --> 01:12:35,280
кладет на адрес

1308
01:12:35,280 --> 01:12:37,280
волта какого-нибудь, ну, то есть

1309
01:12:37,280 --> 01:12:39,280
такой, как бы, крепости, как бы, на которой,

1310
01:12:39,280 --> 01:12:41,280
как бы, хранится, там, не знаю, там, столько,

1311
01:12:41,280 --> 01:12:43,280
как бы, эфира от пользователей.

1312
01:12:43,280 --> 01:12:45,280
Контракт этот сильно простой, как бы, чтобы

1313
01:12:45,280 --> 01:12:47,280
его не ломанули, чтобы не утащили, как бы,

1314
01:12:47,280 --> 01:12:49,280
вот, весь эфир.

1315
01:12:49,280 --> 01:12:51,280
Затем, там, не знаю, там, следующий, там,

1316
01:12:51,280 --> 01:12:53,280
какой-нибудь контракт, в котором, там,

1317
01:12:53,280 --> 01:12:55,280
например, там, access,

1318
01:12:55,280 --> 01:12:57,280
access list,

1319
01:12:57,280 --> 01:12:59,280
там, кто, там, админы,

1320
01:12:59,280 --> 01:13:01,280
кто, там, команда,

1321
01:13:01,280 --> 01:13:03,280
кто привилегированный пользователь, там,

1322
01:13:03,280 --> 01:13:05,280
прописано, как бы, именно в этом контракте

1323
01:13:05,280 --> 01:13:07,280
его сториджи, и контроллер, как бы,

1324
01:13:07,280 --> 01:13:09,280
ходит сюда, типа, спрашивает, а вот этому

1325
01:13:09,280 --> 01:13:11,280
можно сделать, там, какое-то административное

1326
01:13:11,280 --> 01:13:13,280
действие, ну, в ответ, там,

1327
01:13:13,280 --> 01:13:15,280
тоже при помощи вот этого

1328
01:13:15,280 --> 01:13:17,280
кода и так далее.

1329
01:13:17,280 --> 01:13:19,280
То есть, все современные проекты

1330
01:13:19,280 --> 01:13:21,280
на, ну,

1331
01:13:21,280 --> 01:13:23,280
на эфире, как бы, представляют собой

1332
01:13:23,280 --> 01:13:25,280
целые пачки смарт-контрактов,

1333
01:13:25,280 --> 01:13:27,280
которые между собой

1334
01:13:27,280 --> 01:13:29,280
взаимодействуют. Давайте, там,

1335
01:13:29,280 --> 01:13:31,280
что-нибудь

1336
01:13:31,280 --> 01:13:33,280
посмотрим, там, мы будем

1337
01:13:33,280 --> 01:13:35,280
подробно смотреть,

1338
01:13:35,280 --> 01:13:37,280
ну, просто какую-нибудь репу.

1339
01:13:39,280 --> 01:13:41,280
Вот, собственно, как раз такая

1340
01:13:41,280 --> 01:13:43,280
достаточно простая, да, как бы,

1341
01:13:43,280 --> 01:13:45,280
репа, через которую, не знаю,

1342
01:13:45,280 --> 01:13:47,280
там, сотни миллиардов долларов прокачивается

1343
01:13:47,280 --> 01:13:49,280
вот, как бы, ее все контракты,

1344
01:13:49,280 --> 01:13:51,280
на самом деле, там, буквально, там,

1345
01:13:51,280 --> 01:13:53,280
раз-два, как бы, и плюну.

1346
01:13:53,280 --> 01:13:55,280
Один контракт, Factory,

1347
01:13:55,280 --> 01:13:57,280
который, кстати говоря, это Pattern Factory,

1348
01:13:57,280 --> 01:13:59,280
который в объектно-ориентированном программировании,

1349
01:13:59,280 --> 01:14:01,280
когда один объект, как бы, печатает

1350
01:14:01,280 --> 01:14:03,280
другие объекты однотипные,

1351
01:14:03,280 --> 01:14:05,280
вот этот вот Factory, как бы,

1352
01:14:05,280 --> 01:14:07,280
выкладывает в сеть, как бы,

1353
01:14:07,280 --> 01:14:09,280
по желанию пользователя контракты

1354
01:14:09,280 --> 01:14:11,280
V2Payer,

1355
01:14:11,280 --> 01:14:13,280
вот, ну, и там, соответственно,

1356
01:14:13,280 --> 01:14:15,280
там, при этом используется токен,

1357
01:14:15,280 --> 01:14:17,280
вот, то есть, смарт-контрактов у нас

1358
01:14:17,280 --> 01:14:19,280
на самом деле, всего-то, как бы,

1359
01:14:19,280 --> 01:14:21,280
в общем-то, ничего. И вот, если вы

1360
01:14:21,280 --> 01:14:23,280
посмотрите, да, кода здесь очень мало.

1361
01:14:23,280 --> 01:14:25,280
То есть, это вам

1362
01:14:25,280 --> 01:14:27,280
не backend, как бы,

1363
01:14:27,280 --> 01:14:29,280
здесь кода достаточно мало,

1364
01:14:29,280 --> 01:14:31,280
как бы, просто над каждой строчечкой

1365
01:14:31,280 --> 01:14:33,280
придется подумать чуть-чуть больше.

1366
01:14:33,280 --> 01:14:35,280
Вот.

1367
01:14:35,280 --> 01:14:37,280
Так.

1368
01:14:37,280 --> 01:14:39,280
Значит, это, что касается

1369
01:14:39,280 --> 01:14:41,280
смарт-контрактов. Ну, и

1370
01:14:41,280 --> 01:14:43,280
про Strictly Restricted by Execution Cost,

1371
01:14:43,280 --> 01:14:45,280
про это мы уже с вами

1372
01:14:45,280 --> 01:14:47,280
очень подробно в тот раз, как бы, поговорили.

1373
01:14:47,280 --> 01:14:49,280
Ни одна функция вот этого контракта,

1374
01:14:49,280 --> 01:14:51,280
этих контрактов, если мы вот здесь вот будем

1375
01:14:51,280 --> 01:14:53,280
смотреть,

1376
01:14:53,280 --> 01:14:55,280
вы здесь не найдете нигде,

1377
01:14:55,280 --> 01:14:57,280
например, циклов,

1378
01:14:57,280 --> 01:14:59,280
если эти циклы

1379
01:14:59,280 --> 01:15:01,280
не прям жестко, там, прибиты сверху,

1380
01:15:01,280 --> 01:15:03,280
там, чуть ли не константами.

1381
01:15:03,280 --> 01:15:05,280
То есть, там, не знаю, там,

1382
01:15:05,280 --> 01:15:07,280
for1, to, короче, не знаю, там,

1383
01:15:07,280 --> 01:15:09,280
максимум, там, десяток, как бы,

1384
01:15:09,280 --> 01:15:11,280
какой-нибудь, там, сущностей. То есть,

1385
01:15:11,280 --> 01:15:13,280
если вы посмотрите, они все прям линейные, линейные,

1386
01:15:13,280 --> 01:15:15,280
линейные эти функции,

1387
01:15:15,280 --> 01:15:17,280
максимально экономящие

1388
01:15:17,280 --> 01:15:19,280
место. Ну, то есть, например, там, в Uniswap'е

1389
01:15:19,280 --> 01:15:21,280
время

1390
01:15:21,280 --> 01:15:23,280
приводится к 32

1391
01:15:23,280 --> 01:15:25,280
битам просто для того, чтобы сэкономить,

1392
01:15:25,280 --> 01:15:27,280
как бы, 32 бита.

1393
01:15:27,280 --> 01:15:29,280
Таймстемп 64 бита,

1394
01:15:29,280 --> 01:15:31,280
как бы, а здесь, как бы, 32,

1395
01:15:31,280 --> 01:15:33,280
потому что надо пожать,

1396
01:15:33,280 --> 01:15:35,280
чтобы данные более эффективно

1397
01:15:35,280 --> 01:15:37,280
упаковались, там, в слоты. То есть, экономия

1398
01:15:37,280 --> 01:15:39,280
идет на таких, на спичках,

1399
01:15:39,280 --> 01:15:41,280
и ее здесь очень много.

1400
01:15:41,280 --> 01:15:43,280
Потому что

1401
01:15:43,280 --> 01:15:45,280
каждый раз, когда вы вот здесь вот, как бы,

1402
01:15:45,280 --> 01:15:47,280
пробуете что-то неоптимально,

1403
01:15:47,280 --> 01:15:49,280
то есть, вы запрограммировали, не знаю,

1404
01:15:49,280 --> 01:15:51,280
там, цикл, который жрет зря,

1405
01:15:51,280 --> 01:15:53,280
как бы, газ, вы какую-то функцию выполняете

1406
01:15:53,280 --> 01:15:55,280
больше, чем нужно,

1407
01:15:55,280 --> 01:15:57,280
больше, чем, там, один раз

1408
01:15:57,280 --> 01:15:59,280
за блок, платят за это ваши

1409
01:15:59,280 --> 01:16:01,280
пользователи. То есть, приходит

1410
01:16:01,280 --> 01:16:03,280
пользователь, отправляет транзакцию в

1411
01:16:03,280 --> 01:16:05,280
контракт, исполняет ваш код, как бы,

1412
01:16:05,280 --> 01:16:07,280
ваш код неоптимальный, как бы, и жрет,

1413
01:16:07,280 --> 01:16:09,280
там, 100 тысяч газа вместо, там,

1414
01:16:09,280 --> 01:16:11,280
60 тысяч газа, и пользователь платит

1415
01:16:11,280 --> 01:16:13,280
100 долларов вместо 60 долларов.

1416
01:16:13,280 --> 01:16:15,280
Именно поэтому,

1417
01:16:15,280 --> 01:16:17,280
собственно, и спрос, как бы, такой, с блок

1418
01:16:17,280 --> 01:16:19,280
чейн разработчиков очень серьезный

1419
01:16:19,280 --> 01:16:21,280
в плане, как бы, алгоритмов и структур данных.

1420
01:16:21,280 --> 01:16:23,280
То есть, если, как бы,

1421
01:16:23,280 --> 01:16:25,280
да, ну, как бы,

1422
01:16:25,280 --> 01:16:27,280
если ты, там, не знаю, там,

1423
01:16:27,280 --> 01:16:29,280
не понимаешь, как бы, там, сложности алгоритмов

1424
01:16:29,280 --> 01:16:31,280
или просто, как бы, там, не знаю, прям

1425
01:16:31,280 --> 01:16:33,280
в лобешник, как бы, решаешь, типа, задачу,

1426
01:16:33,280 --> 01:16:35,280
а, да, все, прям, запихали

1427
01:16:35,280 --> 01:16:37,280
в массив, пробежали, сортирнули,

1428
01:16:37,280 --> 01:16:39,280
как бы, и потом, и взяли, там,

1429
01:16:39,280 --> 01:16:41,280
верхнее число, то, в общем,

1430
01:16:41,280 --> 01:16:43,280
на солидите лучше, как бы, не идти программировать,

1431
01:16:43,280 --> 01:16:45,280
вот, потому что здесь, прям,

1432
01:16:45,280 --> 01:16:47,280
об этом надо думать на каждой строчке.

1433
01:16:47,280 --> 01:16:49,280
Это очень серьезно.

1434
01:16:49,280 --> 01:16:51,280
Вот. Активные

1435
01:16:51,280 --> 01:16:53,280
используются всякие, там, не знаю, там,

1436
01:16:53,280 --> 01:16:55,280
может быть, кэширование,

1437
01:16:55,280 --> 01:16:57,280
надо при этом, как бы, понимать,

1438
01:16:57,280 --> 01:16:59,280
какая транзакция,

1439
01:16:59,280 --> 01:17:01,280
куда, ну, какая пишет

1440
01:17:01,280 --> 01:17:03,280
сторч, какая пишет память,

1441
01:17:03,280 --> 01:17:05,280
какая потребляет, как бы, соответственно, сколько,

1442
01:17:05,280 --> 01:17:07,280
сколько газа, это, вот, довольно

1443
01:17:07,280 --> 01:17:09,280
серьезная история в солидите

1444
01:17:09,280 --> 01:17:11,280
разработке.

1445
01:17:13,280 --> 01:17:15,280
Дальше, что еще интересно,

1446
01:17:15,280 --> 01:17:17,280
как бы, такое рассказать про смарт-контрол,

1447
01:17:17,280 --> 01:17:19,280
про контракты, ну, в частности,

1448
01:17:19,280 --> 01:17:21,280
например,

1449
01:17:21,280 --> 01:17:23,280
здесь

1450
01:17:23,280 --> 01:17:25,280
различных хитрых математических

1451
01:17:25,280 --> 01:17:27,280
функций, их довольно-таки

1452
01:17:27,280 --> 01:17:29,280
мало, потому

1453
01:17:29,280 --> 01:17:31,280
что, как я сказал, как бы, все

1454
01:17:31,280 --> 01:17:33,280
операции, они

1455
01:17:33,280 --> 01:17:35,280
целочисленные, вот, и поэтому

1456
01:17:35,280 --> 01:17:37,280
практически с любой экзотикой,

1457
01:17:37,280 --> 01:17:39,280
которая у вас появится, например,

1458
01:17:39,280 --> 01:17:41,280
даже квадратный корень, как бы,

1459
01:17:41,280 --> 01:17:43,280
является экзотикой, как бы, вам придется

1460
01:17:43,280 --> 01:17:45,280
разбираться самостоятельно.

1461
01:17:45,280 --> 01:17:47,280
А из-за жестких требований,

1462
01:17:47,280 --> 01:17:49,280
там, к битности, к экономии,

1463
01:17:49,280 --> 01:17:51,280
зачастую

1464
01:17:51,280 --> 01:17:53,280
многие виды, как бы,

1465
01:17:53,280 --> 01:17:55,280
математики приходится

1466
01:17:55,280 --> 01:17:57,280
реализовывать самостоятельно.

1467
01:17:57,280 --> 01:17:59,280
Вот, например, здесь, как видите, как бы,

1468
01:17:59,280 --> 01:18:01,280
квадратный корень, квадратный корень,

1469
01:18:01,280 --> 01:18:03,280
как бы, сделан вручную.

1470
01:18:03,280 --> 01:18:05,280
Нету в солидите, нету, как бы,

1471
01:18:05,280 --> 01:18:07,280
апкода квадратный корень.

1472
01:18:07,280 --> 01:18:09,280
Вот, вам придется его, как бы, реализовать

1473
01:18:09,280 --> 01:18:11,280
самостоятельно, здесь этот вавилонский

1474
01:18:11,280 --> 01:18:13,280
метод используется. И то же самое

1475
01:18:13,280 --> 01:18:15,280
касается большинства математических

1476
01:18:15,280 --> 01:18:17,280
функций.

1477
01:18:17,280 --> 01:18:19,280
Собственно,

1478
01:18:19,280 --> 01:18:21,280
даже для, там, операций,

1479
01:18:21,280 --> 01:18:23,280
там, перемножения, как бы, балансов

1480
01:18:23,280 --> 01:18:25,280
здесь используется своя собственная

1481
01:18:25,280 --> 01:18:27,280
математика,

1482
01:18:27,280 --> 01:18:29,280
вот, для того, чтобы

1483
01:18:29,280 --> 01:18:31,280
это влазило. Почему здесь 100-112

1484
01:18:31,280 --> 01:18:33,280
бит, например, у них используется?

1485
01:18:33,280 --> 01:18:35,280
Чтобы 112 бит

1486
01:18:35,280 --> 01:18:37,280
умножить на 112 бит дало

1487
01:18:37,280 --> 01:18:39,280
224 бита,

1488
01:18:39,280 --> 01:18:41,280
и плюс к этим

1489
01:18:41,280 --> 01:18:43,280
224 битам добавить

1490
01:18:43,280 --> 01:18:45,280
еще 32 бита

1491
01:18:45,280 --> 01:18:47,280
вот того таймстемпа, вот этого времени,

1492
01:18:47,280 --> 01:18:49,280
которое было в пэре. И получится, как раз,

1493
01:18:49,280 --> 01:18:51,280
256 бит, который можно затолкать

1494
01:18:51,280 --> 01:18:53,280
в...

1495
01:18:53,280 --> 01:18:55,280
который можно затолкать ровно

1496
01:18:55,280 --> 01:18:57,280
в один слот

1497
01:18:57,280 --> 01:18:59,280
сториджа. Он, у него размер, как бы,

1498
01:18:59,280 --> 01:19:01,280
256 бит, и у него здесь будет, как бы,

1499
01:19:01,280 --> 01:19:03,280
один баланс, здесь будет второй баланс, а здесь

1500
01:19:03,280 --> 01:19:05,280
будет время. И получится, вот, ровно

1501
01:19:05,280 --> 01:19:07,280
256 бит. Это, вот, с точки зрения

1502
01:19:07,280 --> 01:19:09,280
потребления газа, крайне,

1503
01:19:09,280 --> 01:19:11,280
ну,

1504
01:19:11,280 --> 01:19:13,280
оптимально. Потому что пользователь платит

1505
01:19:13,280 --> 01:19:15,280
за каждый выделенный, вот,

1506
01:19:15,280 --> 01:19:17,280
этот вот слот, как бы, 256 бит.

1507
01:19:17,280 --> 01:19:19,280
То есть, с чего

1508
01:19:19,280 --> 01:19:21,280
я, как бы, вдруг приплевывал

1509
01:19:21,280 --> 01:19:23,280
операционные системы, как бы, к блокчейнам, да?

1510
01:19:23,280 --> 01:19:25,280
А потому что, вообще, как бы,

1511
01:19:25,280 --> 01:19:27,280
всякая, там, страничная

1512
01:19:27,280 --> 01:19:29,280
организация памяти, да, когда вам нужно

1513
01:19:29,280 --> 01:19:31,280
на одну переменную выделить 4 байта,

1514
01:19:31,280 --> 01:19:33,280
а операционка вам, на

1515
01:19:33,280 --> 01:19:35,280
самом деле, как бы, выделяет сразу целиком

1516
01:19:35,280 --> 01:19:37,280
страницу размером 4 килобайта,

1517
01:19:37,280 --> 01:19:39,280
да еще и делает это

1518
01:19:39,280 --> 01:19:41,280
лениво, то есть она отображает это на физическую

1519
01:19:41,280 --> 01:19:43,280
память, там, и там, и так

1520
01:19:43,280 --> 01:19:45,280
далее, соответственно, и

1521
01:19:45,280 --> 01:19:47,280
инициализирует ее только, когда вы

1522
01:19:47,280 --> 01:19:49,280
делаете запись в эту штуку. Вот понимание

1523
01:19:49,280 --> 01:19:51,280
этих механизмов, на самом деле, делает

1524
01:19:51,280 --> 01:19:53,280
понимание того, что здесь происходит

1525
01:19:53,280 --> 01:19:55,280
за смарт-контрактами, прям, очень простым.

1526
01:19:55,280 --> 01:19:57,280
То есть, потому что это все, в общем-то,

1527
01:19:57,280 --> 01:19:59,280
как бы, одно и то же, как бы, единственно

1528
01:19:59,280 --> 01:20:01,280
только, ну, сдобренное

1529
01:20:01,280 --> 01:20:03,280
key-value вот этими,

1530
01:20:03,280 --> 01:20:05,280
как бы, хэшами.

1531
01:20:05,280 --> 01:20:07,280
Вот. Так.

1532
01:20:07,280 --> 01:20:09,280
Теперь, значит,

1533
01:20:09,280 --> 01:20:11,280
про

1534
01:20:11,280 --> 01:20:13,280
ограничения, getter и setter,

1535
01:20:13,280 --> 01:20:15,280
значит,

1536
01:20:15,280 --> 01:20:17,280
вызовы контрактов, контракты

1537
01:20:17,280 --> 01:20:19,280
мы прям будем тоже очень подробно смотреть.

1538
01:20:19,280 --> 01:20:21,280
Здесь очень много всяких, как бы, нюансов

1539
01:20:21,280 --> 01:20:23,280
есть. Вот.

1540
01:20:23,280 --> 01:20:25,280
Теперь чуть-чуть

1541
01:20:25,280 --> 01:20:27,280
продолжим, как бы, про газ.

1542
01:20:27,280 --> 01:20:29,280
Я уже вам в тот раз, как бы, рассказал

1543
01:20:29,280 --> 01:20:31,280
про то, что каждая инструкция стоит, там,

1544
01:20:31,280 --> 01:20:33,280
сколько-то денег. Вот.

1545
01:20:33,280 --> 01:20:35,280
Соответственно,

1546
01:20:35,280 --> 01:20:37,280
вот мы поговорили про газ.

1547
01:20:37,280 --> 01:20:39,280
И

1548
01:20:39,280 --> 01:20:41,280
теперь чуть-чуть поглубже, соответственно,

1549
01:20:41,280 --> 01:20:43,280
что внутри, под капотом у этих

1550
01:20:43,280 --> 01:20:45,280
смарт-контрактов происходит и как работает

1551
01:20:45,280 --> 01:20:47,280
EVM. То есть это вот сейчас, наверное,

1552
01:20:47,280 --> 01:20:49,280
там,

1553
01:20:49,280 --> 01:20:51,280
основная история.

1554
01:20:51,280 --> 01:20:53,280
Значит, как я говорил,

1555
01:20:53,280 --> 01:20:55,280
EVM — это, по сути,

1556
01:20:55,280 --> 01:20:57,280
микроконтроллер, можно сказать.

1557
01:20:57,280 --> 01:20:59,280
Те, кто у вас, как бы, такой, как бы, виртуальный

1558
01:20:59,280 --> 01:21:01,280
процессор, просто сделан, как бы, в софте.

1559
01:21:01,280 --> 01:21:03,280
Вот. Там в софте есть объект,

1560
01:21:03,280 --> 01:21:05,280
как бы, у которого есть, как бы, свой

1561
01:21:05,280 --> 01:21:07,280
собственный, там, storage, у которого есть собственный,

1562
01:21:07,280 --> 01:21:09,280
там, не знаю, там, код.

1563
01:21:09,280 --> 01:21:11,280
Кстати,

1564
01:21:11,280 --> 01:21:13,280
на микроконтроллерах или ассемблере

1565
01:21:13,280 --> 01:21:15,280
многие писали, тоже, кстати,

1566
01:21:15,280 --> 01:21:17,280
интересный вопрос.

1567
01:21:17,280 --> 01:21:19,280
Ну, на ассемблере писали,

1568
01:21:19,280 --> 01:21:21,280
на курсе C++.

1569
01:21:21,280 --> 01:21:23,280
Ага.

1570
01:21:23,280 --> 01:21:25,280
Ну, это, кстати,

1571
01:21:25,280 --> 01:21:27,280
кстати, вот тот случай, да,

1572
01:21:27,280 --> 01:21:29,280
когда, вот, кажется, да, в институте, что

1573
01:21:29,280 --> 01:21:31,280
и когда мне это, блин,

1574
01:21:31,280 --> 01:21:33,280
пригодится, я

1575
01:21:33,280 --> 01:21:35,280
тут эти самые сайты на Django делаю,

1576
01:21:35,280 --> 01:21:37,280
как бы, а вы какой-то микроконтроллер,

1577
01:21:37,280 --> 01:21:39,280
какие-то ассемблеры, хрен его знает, куда это мне надо.

1578
01:21:39,280 --> 01:21:41,280
Здесь это довольно

1579
01:21:41,280 --> 01:21:43,280
важная история в блокчейнах,

1580
01:21:43,280 --> 01:21:45,280
как бы, причем, кстати,

1581
01:21:45,280 --> 01:21:47,280
реально во всех. То есть это достаточно

1582
01:21:47,280 --> 01:21:49,280
полезные знания, вот,

1583
01:21:49,280 --> 01:21:51,280
того, как работает, как работает, собственно,

1584
01:21:51,280 --> 01:21:53,280
сам микропроцессор, потому что именно так

1585
01:21:53,280 --> 01:21:55,280
работает виртуальная машина.

1586
01:21:55,280 --> 01:21:57,280
Даже при изучении C++

1587
01:21:57,280 --> 01:21:59,280
полезно, чтобы понимать, когда

1588
01:21:59,280 --> 01:22:01,280
компилируется, как.

1589
01:22:01,280 --> 01:22:03,280
Да, да, да, да, именно, как выделяется память,

1590
01:22:03,280 --> 01:22:05,280
там, и так далее. Ну, я могу сказать,

1591
01:22:05,280 --> 01:22:07,280
по моему, как бы, рабочему опыту,

1592
01:22:07,280 --> 01:22:09,280
даже если вот эти теоретические знания

1593
01:22:09,280 --> 01:22:11,280
из института о низком уровне, там,

1594
01:22:11,280 --> 01:22:13,280
всякие, там, параллельные программирования,

1595
01:22:13,280 --> 01:22:15,280
архитектуры, там, систем, там, и так далее.

1596
01:22:15,280 --> 01:22:17,280
То есть, если они, как бы, по жизни

1597
01:22:17,280 --> 01:22:19,280
и не пригождались, да, там, суперкомпьютеры,

1598
01:22:19,280 --> 01:22:21,280
там, я не программировал, да, как бы,

1599
01:22:21,280 --> 01:22:23,280
и, там, микроконтроллеры для роботов,

1600
01:22:23,280 --> 01:22:25,280
то, когда ты начинаешь решать

1601
01:22:25,280 --> 01:22:27,280
проблемы, например, в какой-то сложной

1602
01:22:27,280 --> 01:22:29,280
системе, там, высоко нагруженной,

1603
01:22:29,280 --> 01:22:31,280
там, не знаю, предположим,

1604
01:22:31,280 --> 01:22:33,280
предполагаешь, почему, как бы, вот, на этой

1605
01:22:33,280 --> 01:22:35,280
системе вдруг процессор, как бы, начал

1606
01:22:35,280 --> 01:22:37,280
прям, как ни в коня, жрать.

1607
01:22:37,280 --> 01:22:39,280
Или, там, почему память утекла, и так далее.

1608
01:22:39,280 --> 01:22:41,280
То тут, как раз, эти знания здорово

1609
01:22:41,280 --> 01:22:43,280
помогают. Потому что ты вспоминаешь,

1610
01:22:43,280 --> 01:22:45,280
а, блин, мы же здесь вот добавили, как бы,

1611
01:22:45,280 --> 01:22:47,280
вот, вычисления, такое, как бы,

1612
01:22:47,280 --> 01:22:49,280
блин, и, может быть, не оптимально, как бы,

1613
01:22:49,280 --> 01:22:51,280
оно жрет процессор, как бы, по ходу дела в нем.

1614
01:22:51,280 --> 01:22:53,280
Вот. То есть, оно помогает, на самом деле,

1615
01:22:53,280 --> 01:22:55,280
копать и находить проблемы.

1616
01:22:55,280 --> 01:22:57,280
Вот.

1617
01:22:57,280 --> 01:22:59,280
Ну, и тоже, как,

1618
01:22:59,280 --> 01:23:01,280
так, в качестве философского, как бы,

1619
01:23:01,280 --> 01:23:03,280
напутствия, да, как бы,

1620
01:23:03,280 --> 01:23:05,280
написать систему, которая работает, несложно.

1621
01:23:05,280 --> 01:23:07,280
Вот. Но,

1622
01:23:07,280 --> 01:23:09,280
как бы, в тот момент, когда начнутся

1623
01:23:09,280 --> 01:23:11,280
проблемы, когда эта система, как бы, подойдет,

1624
01:23:11,280 --> 01:23:13,280
как бы, к пику своих

1625
01:23:13,280 --> 01:23:15,280
возможностей на текущих машинах,

1626
01:23:15,280 --> 01:23:17,280
то есть, когда перестанет хватать сервировка, да,

1627
01:23:17,280 --> 01:23:19,280
они станут, как бы, уходить, там,

1628
01:23:19,280 --> 01:23:21,280
в 100%, когда начнутся проблемы,

1629
01:23:21,280 --> 01:23:23,280
вот, с производительностью, вот, в этот момент,

1630
01:23:23,280 --> 01:23:25,280
как бы, прям, вот это

1631
01:23:25,280 --> 01:23:27,280
непонимание низкоуровневых

1632
01:23:27,280 --> 01:23:29,280
механизмов, оно прям вернется

1633
01:23:29,280 --> 01:23:31,280
сразу же, как бы, сторицей, потому что

1634
01:23:31,280 --> 01:23:33,280
придется очень долго, как бы, колупаться,

1635
01:23:33,280 --> 01:23:35,280
что там упало, почему, как бы,

1636
01:23:35,280 --> 01:23:37,280
что мы там такого сделали, как бы,

1637
01:23:37,280 --> 01:23:39,280
и так далее. То есть, вот это вот

1638
01:23:39,280 --> 01:23:41,280
эффективная утилизация, как бы, железа

1639
01:23:41,280 --> 01:23:43,280
штука важная. И если вы собираетесь

1640
01:23:43,280 --> 01:23:45,280
в крупную компанию, как бы, идти,

1641
01:23:45,280 --> 01:23:47,280
то там, возможно, как бы,

1642
01:23:47,280 --> 01:23:49,280
оптимизация пары строчек

1643
01:23:49,280 --> 01:23:51,280
кода может спасти компании, там, не знаю,

1644
01:23:51,280 --> 01:23:53,280
миллион долларов в месяц, спокойно,

1645
01:23:53,280 --> 01:23:55,280
на серверах, просто потому что они перестанут,

1646
01:23:55,280 --> 01:23:57,280
их не нужно будет такого количества.

1647
01:23:57,280 --> 01:23:59,280
Так что это важно.

1648
01:23:59,280 --> 01:24:01,280
Вот. Значит,

1649
01:24:01,280 --> 01:24:03,280
итак, EVM у нас представляет

1650
01:24:03,280 --> 01:24:05,280
собой такой, как бы, процессор,

1651
01:24:05,280 --> 01:24:07,280
мы бежим, как бы, по инструкциям,

1652
01:24:07,280 --> 01:24:09,280
у него есть

1653
01:24:09,280 --> 01:24:11,280
instruction pointer,

1654
01:24:11,280 --> 01:24:13,280
который говорит, на какой я сейчас

1655
01:24:13,280 --> 01:24:15,280
инструкции нахожусь,

1656
01:24:15,280 --> 01:24:17,280
у него есть, соответственно, память,

1657
01:24:17,280 --> 01:24:19,280
если эта инструкция делает какой-нибудь

1658
01:24:19,280 --> 01:24:21,280
M-load, там, не знаю, там,

1659
01:24:21,280 --> 01:24:23,280
загружать какие-то данные с памяти,

1660
01:24:23,280 --> 01:24:25,280
то процессор, как бы, сходит по вот этому адресу

1661
01:24:25,280 --> 01:24:27,280
в оперативную память, возьмет данные,

1662
01:24:27,280 --> 01:24:29,280
загрузит их куда-то там

1663
01:24:29,280 --> 01:24:31,280
в регистр, у него есть

1664
01:24:31,280 --> 01:24:33,280
stack,

1665
01:24:33,280 --> 01:24:35,280
ну, вот это, соответственно, memory называется,

1666
01:24:35,280 --> 01:24:37,280
у него есть обязательно stack,

1667
01:24:37,280 --> 01:24:39,280
значит,

1668
01:24:39,280 --> 01:24:41,280
как stack работает, тоже, как бы, надо знать,

1669
01:24:41,280 --> 01:24:43,280
да, всякие, надеюсь, как бы, все знают,

1670
01:24:43,280 --> 01:24:45,280
это push-pop,

1671
01:24:45,280 --> 01:24:47,280
да, то есть положили на stack что-то,

1672
01:24:47,280 --> 01:24:49,280
оно, как бы, попало вот сюда,

1673
01:24:49,280 --> 01:24:51,280
мы сделали push,

1674
01:24:51,280 --> 01:24:53,280
и stack pointer,

1675
01:24:53,280 --> 01:24:55,280
то есть указательно переместился

1676
01:24:55,280 --> 01:24:57,280
вверх, как бы, еще сделали

1677
01:24:57,280 --> 01:24:59,280
push, как бы, он еще вверх поместился,

1678
01:24:59,280 --> 01:25:01,280
сделали pop, как бы, мы

1679
01:25:01,280 --> 01:25:03,280
вернулись вниз, как бы, про вот эти вот забыли

1680
01:25:03,280 --> 01:25:05,280
данные.

1681
01:25:05,280 --> 01:25:07,280
Чем stack, как бы, удобен, да, тем, что

1682
01:25:07,280 --> 01:25:09,280
для того, чтобы, как бы, следить за stack-ом, нам

1683
01:25:09,280 --> 01:25:11,280
достаточно хранить одно число, вот это вот,

1684
01:25:11,280 --> 01:25:13,280
stack pointer, и все, как бы,

1685
01:25:13,280 --> 01:25:15,280
то есть и тогда у нас вот эти все push и pop

1686
01:25:15,280 --> 01:25:17,280
как бы прекрасно работают.

1687
01:25:17,280 --> 01:25:19,280
Соответственно, она

1688
01:25:19,280 --> 01:25:21,280
бежит по инструкциям последовательно,

1689
01:25:21,280 --> 01:25:23,280
исполняет, как бы, каждую инструкцию,

1690
01:25:23,280 --> 01:25:25,280
вот, и, как бы,

1691
01:25:25,280 --> 01:25:27,280
до тех пор, пока, как бы, не наткнется,

1692
01:25:27,280 --> 01:25:29,280
типа, на все там, типа, окей, я

1693
01:25:29,280 --> 01:25:31,280
закончила.

1694
01:25:31,280 --> 01:25:33,280
При этом, как мы с вами в тот раз, как бы,

1695
01:25:33,280 --> 01:25:35,280
выяснили, она каждый раз добавляет

1696
01:25:35,280 --> 01:25:37,280
сколько было

1697
01:25:37,280 --> 01:25:39,280
потрачено на данную инструкцию

1698
01:25:39,280 --> 01:25:41,280
газа, то есть у нас

1699
01:25:41,280 --> 01:25:43,280
есть специальные, как бы, цены, как бы,

1700
01:25:43,280 --> 01:25:45,280
на вот этот вот газ,

1701
01:25:45,280 --> 01:25:47,280
вот, и если

1702
01:25:47,280 --> 01:25:49,280
этот газ, газ,

1703
01:25:49,280 --> 01:25:51,280
газ,

1704
01:25:51,280 --> 01:25:53,280
становится больше определенного лимита,

1705
01:25:53,280 --> 01:25:55,280
какого-то там серьезного, не знаю, там,

1706
01:25:55,280 --> 01:25:57,280
10 миллионов газа, например, там,

1707
01:25:57,280 --> 01:25:59,280
то делается реверт,

1708
01:26:01,280 --> 01:26:03,280
то есть все откатывается,

1709
01:26:03,280 --> 01:26:05,280
и, как бы,

1710
01:26:05,280 --> 01:26:07,280
транзакция падает с

1711
01:26:07,280 --> 01:26:09,280
сообщением out of gas, но при этом

1712
01:26:09,280 --> 01:26:11,280
включается в блок, как бы, и вам придется,

1713
01:26:11,280 --> 01:26:13,280
как бы, заплатить за это. Лимит

1714
01:26:13,280 --> 01:26:15,280
этот указывает пользователь, то есть вы

1715
01:26:15,280 --> 01:26:17,280
в своей транзакции говорите, я готов

1716
01:26:17,280 --> 01:26:19,280
потратить не больше, чем там

1717
01:26:19,280 --> 01:26:21,280
100, чем 100 тысяч газа,

1718
01:26:21,280 --> 01:26:23,280
как бы, то есть это, в принципе, на совести

1719
01:26:23,280 --> 01:26:25,280
пользователя.

1720
01:26:25,280 --> 01:26:27,280
Вот. Чисто технически, если я укажу

1721
01:26:27,280 --> 01:26:29,280
бесконечный лимит, ну, у меня программа, как бы,

1722
01:26:29,280 --> 01:26:31,280
будет крутиться, пока не доберется

1723
01:26:31,280 --> 01:26:33,280
до, так называемого, hard, hard

1724
01:26:33,280 --> 01:26:35,280
лимита. Значит,

1725
01:26:35,280 --> 01:26:37,280
как это все дело выглядит?

1726
01:26:37,280 --> 01:26:39,280
Вообще, если мы будем строить

1727
01:26:39,280 --> 01:26:41,280
блокчейны, да, и нам нужна

1728
01:26:41,280 --> 01:26:43,280
будет вот именно вот эта вот механика,

1729
01:26:43,280 --> 01:26:45,280
она во всех блокчейнах на самом деле

1730
01:26:45,280 --> 01:26:47,280
присутствует, то есть где-то там по-другому

1731
01:26:47,280 --> 01:26:49,280
чуть-чуть считается, как бы, вот эти вот

1732
01:26:49,280 --> 01:26:51,280
попугаи, то есть сколько вы потратили

1733
01:26:51,280 --> 01:26:53,280
вычислительных ресурсов, но там, где они считаются,

1734
01:26:53,280 --> 01:26:55,280
как бы, это не блокчейны.

1735
01:26:55,280 --> 01:26:57,280
Вот. Блокчейны, как раз, только там,

1736
01:26:57,280 --> 01:26:59,280
где это считается, как бы,

1737
01:26:59,280 --> 01:27:01,280
и смарт-контракты.

1738
01:27:01,280 --> 01:27:03,280
Мы бежим. В принципе, можно построить

1739
01:27:03,280 --> 01:27:05,280
несколькими способами. Значит,

1740
01:27:05,280 --> 01:27:07,280
первое — это написать свою собственную

1741
01:27:07,280 --> 01:27:09,280
виртуальную машину, что и сделал Эфир.

1742
01:27:09,280 --> 01:27:11,280
Они написали, как бы, EVM, вот здесь

1743
01:27:11,280 --> 01:27:13,280
всякие, можно даже посмотреть примеры

1744
01:27:13,280 --> 01:27:15,280
инструкций,

1745
01:27:15,280 --> 01:27:17,280
там, не знаю, там, проверка является

1746
01:27:17,280 --> 01:27:19,280
то, что она лежит на стейке нулем.

1747
01:27:19,280 --> 01:27:21,280
Затем, если является,

1748
01:27:21,280 --> 01:27:23,280
то условный переход, там, туда-то,

1749
01:27:23,280 --> 01:27:25,280
туда-то, вот на вот это вот AE,

1750
01:27:25,280 --> 01:27:27,280
значит, куда-то.

1751
01:27:27,280 --> 01:27:29,280
— Какой уровень выполняет стэк?

1752
01:27:29,280 --> 01:27:31,280
Это стэковые машины?

1753
01:27:31,280 --> 01:27:33,280
— Да.

1754
01:27:33,280 --> 01:27:35,280
Вот. Я

1755
01:27:35,280 --> 01:27:37,280
прям про стэк сейчас,

1756
01:27:37,280 --> 01:27:39,280
ну, я сейчас прям подробно расскажу.

1757
01:27:39,280 --> 01:27:41,280
Потому что здесь есть

1758
01:27:41,280 --> 01:27:43,280
серьезные отличия.

1759
01:27:43,280 --> 01:27:45,280
Это значит написать свою

1760
01:27:45,280 --> 01:27:47,280
виртуальную машину. Второй

1761
01:27:47,280 --> 01:27:49,280
подход, как бы, который, на самом деле,

1762
01:27:49,280 --> 01:27:51,280
к которому идет прям очень широкая работа,

1763
01:27:51,280 --> 01:27:53,280
как бы, — это использовать WebAssembly.

1764
01:27:53,280 --> 01:27:55,280
WebAssembly — это

1765
01:27:55,280 --> 01:27:57,280
наш новый с вами, короче,

1766
01:27:57,280 --> 01:27:59,280
JavaScript,

1767
01:27:59,280 --> 01:28:01,280
такой, когда у вас есть браузер,

1768
01:28:01,280 --> 01:28:03,280
и вам здесь надо, там, 3D-модель нарисовать,

1769
01:28:03,280 --> 01:28:05,280
как бы, и крутить ее, и сделать это на

1770
01:28:05,280 --> 01:28:07,280
JS, как бы. Вы когда попробуете

1771
01:28:07,280 --> 01:28:09,280
сделать на JS, как бы, вы офигеете,

1772
01:28:09,280 --> 01:28:11,280
как бы, какая у вас будет производительность,

1773
01:28:11,280 --> 01:28:13,280
вряд ли у вас это получится.

1774
01:28:13,280 --> 01:28:15,280
И для этого появился стандарт

1775
01:28:15,280 --> 01:28:17,280
WebAssembly, который позволяет вам

1776
01:28:17,280 --> 01:28:19,280
написать программу, как бы, на

1777
01:28:19,280 --> 01:28:21,280
таком ассемблере. Вот он

1778
01:28:21,280 --> 01:28:23,280
вот так вот приблизительно выглядит.

1779
01:28:23,280 --> 01:28:25,280
И просто

1780
01:28:25,280 --> 01:28:27,280
прямо на JS-кой странице, типа,

1781
01:28:27,280 --> 01:28:29,280
сказать, там, JS, там, не знаю, там,

1782
01:28:29,280 --> 01:28:31,280
compile, там, что-нибудь там,

1783
01:28:31,280 --> 01:28:33,280
JS, там, .exec, вот этот вот

1784
01:28:33,280 --> 01:28:35,280
ассемблерный код. И в браузер

1785
01:28:35,280 --> 01:28:37,280
встроена виртуальная машина,

1786
01:28:37,280 --> 01:28:39,280
которая исполняет вот этот WASM,

1787
01:28:39,280 --> 01:28:41,280
и она делает это, там, в тысячу раз быстрее,

1788
01:28:41,280 --> 01:28:43,280
чем это делать на QNAME или каким-нибудь

1789
01:28:43,280 --> 01:28:45,280
при помощи JS-а.

1790
01:28:45,280 --> 01:28:47,280
Пробрасывает прямо в процессор инструкции,

1791
01:28:47,280 --> 01:28:49,280
там, и так далее. То есть

1792
01:28:49,280 --> 01:28:51,280
эта штука в тысячу раз быстрее, чем

1793
01:28:51,280 --> 01:28:53,280
такой, как бы,

1794
01:28:53,280 --> 01:28:55,280
JavaScript на стероидах, как бы,

1795
01:28:55,280 --> 01:28:57,280
ассемблерный. Тоже очень

1796
01:28:57,280 --> 01:28:59,280
популярная, как бы, штука.

1797
01:28:59,280 --> 01:29:01,280
И, конечно, хотелось бы, да,

1798
01:29:01,280 --> 01:29:03,280
писать смарт-контракты именно

1799
01:29:03,280 --> 01:29:05,280
на WebAssembly. Тем более, как бы,

1800
01:29:05,280 --> 01:29:07,280
WebAssembly

1801
01:29:07,280 --> 01:29:09,280
у него есть компиляторы,

1802
01:29:09,280 --> 01:29:11,280
компиляторы, которые

1803
01:29:11,280 --> 01:29:13,280
компилируют вот этот вот WASM

1804
01:29:13,280 --> 01:29:15,280
в WebAssembly

1805
01:29:15,280 --> 01:29:17,280
прямо там, ну, что хотите, хотите, там,

1806
01:29:17,280 --> 01:29:19,280
Python, JS, короче говоря,

1807
01:29:19,280 --> 01:29:21,280
там, Rust,

1808
01:29:21,280 --> 01:29:23,280
и так далее, там, не знаю, там, C,

1809
01:29:23,280 --> 01:29:25,280
C++. Все это, как бы, можно просто

1810
01:29:25,280 --> 01:29:27,280
компилировать именно как раз

1811
01:29:27,280 --> 01:29:29,280
в WebAssembly, и он будет исполняться в браузере

1812
01:29:29,280 --> 01:29:31,280
со всеми

1813
01:29:31,280 --> 01:29:33,280
штуками. Но у нас, конечно,

1814
01:29:33,280 --> 01:29:35,280
на WebAssembly в блокчейнах,

1815
01:29:37,280 --> 01:29:39,280
как я говорил, как бы, накладываются

1816
01:29:39,280 --> 01:29:41,280
требования по детерминизму,

1817
01:29:41,280 --> 01:29:43,280
поэтому у вас вот этот WebAssembly

1818
01:29:43,280 --> 01:29:45,280
в чистом виде, вот как в WebStore

1819
01:29:45,280 --> 01:29:47,280
стандарт, как бы, он не используется

1820
01:29:47,280 --> 01:29:49,280
в блокчейнах, потому что у него внутри

1821
01:29:49,280 --> 01:29:51,280
здесь может быть, как бы, какой-то рандом,

1822
01:29:51,280 --> 01:29:53,280
у него там есть

1823
01:29:53,280 --> 01:29:55,280
получение текущего времени

1824
01:29:55,280 --> 01:29:57,280
внутри этого WebAssembly, там, у него есть,

1825
01:29:57,280 --> 01:29:59,280
короче говоря, FPU

1826
01:29:59,280 --> 01:30:01,280
инструкции, и они все, как бы, ломают

1827
01:30:01,280 --> 01:30:03,280
детерминизм, вот. Поэтому

1828
01:30:03,280 --> 01:30:05,280
там, где WebAssembly используется,

1829
01:30:05,280 --> 01:30:07,280
в частности, там, в Polkadot

1830
01:30:07,280 --> 01:30:09,280
используются вот эти

1831
01:30:09,280 --> 01:30:11,280
смарт-контракты на WebAssembly в EOS,

1832
01:30:11,280 --> 01:30:13,280
еще там, на самом деле,

1833
01:30:13,280 --> 01:30:15,280
в кучу языков, да и эфир, в общем-то,

1834
01:30:15,280 --> 01:30:17,280
тоже, как бы, у него есть там

1835
01:30:17,280 --> 01:30:19,280
EIP и там стандарты

1836
01:30:19,280 --> 01:30:21,280
и подход к снаряду, они тоже,

1837
01:30:21,280 --> 01:30:23,280
как бы, хотели переезжать на WebAssembly,

1838
01:30:23,280 --> 01:30:25,280
вот, пока, как бы,

1839
01:30:25,280 --> 01:30:27,280
не переехали там, просто WebAssembly

1840
01:30:27,280 --> 01:30:29,280
в этой виртуальной машине, вот это

1841
01:30:29,280 --> 01:30:31,280
выпиливается и остается,

1842
01:30:31,280 --> 01:30:33,280
как бы, голый WebAssembly,

1843
01:30:33,280 --> 01:30:35,280
ну, такой, как бы,

1844
01:30:35,280 --> 01:30:37,280
детерминированный, вот. С ним

1845
01:30:37,280 --> 01:30:39,280
уже, там, соответственно, можно работать.

1846
01:30:39,280 --> 01:30:41,280
Ну, еще, в принципе,

1847
01:30:41,280 --> 01:30:43,280
один из кандидатов, как бы, это

1848
01:30:43,280 --> 01:30:45,280
и Яловский, и, там,

1849
01:30:45,280 --> 01:30:47,280
C-Sharp, короче, Bytecode,

1850
01:30:47,280 --> 01:30:49,280
вот такой, ну, как бы, чем не виртуальная машина

1851
01:30:49,280 --> 01:30:51,280
софтовая, как бы, в теории, как бы, тоже

1852
01:30:51,280 --> 01:30:53,280
можно использовать, но

1853
01:30:53,280 --> 01:30:55,280
тоже придется, как бы, поколдовать детерминизм,

1854
01:30:55,280 --> 01:30:57,280
чтобы ничего вот этого, как бы, не было.

1855
01:30:57,280 --> 01:30:59,280
Вот.

1856
01:30:59,280 --> 01:31:01,280
Ну, вот, часто бывает, что, как бы,

1857
01:31:01,280 --> 01:31:03,280
пишут блокчейны,

1858
01:31:03,280 --> 01:31:05,280
типа, у нас есть смарт-контракты, но они заботятся

1859
01:31:05,280 --> 01:31:07,280
о вот этом детерминизме, поэтому,

1860
01:31:07,280 --> 01:31:09,280
как бы, да, имейте в виду, в эту ловушку

1861
01:31:09,280 --> 01:31:11,280
не попадаете, там, просто не понимают,

1862
01:31:11,280 --> 01:31:13,280
как бы, люди.

1863
01:31:13,280 --> 01:31:15,280
Вот. Значит,

1864
01:31:15,280 --> 01:31:17,280
по поводу stack-based

1865
01:31:17,280 --> 01:31:19,280
машины. Значит, что, значит, вообще

1866
01:31:19,280 --> 01:31:21,280
stack-based,

1867
01:31:21,280 --> 01:31:23,280
stack-based

1868
01:31:23,280 --> 01:31:25,280
и register-based?

1869
01:31:25,280 --> 01:31:27,280
Мне кажется,

1870
01:31:27,280 --> 01:31:29,280
все знают, что это такая машина.

1871
01:31:29,280 --> 01:31:31,280
Ну,

1872
01:31:31,280 --> 01:31:33,280
не знаю, вот, не уверен,

1873
01:31:33,280 --> 01:31:35,280
если кто-то, как бы, на ASME, как бы, не писал.

1874
01:31:35,280 --> 01:31:37,280
Посмотрите, у меня есть какая-то

1875
01:31:37,280 --> 01:31:39,280
функция, которая принимает, как бы, два

1876
01:31:39,280 --> 01:31:41,280
аргумента, значит, она что-нибудь, там, делает

1877
01:31:41,280 --> 01:31:43,280
A плюс B, короче, возвращает,

1878
01:31:43,280 --> 01:31:45,280
там, типа, делает return,

1879
01:31:45,280 --> 01:31:47,280
return

1880
01:31:47,280 --> 01:31:49,280
A плюс B.

1881
01:31:49,280 --> 01:31:51,280
Вот. Такая. Я ее,

1882
01:31:51,280 --> 01:31:53,280
соответственно, в ASME пишу.

1883
01:31:53,280 --> 01:31:55,280
Вот.

1884
01:31:55,280 --> 01:31:57,280
И, значит, как

1885
01:31:57,280 --> 01:31:59,280
выглядит стековая машина? У меня есть

1886
01:31:59,280 --> 01:32:01,280
stack.

1887
01:32:01,280 --> 01:32:03,280
И,

1888
01:32:03,280 --> 01:32:05,280
как бы, вот эти слова stack и register,

1889
01:32:05,280 --> 01:32:07,280
на самом деле, ну, прям можно

1890
01:32:07,280 --> 01:32:09,280
воспринимать, как парадигма

1891
01:32:09,280 --> 01:32:11,280
передачи параметров функций. То есть,

1892
01:32:11,280 --> 01:32:13,280
каким образом функция получает свои

1893
01:32:13,280 --> 01:32:15,280
параметры. В стековой машине,

1894
01:32:15,280 --> 01:32:17,280
как бы, вот этот код вызову этой функции,

1895
01:32:17,280 --> 01:32:19,280
когда я сделаю, там,

1896
01:32:19,280 --> 01:32:21,280
F от 3 и 5,

1897
01:32:21,280 --> 01:32:23,280
вызову, как бы, ее,

1898
01:32:23,280 --> 01:32:25,280
то мне

1899
01:32:25,280 --> 01:32:27,280
компилятор создал следующий

1900
01:32:27,280 --> 01:32:29,280
код. Он сделает push

1901
01:32:29,280 --> 01:32:31,280
5, там, push

1902
01:32:31,280 --> 01:32:33,280
3 или push 3

1903
01:32:33,280 --> 01:32:35,280
push 5, как бы, там, по-разному.

1904
01:32:35,280 --> 01:32:37,280
Затем вызывает функцию

1905
01:32:37,280 --> 01:32:39,280
сложить

1906
01:32:39,280 --> 01:32:41,280
and,

1907
01:32:41,280 --> 01:32:43,280
ну, и потом, соответственно,

1908
01:32:43,280 --> 01:32:45,280
ну, не знаю, там, это

1909
01:32:45,280 --> 01:32:47,280
return, короче говоря, или, там,

1910
01:32:47,280 --> 01:32:49,280
не знаю, там, загрузить

1911
01:32:49,280 --> 01:32:51,280
со стека, как бы, результат,

1912
01:32:51,280 --> 01:32:53,280
там, не знаю, там, load, короче говоря,

1913
01:32:53,280 --> 01:32:55,280
там, в какой-нибудь, там,

1914
01:32:55,280 --> 01:32:57,280
память. Значит,

1915
01:32:57,280 --> 01:32:59,280
как это будет выглядеть? Сначала я положу

1916
01:32:59,280 --> 01:33:01,280
на stack 5, потом

1917
01:33:01,280 --> 01:33:03,280
я положу на stack 3, потом

1918
01:33:03,280 --> 01:33:05,280
я вызываю функцию add, которая, что делает?

1919
01:33:05,280 --> 01:33:07,280
Она делает pop

1920
01:33:07,280 --> 01:33:09,280
3, то есть она снимает, как бы, 3

1921
01:33:09,280 --> 01:33:11,280
со стека сначала, потом снимает

1922
01:33:11,280 --> 01:33:13,280
5 со стека, а потом кладет на stack

1923
01:33:13,280 --> 01:33:15,280
8. То есть делает push, как бы, вот,

1924
01:33:15,280 --> 01:33:17,280
8.

1925
01:33:17,280 --> 01:33:19,280
Ну, и, соответственно, я знаю,

1926
01:33:19,280 --> 01:33:21,280
что после выполнения этой инструкции, как бы,

1927
01:33:21,280 --> 01:33:23,280
на стеке будет результат вот этих вот

1928
01:33:23,280 --> 01:33:25,280
вот этих вот операций.

1929
01:33:25,280 --> 01:33:27,280
То есть это, как бы, простой достаточно способ.

1930
01:33:27,280 --> 01:33:29,280
А

1931
01:33:29,280 --> 01:33:31,280
register-based

1932
01:33:31,280 --> 01:33:33,280
виртуальные машины, они, как бы,

1933
01:33:33,280 --> 01:33:35,280
работают как? Они, на самом деле,

1934
01:33:35,280 --> 01:33:37,280
делают не push, а они делают

1935
01:33:37,280 --> 01:33:39,280
давайте в

1936
01:33:39,280 --> 01:33:41,280
первый регистр запишем 5,

1937
01:33:41,280 --> 01:33:43,280
затем, там, в EBX

1938
01:33:43,280 --> 01:33:45,280
запишем 3,

1939
01:33:45,280 --> 01:33:47,280
а потом, как бы, вызовем add,

1940
01:33:47,280 --> 01:33:49,280
там, там, EACS, там, EBX,

1941
01:33:49,280 --> 01:33:51,280
там, и так далее. То есть они, как бы, будут

1942
01:33:51,280 --> 01:33:53,280
использовать регистры,

1943
01:33:53,280 --> 01:33:55,280
как, собственно, используют наши,

1944
01:33:55,280 --> 01:33:57,280
как используют наши процессоры, там,

1945
01:33:57,280 --> 01:33:59,280
всякие intelовые, там, рисковые, и так далее.

1946
01:33:59,280 --> 01:34:01,280
Вот. И тогда в регистре

1947
01:34:01,280 --> 01:34:03,280
EACS, как бы, уже появятся, там,

1948
01:34:03,280 --> 01:34:05,280
результаты от 8, и мы его запишем

1949
01:34:05,280 --> 01:34:07,280
в память. То есть в теории

1950
01:34:07,280 --> 01:34:09,280
можно было бы сделать EVM, как бы,

1951
01:34:09,280 --> 01:34:11,280
и регистровать, то есть сделать, там,

1952
01:34:11,280 --> 01:34:13,280
нам пачку регистров договориться

1953
01:34:13,280 --> 01:34:15,280
о том, как между ними продают

1954
01:34:15,280 --> 01:34:17,280
передаются параметры и делать

1955
01:34:17,280 --> 01:34:19,280
вот эту вот стековую машину.

1956
01:34:19,280 --> 01:34:21,280
Значит,

1957
01:34:21,280 --> 01:34:23,280
у регистровой машины,

1958
01:34:23,280 --> 01:34:25,280
которая, там, напрямую работает

1959
01:34:25,280 --> 01:34:27,280
с процессором, у нее, наверное,

1960
01:34:27,280 --> 01:34:29,280
у нее, в общем-то, есть, как бы, преимущество,

1961
01:34:29,280 --> 01:34:31,280
потому что операции с регистрами, они быстрее, чем

1962
01:34:31,280 --> 01:34:33,280
операции со стеком. То есть

1963
01:34:33,280 --> 01:34:35,280
процессор гораздо быстрее, как бы, работает,

1964
01:34:35,280 --> 01:34:37,280
там, все перекидывает, как бы, в

1965
01:34:37,280 --> 01:34:39,280
регистрах. Если, там, дальше вот это

1966
01:34:39,280 --> 01:34:41,280
используется для дальнейших вычислений, все будет

1967
01:34:41,280 --> 01:34:43,280
прям сильно-сильно быстрее, не надо

1968
01:34:43,280 --> 01:34:45,280
в память ходить, там, и так далее.

1969
01:34:45,280 --> 01:34:47,280
То есть, это преимущество у регистровых

1970
01:34:47,280 --> 01:34:49,280
машин есть. Ну, еще можно, там, разные

1971
01:34:49,280 --> 01:34:51,280
окна регистров использовать, если вот

1972
01:34:51,280 --> 01:34:53,280
эти заняты, можно потом пойти, там,

1973
01:34:53,280 --> 01:34:55,280
ЕЦХ, ЕДХ, как бы, их, там,

1974
01:34:55,280 --> 01:34:57,280
современных процессоров, этих процессоров,

1975
01:34:57,280 --> 01:34:59,280
этих регистров немерено.

1976
01:34:59,280 --> 01:35:01,280
Вот, можно кучу всяких разных, там,

1977
01:35:01,280 --> 01:35:03,280
оптимизаций делать, но

1978
01:35:03,280 --> 01:35:05,280
это бьет, правда, по детерминизму

1979
01:35:05,280 --> 01:35:07,280
исполнения. То есть,

1980
01:35:07,280 --> 01:35:09,280
потому что здесь

1981
01:35:09,280 --> 01:35:11,280
внутри есть всякие предсказания, там,

1982
01:35:11,280 --> 01:35:13,280
переходов, и вот эти вот окна

1983
01:35:13,280 --> 01:35:15,280
регистров в процессоре, то есть, когда

1984
01:35:15,280 --> 01:35:17,280
у процессора, как бы, один и тот же набор

1985
01:35:17,280 --> 01:35:19,280
регистров, он мгновенно переключается

1986
01:35:19,280 --> 01:35:21,280
между, там, десятками, сотнями,

1987
01:35:21,280 --> 01:35:23,280
как бы, версий. Наш

1988
01:35:23,280 --> 01:35:25,280
процессор, когда мы в операционной системе

1989
01:35:25,280 --> 01:35:27,280
работаем, он постоянно между процессорами

1990
01:35:27,280 --> 01:35:29,280
переключается, и он, по сути, сейчас

1991
01:35:29,280 --> 01:35:31,280
он выполнял, там, Notepad,

1992
01:35:31,280 --> 01:35:33,280
а сейчас ему надо, как бы, в часы

1993
01:35:33,280 --> 01:35:35,280
как-то переключиться, Clock. Он раз, короче,

1994
01:35:35,280 --> 01:35:37,280
перескочил, сразу следующий контекст,

1995
01:35:37,280 --> 01:35:39,280
там уже другой набор регистров.

1996
01:35:39,280 --> 01:35:41,280
Потом, там, еще какой-нибудь, там, Scheduler,

1997
01:35:41,280 --> 01:35:43,280
как бы, там другой набор регистров, он, там,

1998
01:35:43,280 --> 01:35:45,280
работает постоянно, как бы, с разными

1999
01:35:45,280 --> 01:35:47,280
контекстами. И

2000
01:35:47,280 --> 01:35:49,280
поэтому, прям, какого-то такого четкого

2001
01:35:49,280 --> 01:35:51,280
софтового детерминизма от

2002
01:35:51,280 --> 01:35:53,280
регистровой машины

2003
01:35:53,280 --> 01:35:55,280
сложнее его реализовать.

2004
01:35:57,280 --> 01:35:59,280
Ну, и код сильно сложнее, как бы,

2005
01:35:59,280 --> 01:36:01,280
чем у стековой машины. А еще,

2006
01:36:01,280 --> 01:36:03,280
что важно, если у вас

2007
01:36:03,280 --> 01:36:05,280
вместо стековой машины находится такой

2008
01:36:05,280 --> 01:36:07,280
софтовый процессор, как бы, с регистрами,

2009
01:36:07,280 --> 01:36:09,280
то вам, чтобы сохранить его состояние,

2010
01:36:09,280 --> 01:36:11,280
если вам нужно

2011
01:36:11,280 --> 01:36:13,280
save сделать,

2012
01:36:13,280 --> 01:36:15,280
то вам нужно сохранить состояние

2013
01:36:15,280 --> 01:36:17,280
регистров. То есть, вот этот, вот этот,

2014
01:36:17,280 --> 01:36:19,280
вот этот, вот этот, чему они равны, короче

2015
01:36:19,280 --> 01:36:21,280
говоря, там, и так далее.

2016
01:36:21,280 --> 01:36:23,280
А у стековой машины, чтобы сохранить

2017
01:36:23,280 --> 01:36:25,280
его состояние, надо просто, как бы,

2018
01:36:25,280 --> 01:36:27,280
сохранить stack pointer,

2019
01:36:27,280 --> 01:36:29,280
вот я нахожусь, вот, на этой инструкции,

2020
01:36:29,280 --> 01:36:31,280
у меня instruction pointer,

2021
01:36:31,280 --> 01:36:33,280
то есть, ну, на какой

2022
01:36:33,280 --> 01:36:35,280
инструкции я стою, и

2023
01:36:35,280 --> 01:36:37,280
на каком месте стека я нахожусь в оперативной

2024
01:36:37,280 --> 01:36:39,280
памяти. Все, как бы, вот этих двух чисел,

2025
01:36:39,280 --> 01:36:41,280
как бы, достаточно, чтобы, там, пойти сделать

2026
01:36:41,280 --> 01:36:43,280
свои дела какие-то, потом вернуться,

2027
01:36:43,280 --> 01:36:45,280
как бы, и просто продолжить исполнять.

2028
01:36:45,280 --> 01:36:47,280
То есть мне, чтобы контекст установить, достаточно

2029
01:36:47,280 --> 01:36:49,280
всего двух чисел. Вот.

2030
01:36:49,280 --> 01:36:51,280
Ну, и стековая машина гораздо

2031
01:36:51,280 --> 01:36:53,280
более предсказуемая

2032
01:36:53,280 --> 01:36:55,280
в плане, как бы, поведения.

2033
01:36:55,280 --> 01:36:57,280
То есть, как бы, все

2034
01:36:57,280 --> 01:36:59,280
операции очень-очень сильно

2035
01:36:59,280 --> 01:37:01,280
однотипные, то есть

2036
01:37:01,280 --> 01:37:03,280
нет никаких, там, возможностей,

2037
01:37:03,280 --> 01:37:05,280
там, сделать, если мы A и B

2038
01:37:05,280 --> 01:37:07,280
писали в эти, например, регистры,

2039
01:37:07,280 --> 01:37:09,280
а на другом компьютере решили вот через вот эти

2040
01:37:09,280 --> 01:37:11,280
регистры сделать сложение, как бы, пожалуйста.

2041
01:37:11,280 --> 01:37:13,280
Ну, то есть, все вот это вот должно,

2042
01:37:13,280 --> 01:37:15,280
как бы, хендлиться. Вот.

2043
01:37:15,280 --> 01:37:17,280
Но, тем не менее, как бы, можно делать и так,

2044
01:37:17,280 --> 01:37:19,280
и так, и была выбрана, как бы, стековая

2045
01:37:19,280 --> 01:37:21,280
машина. Ну, я могу сказать, что

2046
01:37:21,280 --> 01:37:23,280
например, в блокчейне TON,

2047
01:37:23,280 --> 01:37:25,280
который,

2048
01:37:25,280 --> 01:37:27,280
Telegram, который строился там,

2049
01:37:27,280 --> 01:37:29,280
есть TVM, короче, и они тоже

2050
01:37:29,280 --> 01:37:31,280
выбрали стековую машину.

2051
01:37:31,280 --> 01:37:33,280
Вот. Что, как бы, для блокчейнов,

2052
01:37:33,280 --> 01:37:35,280
как бы, более правильно.

2053
01:37:35,280 --> 01:37:37,280
Но она, знаете, она такая, она более ровная,

2054
01:37:37,280 --> 01:37:39,280
она более предсказуемая, она более простая,

2055
01:37:39,280 --> 01:37:41,280
как бы, в ней меньше

2056
01:37:41,280 --> 01:37:43,280
может быть уязвимостей, связанной

2057
01:37:43,280 --> 01:37:45,280
с тратой ресурсов.

2058
01:37:45,280 --> 01:37:47,280
Различно. А вообще,

2059
01:37:47,280 --> 01:37:49,280
если взять какой-нибудь просто код,

2060
01:37:49,280 --> 01:37:51,280
как бы, того же, как бы, там,

2061
01:37:51,280 --> 01:37:53,280
современного смарт-контракта и скомпилировать

2062
01:37:53,280 --> 01:37:55,280
его в WebAssembly, в Wasm,

2063
01:37:55,280 --> 01:37:57,280
то у Wasm есть еще одна

2064
01:37:57,280 --> 01:37:59,280
проблема.

2065
01:37:59,280 --> 01:38:01,280
WebAssembly разрабатывался для того, чтобы вы

2066
01:38:01,280 --> 01:38:03,280
в своем браузере, да, могли

2067
01:38:03,280 --> 01:38:05,280
крутить 3D-объекты.

2068
01:38:05,280 --> 01:38:07,280
То есть, там есть, там предусмотрен

2069
01:38:07,280 --> 01:38:09,280
код, как бы, который может вам взять,

2070
01:38:09,280 --> 01:38:11,280
как бы, и заалоцировать, там, не знаю, там,

2071
01:38:11,280 --> 01:38:13,280
10 мегабайт оперативной памяти.

2072
01:38:13,280 --> 01:38:15,280
Там, не знаю, какого-нибудь объекта

2073
01:38:15,280 --> 01:38:17,280
и пойти, там, с ним, как бы, работать

2074
01:38:17,280 --> 01:38:19,280
и так далее. То есть, там очень много

2075
01:38:19,280 --> 01:38:21,280
аллокаций памяти. То есть,

2076
01:38:21,280 --> 01:38:23,280
выделить память под объект,

2077
01:38:23,280 --> 01:38:25,280
а когда вы работаете с объектами

2078
01:38:25,280 --> 01:38:27,280
вот такого размера,

2079
01:38:27,280 --> 01:38:29,280
у вас ваш аллокатор памяти,

2080
01:38:29,280 --> 01:38:31,280
он может, там, заранее, как бы, что-нибудь резервировать.

2081
01:38:31,280 --> 01:38:33,280
Там, выделю я, пожалуй, сейчас 10

2082
01:38:33,280 --> 01:38:35,280
килобайт вот этому чуваку, но еще вот здесь

2083
01:38:35,280 --> 01:38:37,280
вот, как бы, такой кусочек выделю, как бы,

2084
01:38:37,280 --> 01:38:39,280
вдруг он захочет потом расширить этот массив,

2085
01:38:39,280 --> 01:38:41,280
чем-нибудь дописать.

2086
01:38:41,280 --> 01:38:43,280
Дай-ка его, и вот здесь я тоже

2087
01:38:43,280 --> 01:38:45,280
с запасом сделаю, там, еще

2088
01:38:45,280 --> 01:38:47,280
что-то. И получается

2089
01:38:47,280 --> 01:38:49,280
так, что очень простой

2090
01:38:49,280 --> 01:38:51,280
код на, грубо говоря,

2091
01:38:51,280 --> 01:38:53,280
самая простая логика

2092
01:38:53,280 --> 01:38:55,280
в АСМе, она может порождать большое

2093
01:38:55,280 --> 01:38:57,280
количество аллокаций

2094
01:38:57,280 --> 01:38:59,280
аллок и фри.

2095
01:38:59,280 --> 01:39:01,280
Ну, и освобождение, как бы,

2096
01:39:01,280 --> 01:39:03,280
памяти. Просто потому, что у вас думают,

2097
01:39:03,280 --> 01:39:05,280
ну, а вдруг сейчас, как бы, в этой переменной

2098
01:39:05,280 --> 01:39:07,280
вдруг появится, там, не знаю, там, 10

2099
01:39:07,280 --> 01:39:09,280
мегабайт, как бы, а вдруг этот цикл

2100
01:39:09,280 --> 01:39:11,280
сейчас будет, там, какой-то, там, безумный, там,

2101
01:39:11,280 --> 01:39:13,280
и так далее. То есть, там есть, там, всякие, как бы,

2102
01:39:13,280 --> 01:39:15,280
оптимизации. То есть, для блокчейнов он не

2103
01:39:15,280 --> 01:39:17,280
очень-то подходит. Поэтому

2104
01:39:17,280 --> 01:39:19,280
в блокчейнах под WebAssembler

2105
01:39:19,280 --> 01:39:21,280
пишут, как бы, свои собственные

2106
01:39:21,280 --> 01:39:23,280
компиляторы. У Polkadot есть свои

2107
01:39:23,280 --> 01:39:25,280
собственные, там, однопроходные компиляторы

2108
01:39:25,280 --> 01:39:27,280
для WebAssembler. То есть, его все время нужно

2109
01:39:27,280 --> 01:39:29,280
докручивать. Вот.

2110
01:39:29,280 --> 01:39:31,280
Поэтому пока что

2111
01:39:31,280 --> 01:39:33,280
в смарт-контрактах победили специализированные

2112
01:39:33,280 --> 01:39:35,280
виртуальные машины.

2113
01:39:35,280 --> 01:39:37,280
Вот. Они являются наиболее такими

2114
01:39:37,280 --> 01:39:39,280
востребованными.

2115
01:39:39,280 --> 01:39:41,280
Так.

2116
01:39:41,280 --> 01:39:43,280
Время 13.40.

2117
01:39:43,280 --> 01:39:45,280
Мы уже час 40 с вами проговорили.

2118
01:39:45,280 --> 01:39:47,280
Поэтому я предлагаю сейчас перерыв.

2119
01:39:47,280 --> 01:39:49,280
Давайте

2120
01:39:49,280 --> 01:39:51,280
на 15 минут. То есть,

2121
01:39:51,280 --> 01:39:53,280
до 13.55.

2122
01:39:53,280 --> 01:39:55,280
В 13.55 я вернусь.

2123
01:39:55,280 --> 01:39:57,280
Раз чайку попьете.

2124
01:39:59,280 --> 01:40:01,280
Так. Все.

2125
01:40:01,280 --> 01:40:03,280
Тогда перерыв.

2126
01:40:15,280 --> 01:40:17,280
Продолжение следует.

2127
01:40:45,280 --> 01:40:47,280
Продолжение следует.

2128
01:41:15,280 --> 01:41:17,280
Продолжение следует.

2129
01:41:45,280 --> 01:41:47,280
Продолжение следует.

2130
01:42:15,280 --> 01:42:17,280
Продолжение следует.

2131
01:42:45,280 --> 01:42:49,280
Продолжение следует.

2132
01:43:15,280 --> 01:43:21,280
Продолжение следует.

2133
01:43:45,280 --> 01:43:53,280
Продолжение следует.

2134
01:44:15,280 --> 01:44:25,280
Продолжение следует.

2135
01:44:45,280 --> 01:44:55,280
Продолжение следует.

2136
01:45:15,280 --> 01:45:27,280
Продолжение следует.

2137
01:45:45,280 --> 01:45:47,280
Продолжение следует.

2138
01:46:15,280 --> 01:46:17,280
Продолжение следует.

2139
01:46:45,280 --> 01:46:47,280
Продолжение следует.

2140
01:47:15,280 --> 01:47:17,280
Продолжение следует.

2141
01:47:45,280 --> 01:47:47,280
Продолжение следует.

2142
01:48:15,280 --> 01:48:17,280
Продолжение следует.

2143
01:48:45,280 --> 01:48:47,280
Продолжение следует.

2144
01:49:15,280 --> 01:49:17,280
Продолжение следует.

2145
01:49:45,280 --> 01:49:47,280
Продолжение следует.

2146
01:50:15,280 --> 01:50:17,280
Продолжение следует.

2147
01:50:45,280 --> 01:50:47,280
Продолжение следует.

2148
01:51:15,280 --> 01:51:17,280
Продолжение следует.

2149
01:51:45,280 --> 01:51:47,280
Продолжение следует.

2150
01:52:15,280 --> 01:52:17,280
Продолжение следует.

2151
01:52:45,280 --> 01:52:47,280
Продолжение следует.

2152
01:53:15,280 --> 01:53:17,280
Продолжение следует.

2153
01:53:45,280 --> 01:53:47,280
Продолжение следует.

2154
01:54:15,280 --> 01:54:17,280
Продолжение следует.

2155
01:54:17,700 --> 01:54:21,280
55 мм.

2156
01:54:21,280 --> 01:54:23,280
55 мм.

2157
01:54:23,280 --> 01:54:25,280
55 мм.

2158
01:54:25,280 --> 01:54:27,280
55 мм.

2159
01:54:27,280 --> 01:54:29,280
55 мм.

2160
01:54:29,280 --> 01:54:31,280
55 мм.

2161
01:54:31,280 --> 01:54:33,280
55 мм.

2162
01:54:33,280 --> 01:54:35,280
55 мм.

2163
01:54:35,280 --> 01:54:37,280
55 мм.

2164
01:54:37,280 --> 01:54:39,280
55 мм.

2165
01:54:39,280 --> 01:54:41,280
55 мм.

2166
01:54:41,280 --> 01:54:43,280
55 мм.

2167
01:54:43,280 --> 01:54:45,280
55 мм.

2168
01:54:45,280 --> 01:55:05,240
То есть видно, что это как бы там запушили одно значение, другое значение, сохранили в память куда-то там, выделили, соответственно, в памяти кусочек, запушили, вызвали там какую-нибудь там функцию, которая вернула там размер входных аргументов, сравнили больше-меньше, условный переход.

2169
01:55:05,240 --> 01:55:34,020
То есть, в принципе, похоже как бы на работу с ассемблером, вот, и как бы все смарт-контракты, они представляют собой вот этот вот, собственно, набор как раз обходов, вот они как бы их байты, там, когда мы, скажем, выкладываем контракт в сеть, то, по сути, его машинные, ну, вот прям, как бы, собственно, байт-код его функции, вот он находится вот здесь вот где-нибудь там в инпуте, то есть достаточно как бы большой, вот можно, например, посмотреть.

2170
01:55:35,240 --> 01:55:39,040
Вот, у нас вот так вот все, наши контракты, этот вратит эфира.

2171
01:55:41,440 --> 01:55:55,880
Так, ну, будет, будет очень долго, не, на самом деле, можно посмотреть самую первую, как бы, его транзакцию, когда он только был создан первый раз, там, last, как бы, контракт creation, то есть в тот момент, когда он был создан.

2172
01:55:57,500 --> 01:56:00,760
Так, ладно, что-то он тут уже прям не доматывает.

2173
01:56:01,640 --> 01:56:04,880
Вот, и там можно увидеть, соответственно, байт-код контракта.

2174
01:56:05,240 --> 01:56:09,600
Байт-код контракта, который там размещался, он это сейчас, в общем, не так критично.

2175
01:56:10,380 --> 01:56:11,360
А можно вопрос?

2176
01:56:11,620 --> 01:56:11,740
Да.

2177
01:56:12,000 --> 01:56:18,660
У нас же показаны были разные байт-коды, да, естественно, как они вообще не разные байт-коды запускаются?

2178
01:56:22,000 --> 01:56:35,220
Ну, грубо говоря, сначала, сначала я создаю транзакцию create-контракт, create-контракт, у меня вот здесь внутри находится как раз байт-код моего контракта, вот эти вот там 6060,

2179
01:56:35,460 --> 01:56:41,900
6040, 52, вот это вот прям, он по сути, как бы, весь, как бы, байт-код контракта с определенными штуками.

2180
01:56:42,580 --> 01:56:54,160
И когда майнер применяет, когда майнер применяет, как бы, вот эту вот транзакцию, create-database, он создает, как бы, запись, что теперь, как бы, есть контракт по новому адресу, вот.

2181
01:56:54,860 --> 01:57:05,220
Датадес, кстати, вычисляется из моего, вот, из этого, из АВАСи, вот, там, с балансами фиры, там, с пустым нонсом, как бы, сюда прям копируется, вот,

2182
01:57:05,240 --> 01:57:07,460
байт-код, на самом деле

2183
01:57:07,460 --> 01:57:09,540
не целиком, там, за исключением

2184
01:57:09,540 --> 01:57:10,380
конструктора,

2185
01:57:11,160 --> 01:57:13,100
и теперь, как бы, он может вызываться.

2186
01:57:13,220 --> 01:57:15,400
То есть, на самом деле, может быть, как бы, много контрактов

2187
01:57:15,400 --> 01:57:17,220
с одним и тем же байт-кодом.

2188
01:57:17,600 --> 01:57:18,320
Пожалуйста, как бы.

2189
01:57:18,840 --> 01:57:20,620
Но это байт-код EVM, да?

2190
01:57:21,180 --> 01:57:22,980
Байт-код, да, именно EVM.

2191
01:57:23,440 --> 01:57:24,860
А если в AppAssembly

2192
01:57:24,860 --> 01:57:26,180
он транслируется в EVM?

2193
01:57:28,140 --> 01:57:28,580
Нет.

2194
01:57:28,840 --> 01:57:30,940
Но имеется в виду, что вы сюда

2195
01:57:30,940 --> 01:57:33,060
разместите, как бы, можете любой мусор

2196
01:57:33,060 --> 01:57:35,220
здесь разместить, но EVM его не обработает.

2197
01:57:35,280 --> 01:57:37,220
Конечно, в процессе он, как бы, при помощи EVM.

2198
01:57:38,780 --> 01:57:38,960
Вот.

2199
01:57:39,020 --> 01:57:40,840
Я так понимаю, в эфире

2200
01:57:40,840 --> 01:57:42,380
используется только EVM?

2201
01:57:42,700 --> 01:57:44,840
Да, в эфире только

2202
01:57:44,840 --> 01:57:46,800
EVM. Ну, в смысле, как?

2203
01:57:46,920 --> 01:57:49,040
Есть история,

2204
01:57:49,040 --> 01:57:50,440
есть, как бы, предложение

2205
01:57:50,440 --> 01:57:53,080
компилировать, солить, ну, чтобы

2206
01:57:53,080 --> 01:57:54,780
EVM умел еще, как бы, и

2207
01:57:54,780 --> 01:57:56,360
в WebAssembly байт-код.

2208
01:57:57,340 --> 01:57:58,940
Ну, значит, будут контракты, как бы,

2209
01:57:58,980 --> 01:58:00,760
здесь, которые

2210
01:58:00,760 --> 01:58:03,160
на WebAssembly, как бы, написаны. Здесь будут инструкции

2211
01:58:03,160 --> 01:58:04,100
в WebAssembly идти.

2212
01:58:05,060 --> 01:58:05,220
Вот.

2213
01:58:05,240 --> 01:58:06,360
А, то есть это просто

2214
01:58:06,360 --> 01:58:09,240
для общего развития. Да, да, да.

2215
01:58:09,280 --> 01:58:10,980
А так-то, на самом деле, да, как бы,

2216
01:58:11,020 --> 01:58:13,180
в эфире это в основном EVM. Но, и

2217
01:58:13,180 --> 01:58:15,440
как я уже говорил, она, в общем, по сути

2218
01:58:15,440 --> 01:58:16,880
является победителем

2219
01:58:16,880 --> 01:58:19,160
в гонке, как бы, смарт-контрактов,

2220
01:58:19,220 --> 01:58:21,060
потому что даже тот же самый

2221
01:58:21,060 --> 01:58:23,160
WebAssembly, который, казалось бы, ну, блин, ну,

2222
01:58:23,180 --> 01:58:25,260
как, это же стандарт, там, у Mozilla, там,

2223
01:58:25,340 --> 01:58:27,180
Google использует этот WebAssembly,

2224
01:58:27,340 --> 01:58:29,180
там, значит, все, там, поддержка, там,

2225
01:58:29,240 --> 01:58:30,240
машины виртуальные.

2226
01:58:30,900 --> 01:58:33,140
Но все равно его приходится допиливать

2227
01:58:33,140 --> 01:58:35,080
для блокчейнов. Как бы, лучше оказалось,

2228
01:58:35,240 --> 01:58:37,180
как бы, проверенное уже, там,

2229
01:58:37,220 --> 01:58:39,500
сколько, 7 лет, как бы, этой EVM,

2230
01:58:40,280 --> 01:58:41,020
которая кучей

2231
01:58:41,020 --> 01:58:43,220
детских болезней переболела.

2232
01:58:43,340 --> 01:58:44,920
То есть огромное количество изменений

2233
01:58:44,920 --> 01:58:47,500
в security, там, во всем, там, были сделаны.

2234
01:58:49,080 --> 01:58:51,200
Я обещал поговорить, как бы, про

2235
01:58:51,200 --> 01:58:53,440
стоимость газа.

2236
01:58:53,540 --> 01:58:55,080
Вот. И вот, собственно, как раз

2237
01:58:55,080 --> 01:58:56,500
и поговорим

2238
01:58:56,500 --> 01:58:59,440
сейчас, да, просто для, как бы,

2239
01:58:59,480 --> 01:59:01,440
примера. Ну, вот, например, там,

2240
01:59:01,440 --> 01:59:03,760
Push, да, это... Можно вопрос, пока я не забыл?

2241
01:59:04,020 --> 01:59:04,860
Да, да, да.

2242
01:59:04,860 --> 01:59:06,920
Вот. Вы скинете потом презентацию

2243
01:59:06,920 --> 01:59:08,820
в чат? Да, да, да.

2244
01:59:08,920 --> 01:59:10,660
Будет вместе с записями, как бы, да.

2245
01:59:10,800 --> 01:59:12,160
Будет все рядом лежать.

2246
01:59:12,360 --> 01:59:13,500
Не волнуйтесь.

2247
01:59:14,760 --> 01:59:15,120
Значит,

2248
01:59:15,440 --> 01:59:18,620
ну, просто так, по стоимости, да, как бы,

2249
01:59:18,740 --> 01:59:20,580
то есть мы просто взяли из головы

2250
01:59:20,580 --> 01:59:22,300
какие-то, там, не знаю, очки, как бы,

2251
01:59:22,360 --> 01:59:24,360
какие-то, там, не знаю, execution costs

2252
01:59:24,360 --> 01:59:26,480
и так далее. Придумали свою

2253
01:59:26,480 --> 01:59:28,420
собственную виртуальную машину. У нас вот такая

2254
01:59:28,420 --> 01:59:29,620
вот, как бы, куча инструкций.

2255
01:59:30,240 --> 01:59:32,000
И давай им, значит, цену назначать.

2256
01:59:32,520 --> 01:59:34,740
Но операции со стеком у нас должны быть дешевые.

2257
01:59:34,860 --> 01:59:36,520
Да, там, три, как бы, там,

2258
01:59:36,720 --> 01:59:38,480
запушить, как бы, значение на стек.

2259
01:59:38,580 --> 01:59:40,420
Ну, сложение, понятно, как бы, что там,

2260
01:59:40,660 --> 01:59:42,920
прочитали пару значений, процессор

2261
01:59:42,920 --> 01:59:43,400
сложил.

2262
01:59:45,460 --> 01:59:46,320
Значит, там,

2263
01:59:46,580 --> 01:59:48,480
здесь я что-то прям,

2264
01:59:48,640 --> 01:59:50,880
ну, наверное, не очень,

2265
01:59:51,040 --> 01:59:52,580
как бы, точно указал, как бы, обратились

2266
01:59:52,580 --> 01:59:54,480
к оперативной памяти, и эта штука уже, как бы,

2267
01:59:54,540 --> 01:59:56,500
сильно потяжелее. Потому что неизвестно,

2268
01:59:56,620 --> 01:59:58,680
сколько я хочу сохранить. Если я хочу сохранить

2269
01:59:58,680 --> 02:00:00,780
килобайт, как бы, и, там, мегабайт,

2270
02:00:01,480 --> 02:00:02,860
то у меня должна быть разница

2271
02:00:02,860 --> 02:00:04,680
в тысячу, как бы, по цене.

2272
02:00:04,860 --> 02:00:06,600
То есть, поэтому написано, там, перслот.

2273
02:00:07,100 --> 02:00:09,000
То есть, оценивается по количеству

2274
02:00:09,000 --> 02:00:10,820
выделяемых слотов эта история, там,

2275
02:00:11,040 --> 02:00:12,840
наверное, трешка, я, наверное, прям написал.

2276
02:00:14,500 --> 02:00:14,860
Там,

2277
02:00:14,940 --> 02:00:16,360
jump, условный переход.

2278
02:00:16,720 --> 02:00:18,820
Ну, это, собственно, как у нас везде,

2279
02:00:18,940 --> 02:00:20,840
как бы, ну, везде есть,

2280
02:00:20,840 --> 02:00:22,880
как бы, условный переход. Без него компьютер

2281
02:00:22,880 --> 02:00:24,720
невозможен, как бы, и тюринг полный,

2282
02:00:24,800 --> 02:00:26,900
как бы, вообще, хоть какие-то языки.

2283
02:00:27,380 --> 02:00:28,940
Поэтому, вот, если у нас условный переход,

2284
02:00:29,080 --> 02:00:30,460
проверка условий стоит 10.

2285
02:00:31,520 --> 02:00:32,980
И вот, мега-дорогие

2286
02:00:32,980 --> 02:00:33,620
операции.

2287
02:00:34,860 --> 02:00:36,760
Очень сильные, короче. Это загрузка

2288
02:00:36,760 --> 02:00:38,860
из сториджа и сохранение

2289
02:00:38,860 --> 02:00:40,840
в сторидж. Почему самая

2290
02:00:40,840 --> 02:00:42,840
дорогая, ну, сохранение в сторидж,

2291
02:00:42,900 --> 02:00:45,020
ну, потому что вы сохраняете свою переменную

2292
02:00:45,020 --> 02:00:47,000
в сторидж, вот в эту k-value баз данных,

2293
02:00:47,020 --> 02:00:48,660
и она будет скопирована на тысячи

2294
02:00:48,660 --> 02:00:50,660
компьютеров в эфире, как бы. Поэтому, да,

2295
02:00:50,660 --> 02:00:52,200
за это, как бы, придется заплатить.

2296
02:00:53,040 --> 02:00:54,680
Заметьте, сохранить одно значение

2297
02:00:54,680 --> 02:00:56,780
стоит, ну, прямо с нуля, как бы, у вас

2298
02:00:56,780 --> 02:00:58,720
пустой контракт, вы просто какое-то значение

2299
02:00:58,720 --> 02:01:00,660
сохраните в сторидж, стоит 20 тысяч газа.

2300
02:01:01,800 --> 02:01:02,760
При этом перевод

2301
02:01:02,760 --> 02:01:04,780
эфира стоит 21 тысячу

2302
02:01:04,780 --> 02:01:06,700
газа. То есть, вот, просто, как бы, послать

2303
02:01:06,700 --> 02:01:08,440
кому-то эфир будет стоить, как бы, там,

2304
02:01:08,520 --> 02:01:10,760
есть у нее, там, base cost, как бы, основная

2305
02:01:10,760 --> 02:01:12,300
цена 21 тысяча эфира.

2306
02:01:13,300 --> 02:01:13,700
Вот.

2307
02:01:14,720 --> 02:01:16,160
Сохранение одного значения, там,

2308
02:01:16,360 --> 02:01:18,680
20 тысяч. Вызов

2309
02:01:20,020 --> 02:01:20,860
другого контракта.

2310
02:01:21,260 --> 02:01:22,720
Понятно, что штука, как бы, сложная,

2311
02:01:22,840 --> 02:01:24,820
как бы, ну, на сам кол, как бы, надо, за него

2312
02:01:24,820 --> 02:01:26,580
надо заплатить, потому что нам надо

2313
02:01:26,580 --> 02:01:28,420
для этого, там, глобальные перемены

2314
02:01:28,420 --> 02:01:30,780
подтянуть, там, контекст вызовов подготовить,

2315
02:01:31,380 --> 02:01:32,500
и так далее, как бы.

2316
02:01:33,060 --> 02:01:34,480
Но, по-хорошему, когда я

2317
02:01:34,780 --> 02:01:36,680
иду из одного контракта в другой, да, то

2318
02:01:36,680 --> 02:01:39,100
у меня, как бы, газ с этим вызовом передается.

2319
02:01:39,580 --> 02:01:40,960
То есть, я сейчас, там, не знаю,

2320
02:01:41,060 --> 02:01:42,720
там, бегу по первому

2321
02:01:42,720 --> 02:01:44,720
контракту, потратил 50

2322
02:01:44,720 --> 02:01:46,640
тысяч газа, потом у меня происходит

2323
02:01:46,640 --> 02:01:48,980
вызов, я иду в другой, в другой контракт,

2324
02:01:49,460 --> 02:01:50,860
там продолжается исполнение,

2325
02:01:50,980 --> 02:01:52,720
здесь тоже, как бы, газ суммируется,

2326
02:01:52,820 --> 02:01:54,860
я потратил, там, еще, еще плюс 22

2327
02:01:54,860 --> 02:01:56,820
тысячи газа, как бы, вернулся

2328
02:01:56,820 --> 02:01:58,560
обратно, и у меня уже здесь 72,

2329
02:01:58,740 --> 02:02:00,600
ну, и продолжу дальше.

2330
02:02:00,780 --> 02:02:02,920
То есть, там, там тоже, как бы, механизмы

2331
02:02:02,920 --> 02:02:04,620
довольно, там,

2332
02:02:04,780 --> 02:02:06,420
разные есть, можно с вызовом послать, там,

2333
02:02:06,500 --> 02:02:08,280
любое количество газа, какое вам нравится,

2334
02:02:08,400 --> 02:02:09,260
то есть, все это делается.

2335
02:02:10,600 --> 02:02:12,660
Ну, и то, что я говорил про лог, это про

2336
02:02:12,660 --> 02:02:14,160
вот эти, вот, ивенты,

2337
02:02:14,560 --> 02:02:16,920
которые в контракте

2338
02:02:16,920 --> 02:02:17,840
происходят.

2339
02:02:19,400 --> 02:02:20,440
То есть, вот эти, вот, которые

2340
02:02:20,440 --> 02:02:21,940
депозит выбрал,

2341
02:02:22,200 --> 02:02:23,140
господи ты боже,

2342
02:02:24,280 --> 02:02:25,900
сори, намотал.

2343
02:02:26,940 --> 02:02:28,800
Вот он. Вот эти, вот,

2344
02:02:28,840 --> 02:02:30,820
то, что в момент трансфера происходит

2345
02:02:30,820 --> 02:02:32,560
ивент трансфер, в момент депозита

2346
02:02:32,560 --> 02:02:34,480
происходит ивент депозит, вот,

2347
02:02:34,780 --> 02:02:44,020
они стоят соответственно довольно дешево вот 375 плюс ну плюс цена короче говоря ну за размер

2348
02:02:44,020 --> 02:02:51,220
данных то есть ни одного байта еще раз напоминаю как бы ни одни 1 байт бесплатно как бы не процессе

2349
02:02:51,220 --> 02:02:58,120
если говорить о наборе инструкции здесь есть соответственно обходы мы видим по сути в общем

2350
02:02:58,120 --> 02:03:03,300
то то же самое описание там виртуальной машины как ассемблера да вот там сложение на стеки

2351
02:03:03,300 --> 02:03:10,440
должно быть два числа на выходе на стыке будет как бы в сумму умножение деление все как бы

2352
02:03:10,440 --> 02:03:19,820
понятные истории сравнения сравнение двух чисел да там на стыке будет результатом труды фолз тоже

2353
02:03:19,820 --> 02:03:27,660
все как бы известно там сравнению с нулем там и так далее так далее сдвиги первое наверное

2354
02:03:27,660 --> 02:03:32,400
интересная инструкция на котором мы натыкаемся от инструкции сша 3 который нету как был в

2355
02:03:32,400 --> 02:03:33,000
современных процессах

2356
02:03:33,300 --> 02:03:40,880
микроконтроллеров крайне важный который считает хэш от данных в оперативной памяти то есть вы

2357
02:03:40,880 --> 02:03:46,320
говорите как бы там где оперативной памяти лежат данные сколько байт прочитать и от них надо

2358
02:03:46,320 --> 02:03:53,340
посчитать хэш вот он стоит соответственно но он считает как раз хэш вот этот алгоритм хэширование

2359
02:03:53,340 --> 02:03:59,760
кетчуп 256 который еще называют не называют официальное название сша 3 то что это третий

2360
02:03:59,760 --> 02:04:03,280
международный стандарт хэширования который всем миром принято

2361
02:04:03,300 --> 02:04:09,960
алгоритм хэширования 256 бит и вот он как бы ключевой в эфире весь эфир построен вот на этом

2362
02:04:09,960 --> 02:04:18,240
как бы кичаки мы его дизайн будем рассматривать на симметричных микрографии обход который получает

2363
02:04:18,240 --> 02:04:25,500
адрес текущего контракта на стыке обход который получает баланс эфира данного адреса пожалуйста

2364
02:04:25,500 --> 02:04:33,280
как бы там ну там всякие там типа кто вызвал кто вызвал этот контракт сколько он эфира послал вместе с эфиром

2365
02:04:33,300 --> 02:04:39,360
то есть мы сейчас выполняем как бы транзакцию и у нас есть по сути глобальные перемены когда мы

2366
02:04:39,360 --> 02:04:46,200
процессе наш контракт этот код как бы бежим к нему а нам еще вдобавок как бы сюда передаются глобальные

2367
02:04:46,200 --> 02:04:52,680
перемены это то есть кто отправил транзакцию сколько предложил ему денег вот инструкция

2368
02:04:52,680 --> 02:05:01,260
которая позволяет параметры загрузить связанные с этим вызовом колдата это как бы называется вот еще

2369
02:05:03,300 --> 02:05:09,200
такая как бы интересно инструкция код сайдс размер кода то есть она довольно тупая как бы

2370
02:05:09,200 --> 02:05:15,960
из того что я вам рисовал у васи как бы но у него там баланс как бы у него кода никакого

2371
02:05:15,960 --> 02:05:22,080
нету а вот у нашего контракта как бы код есть вот эта инструкция она просто выдает размер

2372
02:05:22,080 --> 02:05:27,960
как бы кода то есть можно при помощи ее узнать как бы на этот адрес является контрактом или

2373
02:05:27,960 --> 02:05:33,120
просто адресом с эфиром вот с этим тоже там много связано безопасности тоже как бы поговорим

2374
02:05:33,300 --> 02:05:37,360
Вот там всякие, и так далее.

2375
02:05:38,000 --> 02:05:41,060
Значит, Coinbase — это довольно интересная штука.

2376
02:05:42,120 --> 02:05:49,360
Когда майнер будет исполнять смарт-контракт, вот в этой переменной, блок Coinbase,

2377
02:05:49,880 --> 02:05:54,780
то есть можно в смарт-контракте обратиться, получить адрес майнера, который этот блок произвел.

2378
02:05:56,040 --> 02:06:01,280
То есть вы можете в текущем блоке получить адрес того, кто этот блок произвел.

2379
02:06:01,280 --> 02:06:03,440
Когда отправлять транзакцию, вы этого не знаете.

2380
02:06:03,620 --> 02:06:10,200
Но когда транзакция будет исполняться, понятно, что майнер подставляет сам адрес того,

2381
02:06:10,740 --> 02:06:17,540
адрес того, кто произвел блок, и вы получите, соответственно, его можете в контракте использовать.

2382
02:06:18,500 --> 02:06:22,740
Мега важная штука — блок timestamp, по сути, получение текущего времени.

2383
02:06:23,160 --> 02:06:27,780
Как я говорил, у всех транзакций в одном блоке одно и то же время текущее.

2384
02:06:27,780 --> 02:06:29,360
Это время вот этого блока.

2385
02:06:29,720 --> 02:06:30,780
И без всяких там...

2386
02:06:31,280 --> 02:06:33,020
Без всяких расхождений.

2387
02:06:34,280 --> 02:06:36,700
Ну, там номера блока, difficulty.

2388
02:06:38,280 --> 02:06:40,160
Важная довольно штука — газ-лимит.

2389
02:06:40,600 --> 02:06:46,780
То есть сколько в этом блоке максимально может быть потрачено газа, причем как бы на все транзакции.

2390
02:06:48,040 --> 02:06:54,220
Ну, то есть сколько как бы в данном блоке всего, как бы вот этих попугаев на все транзакции будет.

2391
02:06:54,220 --> 02:06:59,080
То ли всего, а может быть и на данную транзакцию какой-то там hard-limit, честно говоря.

2392
02:07:01,280 --> 02:07:05,160
Уж как бы наизусть о спецификации, конечно, не знаю.

2393
02:07:05,960 --> 02:07:07,500
Важный параметр — chain ID.

2394
02:07:08,380 --> 02:07:10,700
То есть это как бы идентификатор сети.

2395
02:07:11,500 --> 02:07:15,020
Видите, здесь там MyNet, Robsten, Girly и так далее.

2396
02:07:15,140 --> 02:07:21,800
То есть каждый форк эфира, ну, такая как бы копия эфира, которая хочет как бы у себя реализовать EVM,

2397
02:07:22,680 --> 02:07:27,620
и чтобы все контракты были совместимы, как бы чтобы они правильно возвращали как бы идентификатор цепочки,

2398
02:07:27,620 --> 02:07:31,260
то в разных блокчейнах chain ID разный.

2399
02:07:31,280 --> 02:07:37,740
Например, если я вот здесь вот там выбираю как бы между там Girly, Ethereum, MyNet,

2400
02:07:37,740 --> 02:07:44,380
по сути у меня будет в транзакциях меняться вот этот вот chain ID, а контракты могут это дело проверять.

2401
02:07:44,380 --> 02:07:49,880
То есть там твоя транзакция как бы для этого chain ID как бы предназначена, вот.

2402
02:07:49,880 --> 02:07:56,500
Затем как бы баланс самого контракта, там, короче, там базовые фичи, сейчас чуть-чуть тоже о них поговорим.

2403
02:07:56,500 --> 02:08:00,660
Загрузка память — mLoad, mStore.

2404
02:08:00,660 --> 02:08:01,160
mStore.

2405
02:08:01,160 --> 02:08:05,540
mStore там одного байта, как бы это операция с оперативной памятью.

2406
02:08:05,540 --> 02:08:09,920
То же самое с mLoad и mStore, такие же операции, но со стороджем.

2407
02:08:09,920 --> 02:08:15,160
Здесь уже видите, как k-value, здесь уже никакие не обсеты, вот.

2408
02:08:15,160 --> 02:08:23,440
Jump — условный jump, вот, ну и дальше как бы много разных видов пушей, которые нам нужны.

2409
02:08:23,440 --> 02:08:30,540
Ну а dupe — это как бы дуплицирование значения на стеке, ну это очень часто нужно как бы,

2410
02:08:30,540 --> 02:08:40,620
вы там получили результат из функции, как бы вы ее используете в следующей функции и хотите предыдущий результат тоже сохранить на стеке, вот.

2411
02:08:40,620 --> 02:08:51,500
Ну и куча всяких разных штук, как бы связанных с операциями на стеке, свапы, как бы это все для того, чтобы более эффективно все получалось, вот.

2412
02:08:51,500 --> 02:08:56,480
Запись событий, ивентов, вот этот вот log и так далее.

2413
02:08:56,480 --> 02:08:59,700
Здесь есть как бы log для разного количества аргументов.

2414
02:08:59,700 --> 02:09:00,200
Вот.

2415
02:09:00,540 --> 02:09:05,700
Сам call — вызов другого контракта.

2416
02:09:05,700 --> 02:09:12,000
Вот обкод очень важный, как бы create, который создает новый контракт.

2417
02:09:12,000 --> 02:09:18,100
Он говорит там типа «забери байткод этого контракта и создай как бы новый контракт по определенному адресу».

2418
02:09:18,100 --> 02:09:24,060
То есть контракт может не только обращаться к другим контрактам, он может еще и deploy другие контракты.

2419
02:09:24,060 --> 02:09:27,020
И эта штука тоже используется, тоже посмотрим.

2420
02:09:27,020 --> 02:09:28,620
Вот.

2421
02:09:28,620 --> 02:09:30,340
Затем там различные вызовы.

2422
02:09:30,340 --> 02:09:33,500
Call, call code, delegate call — тут много.

2423
02:09:33,500 --> 02:09:39,260
Вторая версия, create2, тоже про нее поговорим, то есть еще один способ deploy контракта.

2424
02:09:39,260 --> 02:09:48,100
Static call — это когда мы обращаемся к библиотеке и говорим, в течение этого вызова как бы ничего в сторидже поменяться не должно быть.

2425
02:09:48,100 --> 02:09:53,300
Ни в коем случае мы не будем трогать вообще сторидж как бы ни в каком виде.

2426
02:09:53,300 --> 02:09:58,740
Такой вызов подешевле, вот, и нужен для обращения к библиотекам.

2427
02:09:58,740 --> 02:10:00,120
Ну, есть еще revert.

2428
02:10:00,340 --> 02:10:05,500
И еще мега интересная инструкция, которая называется self-destruct.

2429
02:10:05,500 --> 02:10:07,120
Значит, что делает self-destruct?

2430
02:10:07,120 --> 02:10:14,140
Self-destruct удаляет полностью весь код контракта, то есть он становится как бы нулевым.

2431
02:10:14,140 --> 02:10:25,820
Затем берет, короче говоря, весь баланс эфира, который есть, ну, есть у этого контракта и отправляет его тому, кто этот self-destruct вызвал.

2432
02:10:25,820 --> 02:10:29,500
Ну, то есть, по сути, вычеркивает отсюда полностью, как бы вот такой контракт.

2433
02:10:29,500 --> 02:10:34,900
полностью вот эту строку, весь эфир возвращает тому,

2434
02:10:34,900 --> 02:10:39,180
кто этот селл-дистракт, не тому, кто вызвал, а на самом деле,

2435
02:10:39,400 --> 02:10:42,520
то есть вызывающий селл-дистракт должен позаботиться о том,

2436
02:10:42,600 --> 02:10:45,580
кому отправить эфир, если он здесь есть, конечно.

2437
02:10:48,500 --> 02:10:53,100
По поводу селл-дистракта идут очень жаркие споры,

2438
02:10:53,240 --> 02:10:55,080
и, скорее всего, его скоро выпилят.

2439
02:10:55,480 --> 02:10:57,840
То есть его просто не будет, его просто не будет.

2440
02:10:57,840 --> 02:11:00,140
Конечно, хотелось бы экономить место в блокчейне,

2441
02:11:00,260 --> 02:11:02,360
вот такие вот контракты выпиливать,

2442
02:11:03,220 --> 02:11:07,840
но это создает очень серьезные проблемы для работы нод,

2443
02:11:08,240 --> 02:11:11,800
потому что нода качает новые блоки, качает новые блоки,

2444
02:11:11,860 --> 02:11:14,640
она тратит свои силы на поддержание стейта,

2445
02:11:15,100 --> 02:11:17,000
здесь контракт жив, здесь контракт жив,

2446
02:11:17,580 --> 02:11:20,860
а пользователь говорит, какой там мой баланс в этом контракте,

2447
02:11:21,400 --> 02:11:23,660
а нода еще не догнала до нового блока,

2448
02:11:23,660 --> 02:11:27,820
и она не знает, вдруг здесь будет селл-дистракт этого контракта,

2449
02:11:27,900 --> 02:11:31,300
может, я ему вообще должна ошибку или ноль выдать,

2450
02:11:31,780 --> 02:11:35,640
а я еще не знаю, возможно, в следующем блоке будет селл-дистракт,

2451
02:11:35,780 --> 02:11:39,180
и она тратит свои силы на то, чтобы индексировать эту всю штуку.

2452
02:11:39,820 --> 02:11:43,900
Гораздо проще было бы вообще не иметь возможности удалять,

2453
02:11:44,220 --> 02:11:48,480
пускай все там живет, и ничего не меняется.

2454
02:11:49,120 --> 02:11:53,920
Вообще, опять же, в базах данных сама инструкция делит,

2455
02:11:53,920 --> 02:11:57,380
она довольно коварная, то есть кажется, что там все просто,

2456
02:11:57,380 --> 02:12:00,280
как бы, удалить данные, но, на самом деле, если вы начнете думать о том,

2457
02:12:00,280 --> 02:12:07,480
как работают всякие сложные выборки, которые там работают с тысячами строк и так далее,

2458
02:12:07,480 --> 02:12:13,380
то, на самом деле, окажется, что делит операция крайне сложная.

2459
02:12:13,760 --> 02:12:17,760
И, как ни странно, внутри многих движков она реализуется при помощи инсертов.

2460
02:12:18,760 --> 02:12:23,560
То есть строка заменяется на новую версию, как бы пустую,

2461
02:12:23,960 --> 02:12:27,320
то есть которой там нету, ну, в общем, много всяких,

2462
02:12:27,320 --> 02:12:32,320
тонкостей, как бы, в общем, удаление штука такая довольно коварная.

2463
02:12:32,320 --> 02:12:36,320
Как можно выпилить self-destruct? Это же нарушится обратная совместимость.

2464
02:12:37,320 --> 02:12:41,080
Ну, да, там для некоторых проектов обратная совместимость нарушится.

2465
02:12:41,080 --> 02:12:44,560
Да, есть такое дело, вот, но, как бы, эфир хочет на это пойти,

2466
02:12:44,560 --> 02:12:53,320
потому что без self-destruct невозможны дальнейшие, как бы, улучшения работы нод, вот.

2467
02:12:53,320 --> 02:12:57,220
Ну, потому что из-за того, что, как бы, возможно, что контракт вдруг к какому-то блоке

2468
02:12:57,320 --> 02:13:04,320
неожиданно исчезнет, создает очень много, как бы, проблем и там всяких ифов именно в коде,

2469
02:13:04,320 --> 02:13:06,320
именно в коде нод.

2470
02:13:06,320 --> 02:13:13,320
Потом старается, держит его state, короче говоря, там, ну, там, следит за его, там, состоянием, как бы,

2471
02:13:13,320 --> 02:13:17,320
а потом он взял, короче говоря, и, как бы, сделал self-destruct.

2472
02:13:17,320 --> 02:13:23,320
И, начиная с определенного блока, один и тот же запрос по адресу контракта, который, там, например,

2473
02:13:23,320 --> 02:13:26,320
там, его код запрашивает или его какое-нибудь состояние, как бы,

2474
02:13:27,320 --> 02:13:34,320
может работать, и ноде, как бы, непонятно, чего отвечать, как бы, то ли это, как бы, то ли это, вот.

2475
02:13:34,320 --> 02:13:37,320
В общем, это довольно сильно, как бы, мешает.

2476
02:13:37,320 --> 02:13:42,320
Вот, если бы его не было, как бы, то, если бы все контракты навеки, как бы, всегда прибиты, как бы,

2477
02:13:42,320 --> 02:13:45,320
гвоздями в блокчейне, то было бы проще.

2478
02:13:45,320 --> 02:13:48,320
С обычными адресами, которые не смысл контракта, так и происходит, да?

2479
02:13:48,320 --> 02:13:50,320
Их нельзя удалить.

2480
02:13:50,320 --> 02:13:57,320
Да, да, да, их нельзя удалить, они так, ну, здесь вообще все, как бы, остается, остается навсегда, вот.

2481
02:13:57,320 --> 02:14:04,320
Просто так, как бы, обойти это нельзя, как бы, но можно при помощи криптографических протоколов разработать софт,

2482
02:14:04,320 --> 02:14:12,320
там, типа ноды, которые ведут только часть, ну, по сути, как бы, которые ведут только контрольные суммы всего этого.

2483
02:14:12,320 --> 02:14:16,320
То есть у них, по сути, есть доказательство, что действительно байткод по такому-то адресу,

2484
02:14:16,320 --> 02:14:25,320
оно имеет вот такой вот хэш криптографический, что действительно баланс, короче, этого пользователя, вот, там, скажем, как бы, такой,

2485
02:14:25,320 --> 02:14:27,320
но при этом сами данные они не держат.

2486
02:14:27,320 --> 02:14:28,320
Вот.

2487
02:14:28,320 --> 02:14:37,320
И, по сути, вот эта часть нод будет обеспечивать безопасность сети, а те, кому, как бы, нужен конкретно, там, сам код в процессе транзакции и так далее,

2488
02:14:37,320 --> 02:14:44,320
это будут уже, там, дополнительные сервисы, дополнительные типы нод, там, в общем, это долго еще рассказать.

2489
02:14:44,320 --> 02:14:52,320
Если прям очень интересно, то читайте, как выглядит эфир 2.0, там, все его, как бы, основные, как бы, механизмы.

2490
02:14:52,320 --> 02:14:56,320
На самом деле, там, очень много сделано и очень хорошо.

2491
02:14:57,320 --> 02:14:58,320
Вот.

2492
02:14:58,320 --> 02:15:00,320
Они очень внимательные.

2493
02:15:00,320 --> 02:15:01,320
Вот.

2494
02:15:01,320 --> 02:15:02,320
Так.

2495
02:15:02,320 --> 02:15:03,320
Окей.

2496
02:15:03,320 --> 02:15:04,320
Поехали дальше.

2497
02:15:04,320 --> 02:15:07,320
Значит, про цену чуть-чуть поговорили.

2498
02:15:07,320 --> 02:15:18,320
Соответственно, про, тоже, если дальше, как бы, говорить, там, про цены, то у нас есть у Hard Limit блока.

2499
02:15:18,320 --> 02:15:25,320
И, как я говорил, когда мы у нас сильно, ну, сильно забитые, сильно забитые цены.

2500
02:15:25,320 --> 02:15:26,320
Да.

2501
02:15:26,320 --> 02:15:36,320
Сильно забитый блокчейн, прям, вот, прям, не знаю, на 100%, как бы, все, все там забито, то вверх идут комиссии.

2502
02:15:36,320 --> 02:15:44,320
Они теперь, они теперь, по сути, как бы, используются чуть-чуть похитрее, чем раньше.

2503
02:15:44,320 --> 02:15:55,320
То есть, есть, ну, случился Е1559 Hard Fork, это было в августе 21 года, после которого было запрещено.

2504
02:15:55,320 --> 02:15:58,320
Ну, то есть, например, ставить, как бы, цену газа ноль.

2505
02:15:58,320 --> 02:16:05,320
То есть, раньше вы, в принципе, могли в теории, как бы, создать, как бы, транзакцию и сказать, цена газа ноль, стоит она ноль, как бы, пожалуйста, как бы.

2506
02:16:05,320 --> 02:16:07,320
Ну, то есть, никто не запрещал.

2507
02:16:07,320 --> 02:16:16,320
Понятно, что никто вашу транзакцию майнить не будет, она никому не нужна, но, тем не менее, в блоках таких транзакций было дофига с нулевой ценой.

2508
02:16:16,320 --> 02:16:17,320
Что это было?

2509
02:16:17,320 --> 02:16:23,320
Это были майнеры, которые одновременно трейдеры, и они, чтобы не запариваться, как бы, просто вставляли, как бы, транзакции с нулевым газом.

2510
02:16:23,320 --> 02:16:24,320
Да.

2511
02:16:24,320 --> 02:16:26,320
Транзакции с нулевым газ-прайсом свои собственные.

2512
02:16:26,320 --> 02:16:32,320
То есть, могу ставить, могу, как бы, беру, доставляю, как бы, и все, и не волнуюсь газ-прайсом.

2513
02:16:32,320 --> 02:16:41,320
Вот, про это тоже будет достаточно богатый разговор, про майнер extractable value, как раз про который докладывал я недавно.

2514
02:16:41,320 --> 02:16:47,320
Вот, там все очень интересно, вот с тем, как борются за включение транзакций в блок.

2515
02:16:47,320 --> 02:16:53,320
Там все гораздо интереснее, нежели в white paper написано, типа, поставил больше денег, тебя быстрее замайнят.

2516
02:16:53,320 --> 02:16:54,320
Вот это вот.

2517
02:16:54,320 --> 02:16:55,320
Не всегда так работает.

2518
02:16:55,320 --> 02:16:59,320
Значит, запретили вот этот вот нулевой газ-прайс.

2519
02:16:59,320 --> 02:17:09,320
Сказали, что есть специальная такая base fee, то есть минимальная цена за газ, которая зависит от вот этой заполняемости блока.

2520
02:17:09,320 --> 02:17:14,320
То есть, блоки забиты на 100%, base fee растет вверх.

2521
02:17:14,320 --> 02:17:20,320
Типа, ребята, sorry, блок-чейн весь забит, как бы, к черту, как бы, давайте, как бы, больше платите, больше денег.

2522
02:17:20,320 --> 02:17:21,320
Вот.

2523
02:17:21,320 --> 02:17:23,320
Потом, как бы, деньги растут вверх.

2524
02:17:23,320 --> 02:17:28,320
Блок перестает заполняться, например, там, на 50%, как бы, он заполнен.

2525
02:17:28,320 --> 02:17:30,320
Он, как бы, идет вниз.

2526
02:17:30,320 --> 02:17:34,320
Вот это вот то, что я говорю, заполнен, измеряется, как вы думаете, в чем?

2527
02:17:34,320 --> 02:17:37,320
Ну, в чем удобно измерять заполняемость блока?

2528
02:17:41,320 --> 02:17:43,320
В мегабайтах?

2529
02:17:43,320 --> 02:17:46,320
Ну, в долях, в количествах чего-то.

2530
02:17:46,320 --> 02:17:48,320
Не-не-не, неудобно.

2531
02:17:48,320 --> 02:17:50,320
Удобнее всего измерять в газе.

2532
02:17:50,320 --> 02:17:52,320
У нас есть...

2533
02:17:52,320 --> 02:17:57,320
У нас есть уже, как бы, универсальный, универсальный, по сути, счетчик.

2534
02:17:57,320 --> 02:18:01,320
Счетчик, считающий, как бы, кванты, как бы, исполнения.

2535
02:18:01,320 --> 02:18:07,320
Чтобы мы не перегрузили, как бы, майнеров, не вставляли в блок, там, какое-то безумное количество транзакций.

2536
02:18:07,320 --> 02:18:09,320
Не замедляли процессинг и так далее.

2537
02:18:09,320 --> 02:18:12,320
У нас есть, по сути, универсальный измеритель, газ.

2538
02:18:12,320 --> 02:18:17,320
Мы взяли первую транзакцию, вторую транзакцию, третью транзакцию.

2539
02:18:17,320 --> 02:18:21,320
У нас есть вот этот большой, так называемый, ну, там, hard limit.

2540
02:18:21,320 --> 02:18:23,320
Его по-разному используют.

2541
02:18:23,320 --> 02:18:32,320
Говорят, что hard limit — это константы, которые в одной транзакции не позволяют потратить, там, ну, скажем, там, больше десяти, там, не знаю, миллионов, короче, газа.

2542
02:18:32,320 --> 02:18:34,320
Но и, как бы, для блока тоже говорят.

2543
02:18:34,320 --> 02:18:41,320
То есть есть hard limit, там, не знаю, там, две тысячи, две тысячи транзакций умножить на текущий hard limit.

2544
02:18:41,320 --> 02:18:46,320
Вот столько газа, как бы, максимум, как бы, может быть, может находиться в блоке.

2545
02:18:46,320 --> 02:18:48,320
Вот этот hard limit, он тоже тюнится.

2546
02:18:48,320 --> 02:18:49,320
Тоже динамический.

2547
02:18:49,320 --> 02:18:50,320
В зависимости от заполняемости.

2548
02:18:51,320 --> 02:18:52,320
В зависимости от заполняемости блока.

2549
02:18:52,320 --> 02:18:53,320
Вот.

2550
02:18:53,320 --> 02:18:56,320
То есть, там, где-то здесь, там, может уменьшается, здесь, там, он увеличивается.

2551
02:18:56,320 --> 02:18:59,320
То есть, там, целая, как бы, модель такая большая.

2552
02:18:59,320 --> 02:19:03,320
На нее, в общем, можно, на нее можно посмотреть.

2553
02:19:03,320 --> 02:19:04,320
Вот.

2554
02:19:04,320 --> 02:19:11,320
То есть здесь вопрос с комиссиями, он здесь, как бы, такой очень глубокий, там, умный.

2555
02:19:11,320 --> 02:19:14,320
За ним, там, много всякой экономики, как бы, построено.

2556
02:19:14,320 --> 02:19:20,320
Раньше эфир просто за каждый блок печатал, там, сколько-то, как бы, эфира майнеру.

2557
02:19:20,320 --> 02:19:28,320
Плюс, как бы, ему, там, назначал, ну, плюс он плюсовал, как бы, фи, то есть, комиссии

2558
02:19:28,320 --> 02:19:29,320
с транзакцией.

2559
02:19:29,320 --> 02:19:32,320
Сейчас все сделано, как бы, по-другому.

2560
02:19:32,320 --> 02:19:36,320
То есть, теперь у него есть, там, базовая штука, у него есть комиссии с транзакцией.

2561
02:19:36,320 --> 02:19:39,320
Плюс еще часть эфира сжигается.

2562
02:19:39,320 --> 02:19:44,320
И сжигается она, как раз, по-моему, в том случае, если есть какой-то недобор в блоке.

2563
02:19:44,320 --> 02:19:49,320
То есть, как бы, народ перестает пользоваться эфиром.

2564
02:19:49,320 --> 02:19:51,320
Значит, он какой-то, там, менее ценный, как бы.

2565
02:19:51,320 --> 02:19:55,320
Значит, надо общее количество эфира уменьшить.

2566
02:19:55,320 --> 02:19:57,320
То есть, просто начать его сжигать.

2567
02:19:57,320 --> 02:19:59,320
Его будет становиться меньше.

2568
02:19:59,320 --> 02:20:03,320
Это будет дефляция, и, как бы, цена эфира поэтому пойдет вверх, как бы.

2569
02:20:03,320 --> 02:20:10,320
Они, там, ну, в общем, тут, чтобы просто не дезинформировать вас именно, как бы, фактами.

2570
02:20:10,320 --> 02:20:12,320
Но самое главное, что эта модель, она, прям, динамическая.

2571
02:20:12,320 --> 02:20:15,320
И там, конечно, обоснованы все эти, все эти истории.

2572
02:20:15,320 --> 02:20:18,320
Можно почитать в ЯИПах, почему так было предложено.

2573
02:20:18,320 --> 02:20:20,320
И это довольно грамотно сделано.

2574
02:20:20,320 --> 02:20:25,320
То есть, сейчас эфир, как бы, такая очень развитая финансовая система.

2575
02:20:25,320 --> 02:20:28,320
Вот.

2576
02:20:28,320 --> 02:20:34,320
Дальше, ну, дальше уже, в принципе, такой, как бы, халявный, достаточно, как бы, кусок.

2577
02:20:34,320 --> 02:20:37,320
Мы с вами на Etherscan, как бы, посидели.

2578
02:20:37,320 --> 02:20:41,320
Сейчас еще чуть-чуть посидим, посмотрим, как бы, как смотреть всякие транзакции.

2579
02:20:41,320 --> 02:20:43,320
Что у них есть.

2580
02:20:43,320 --> 02:20:47,320
Затем я покажу, как примерно выглядит, как бы, там, не знаю.

2581
02:20:47,320 --> 02:20:49,320
Там, разработка.

2582
02:20:49,320 --> 02:20:51,320
Мы будем использовать HardHat.

2583
02:20:51,320 --> 02:20:54,320
Есть такой фреймворк, очень удобный для разработки.

2584
02:20:54,320 --> 02:20:59,320
На самом деле, подсолидить их, прям, несколько штук, там, три, четыре, пять.

2585
02:20:59,320 --> 02:21:01,320
Здесь очень много, как бы, всего.

2586
02:21:01,320 --> 02:21:04,320
Чуть-чуть полазим по разному, там, коду.

2587
02:21:04,320 --> 02:21:05,320
Вот.

2588
02:21:05,320 --> 02:21:06,320
Там, про Flow поговорим.

2589
02:21:06,320 --> 02:21:11,320
То есть, сейчас уже, такой, более, более обзорная часть лекции.

2590
02:21:11,320 --> 02:21:15,320
Etherscan'ом пользуются, наверное, как бы, все, практически, как бы, постоянно.

2591
02:21:15,320 --> 02:21:22,320
Как вы понимаете, это, по сути, как бы, архивная, ну, сервис, который, как бы, бегает в архивные ноды.

2592
02:21:22,320 --> 02:21:26,320
Собирает огромное количество разной информации.

2593
02:21:26,320 --> 02:21:28,320
Размечает адреса.

2594
02:21:28,320 --> 02:21:30,320
То есть, например, он там.

2595
02:21:30,320 --> 02:21:35,320
Вот здесь мы видим, что вот этот адрес называется в RapidEther.

2596
02:21:35,320 --> 02:21:37,320
То есть, что это его, что он является токеном.

2597
02:21:37,320 --> 02:21:40,320
Что это, как бы, контракт токена.

2598
02:21:40,320 --> 02:21:44,320
При этом Etherscan, как бы, понимает, как читать этот контракт, как писать этот контракт.

2599
02:21:45,320 --> 02:21:52,320
Отдельного слова, наверное, как бы, заслуживает вот эта вот штука, что я вам показываю исходник.

2600
02:21:52,320 --> 02:21:55,320
Исходник этого смарт-контракта.

2601
02:21:55,320 --> 02:21:57,320
Откуда исходник взялся?

2602
02:21:57,320 --> 02:22:05,320
Ну, то есть, вроде бы, как чувак задеплоил этот, значит, в RapidEther вот его там адрес.

2603
02:22:05,320 --> 02:22:07,320
Вот его код.

2604
02:22:07,320 --> 02:22:08,320
Это машинные инструкции.

2605
02:22:08,320 --> 02:22:13,320
То есть, если вы просто сюда заглянете, там будет, по сути, его байт-код.

2606
02:22:13,320 --> 02:22:14,320
Вот он.

2607
02:22:14,320 --> 02:22:15,320
Так, creation-код.

2608
02:22:15,320 --> 02:22:18,320
Вот так вот он выглядит в машинных инструкциях.

2609
02:22:18,320 --> 02:22:22,320
Вот там, там, вот так вот.

2610
02:22:22,320 --> 02:22:26,320
Откуда взялся у нас исходный код?

2611
02:22:26,320 --> 02:22:30,320
Для этого, как бы, используется, так называемая, верификация смарт-контракта.

2612
02:22:30,320 --> 02:22:36,320
Вы можете прийти на вот этот адрес, на котором не будет вот этого исходного кода.

2613
02:22:36,320 --> 02:22:40,320
И сказать, я знаю такой исходник.

2614
02:22:40,320 --> 02:22:42,320
Я знаю такой исходник, как бы, который...

2615
02:22:42,320 --> 02:22:44,320
Получается...

2616
02:22:44,320 --> 02:22:47,320
Ну, из которого скомпилирован вот этот вот байт-код.

2617
02:22:47,320 --> 02:22:50,320
Это уже чисто централизованный, как бы, сервис.

2618
02:22:50,320 --> 02:22:52,320
Вы заходите на Etherscan.

2619
02:22:52,320 --> 02:22:54,320
Заливаете туда прямо вот этот текст.

2620
02:22:54,320 --> 02:22:55,320
Вот.

2621
02:22:55,320 --> 02:22:56,320
Видите?

2622
02:22:56,320 --> 02:22:58,320
Даже с этим самым, с лицензионным соглашением.

2623
02:22:58,320 --> 02:23:02,320
Которое понятно и никаким образом в байт-коде, как бы, вот здесь вот не представлено.

2624
02:23:02,320 --> 02:23:05,320
Вы заливаете туда этот текст.

2625
02:23:05,320 --> 02:23:07,320
Что делает Etherscan?

2626
02:23:07,320 --> 02:23:08,320
Он его компилирует.

2627
02:23:08,320 --> 02:23:10,320
Ваш вот этот текст.

2628
02:23:10,320 --> 02:23:11,320
А...

2629
02:23:11,320 --> 02:23:13,320
На самом деле убирает, как бы, еще там конструктор.

2630
02:23:13,320 --> 02:23:16,320
Потому что конструктор не включается, как бы, в байт-код.

2631
02:23:16,320 --> 02:23:19,320
И сравнивает с тем, что находится в блокчейне.

2632
02:23:19,320 --> 02:23:22,320
Вот там вот, собственно, вот с этой вот штукой.

2633
02:23:22,320 --> 02:23:25,320
Там где-то вот здесь вот, там, типа, код конструктора.

2634
02:23:25,320 --> 02:23:28,320
Вначале заканчивается, как бы, и начинается сам код контракта.

2635
02:23:28,320 --> 02:23:33,320
Вот он сравнивает, действительно ли из вашего исходника получился в точности вот этот вот байт-код.

2636
02:23:33,320 --> 02:23:36,320
И если он получился, как бы, то...

2637
02:23:36,320 --> 02:23:38,320
Ну, это все хорошо.

2638
02:23:38,320 --> 02:23:39,320
Вот.

2639
02:23:39,320 --> 02:23:40,320
А...

2640
02:23:40,320 --> 02:23:42,320
Еще вторая, как бы, важная штуковина контракта.

2641
02:23:42,320 --> 02:23:45,320
Это так называемая ABI.

2642
02:23:45,320 --> 02:23:47,320
То есть смарт-контракты в эфире.

2643
02:23:47,320 --> 02:23:52,320
Они ходят, по сути, для того, чтобы вы могли построить DAP.

2644
02:23:52,320 --> 02:23:53,320
Который...

2645
02:23:53,320 --> 02:23:55,320
Приложение, которое работает со смарт-контрактом.

2646
02:23:55,320 --> 02:23:58,320
Вам же нужно знать вот эти все интерфейсы, функции.

2647
02:23:58,320 --> 02:24:00,320
Что принимает депозит?

2648
02:24:00,320 --> 02:24:01,320
Что принимает withdraw?

2649
02:24:01,320 --> 02:24:03,320
Какой тип аргументов?

2650
02:24:03,320 --> 02:24:04,320
Какие из них пишущие?

2651
02:24:04,320 --> 02:24:05,320
Какие из них читающие?

2652
02:24:05,320 --> 02:24:07,320
Там и так далее.

2653
02:24:07,320 --> 02:24:09,320
И эта информация, этот интерфейс, как бы...

2654
02:24:09,320 --> 02:24:12,320
Он представляется в формате ABI.

2655
02:24:12,320 --> 02:24:14,320
Application Binary Interface.

2656
02:24:14,320 --> 02:24:15,320
Вот.

2657
02:24:15,320 --> 02:24:18,320
И здесь, в общем-то, описаны все функции.

2658
02:24:18,320 --> 02:24:23,320
Ну, то есть там написано, там, не знаю, там...

2659
02:24:23,320 --> 02:24:27,320
Где там функция какая-нибудь.

2660
02:24:27,320 --> 02:24:29,320
Ну, короче...

2661
02:24:29,320 --> 02:24:32,320
Я хотел найти какой-нибудь там депозит.

2662
02:24:32,320 --> 02:24:33,320
Депозит.

2663
02:24:33,320 --> 02:24:36,320
Name.

2664
02:24:36,320 --> 02:24:37,320
Payable.

2665
02:24:37,320 --> 02:24:38,320
Ну, в общем...

2666
02:24:38,320 --> 02:24:47,320
Вот здесь вот как бы прописаны все функции данного контракта и типы их параметров.

2667
02:24:47,320 --> 02:24:51,320
То есть здесь внутри где-то как бы зашита функция transfer.

2668
02:24:51,320 --> 02:24:55,320
И мы знаем, что для того, чтобы перевести эти токены к кому-то другому,

2669
02:24:55,320 --> 02:25:02,320
мы должны передать адрес назначения и количество токенов, которые мы должны передать.

2670
02:25:02,320 --> 02:25:03,320
Вот.

2671
02:25:03,320 --> 02:25:05,320
И это описывается вот в этом ABI.

2672
02:25:05,320 --> 02:25:07,320
Ты его подключаешь к JavaScript.

2673
02:25:07,320 --> 02:25:13,320
Это ABI, как бы ты его засовываешь, как бы, там, не знаю, там, в свой скрипт на Python, который общается с контрактом.

2674
02:25:13,320 --> 02:25:18,320
И у тебя появляется, по сути, такой объектный интерфейс к твоему контракту.

2675
02:25:18,320 --> 02:25:19,320
Вот.

2676
02:25:19,320 --> 02:25:28,320
То есть как он там преобразуется в вызовы тоже будет рассказано, когда там низкоуровневые всякие будут смотреть штуки по обращению к контракту.

2677
02:25:28,320 --> 02:25:29,320
Вот.

2678
02:25:29,320 --> 02:25:32,320
Это значит то, что касается ABI.

2679
02:25:32,320 --> 02:25:35,320
Затем, если посмотреть на этот...

2680
02:25:35,320 --> 02:25:36,320
Ну, опять же, как бы...

2681
02:25:36,320 --> 02:25:39,320
На общение с контрактом в RapidEther.

2682
02:25:39,320 --> 02:25:43,320
Это токен такой, как бы, не знаю, там...

2683
02:25:43,320 --> 02:25:48,320
То есть вы можете на своем балансе иметь там сколько-то в RapidEther.

2684
02:25:48,320 --> 02:25:58,320
То здесь есть, например, передача, вкладка, короче, ERC-20 Token Transfers.

2685
02:25:58,320 --> 02:26:05,320
То есть которая покажет, как бы, все транзакции, в которых кто-то кому-то какое-то количество вот этого в RapidEther передал.

2686
02:26:06,320 --> 02:26:14,320
То есть там вот этот парень, как бы, передал там один эфир и, короче говоря...

2687
02:26:14,320 --> 02:26:21,320
А, передал там, не знаю, там один токен Uniswap там кому-нибудь там вот этому в RapidEther.

2688
02:26:21,320 --> 02:26:23,320
Да, непонятно почему.

2689
02:26:23,320 --> 02:26:25,320
Или...

2690
02:26:25,320 --> 02:26:27,320
А, ну это я сейчас...

2691
02:26:27,320 --> 02:26:29,320
Это я с контрактом.

2692
02:26:29,320 --> 02:26:31,320
Значит, как вот эти вот штуки сделаны?

2693
02:26:31,320 --> 02:26:34,320
ERC-721, ERC-1155, короче говоря.

2694
02:26:34,320 --> 02:26:35,320
Как вот эти трансферы сделаны?

2695
02:26:35,320 --> 02:26:43,320
Как вы думаете, что парсит EtherScan для того, чтобы показать, как бы, что токены были переданы?

2696
02:26:43,320 --> 02:26:47,320
Какие данные контракта?

2697
02:26:47,320 --> 02:26:50,320
Вот он показывает все операции в RapidEther.

2698
02:26:50,320 --> 02:26:56,320
Ну, там, все оперирования, как бы, в RapidEther.

2699
02:26:56,320 --> 02:26:58,320
Либо транзакции, либо его лог.

2700
02:26:58,320 --> 02:27:02,320
Ну, правильный ответ именно лог.

2701
02:27:02,320 --> 02:27:04,320
То есть, на самом деле, как бы, не транзакции.

2702
02:27:04,320 --> 02:27:11,320
А вот то, что мы с вами как раз говорили вот про вот эти вот ивенты.

2703
02:27:11,320 --> 02:27:16,320
В стандарте токена записано, что после того, как токены были переданы,

2704
02:27:16,320 --> 02:27:21,320
в случае успеха обязательно в логе должно появляться вот такое событие определенного вида,

2705
02:27:21,320 --> 02:27:27,320
которое называется трансфер с параметрами от кого, кому и какое количество.

2706
02:27:27,320 --> 02:27:28,320
Вот.

2707
02:27:28,320 --> 02:27:31,320
EtherScan, по сути, как бы, висит постоянно на блокчейне,

2708
02:27:31,320 --> 02:27:33,320
постоянно слушает вот эти вот события трансфера.

2709
02:27:33,320 --> 02:27:35,320
Из разных токенов.

2710
02:27:35,320 --> 02:27:38,320
И как только такое событие встречает,

2711
02:27:38,320 --> 02:27:42,320
он, соответственно, у нас вот здесь вот эту транзакцию показывает.

2712
02:27:42,320 --> 02:27:46,320
Там сохраняет, индексирует, там, и так далее, и так далее.

2713
02:27:46,320 --> 02:27:49,320
Все для этого, как бы, нужны ивенты.

2714
02:27:49,320 --> 02:27:51,320
Вот.

2715
02:27:51,320 --> 02:27:53,320
Ну, какой там еще, может, там...

2716
02:27:53,320 --> 02:27:55,320
Еще может какой-нибудь токен показать.

2717
02:27:55,320 --> 02:27:57,320
Ну, точнее, если... Давайте вот так вот.

2718
02:27:57,320 --> 02:28:02,320
Авиа V2, лендинг пулк.

2719
02:28:02,320 --> 02:28:05,320
Ну, это такой, как бы, большой очень...

2720
02:28:05,320 --> 02:28:09,320
Очень большой контракт здоровый.

2721
02:28:11,320 --> 02:28:15,320
Вот так, сейчас я найду implementation.

2722
02:28:15,320 --> 02:28:17,320
Implementation должно быть здесь.

2723
02:28:17,320 --> 02:28:19,320
Прокси.

2724
02:28:19,320 --> 02:28:21,320
Не, ладно, посмотрим.

2725
02:28:24,320 --> 02:28:26,320
Так, не авиа...

2726
02:28:26,320 --> 02:28:28,320
Под словом токен, что имеется в виду?

2727
02:28:28,320 --> 02:28:29,320
А?

2728
02:28:29,320 --> 02:28:31,320
Под словом токен, что имеется в виду?

2729
02:28:32,320 --> 02:28:36,320
Мы с вами активно это разберем.

2730
02:28:36,320 --> 02:28:39,320
Прям контракт токена будем здорово разбирать.

2731
02:28:39,320 --> 02:28:43,320
По сути, под словом токеном подразумевается контракт,

2732
02:28:43,320 --> 02:28:46,320
в котором есть функция transfer,

2733
02:28:46,320 --> 02:28:49,320
в котором есть функция balance.

2734
02:28:49,320 --> 02:28:50,320
Balance...

2735
02:28:50,320 --> 02:28:52,320
Balance of.

2736
02:28:52,320 --> 02:28:55,320
Есть стандарт, который говорит, какие функции должны быть там.

2737
02:28:55,320 --> 02:28:57,320
Transfer from.

2738
02:28:57,320 --> 02:28:58,320
Там есть несколько функций.

2739
02:28:58,320 --> 02:29:01,320
Есть прям стандарт, который называется ERC20.

2740
02:29:01,320 --> 02:29:04,320
Вот прям, по сути, как бы стандарт, который говорит,

2741
02:29:04,320 --> 02:29:07,320
что контракт токена должен иметь вот эти функции,

2742
02:29:07,320 --> 02:29:09,320
а работает он следующим образом.

2743
02:29:09,320 --> 02:29:12,320
Он, по сути, изображает из себя, как бы, криптовалюту.

2744
02:29:12,320 --> 02:29:13,320
В точности, как эфир.

2745
02:29:13,320 --> 02:29:16,320
То есть, токен это такой минимальный, как бы, контракт,

2746
02:29:16,320 --> 02:29:20,320
который говорит, что у Васи там 100 токенов,

2747
02:29:20,320 --> 02:29:24,320
а у Пети там 200 токенов.

2748
02:29:24,320 --> 02:29:26,320
В своем сторидже.

2749
02:29:26,320 --> 02:29:28,320
Вот это вот очень важно, как бы.

2750
02:29:28,320 --> 02:29:30,320
То, что он, как бы, эти балансы держит.

2751
02:29:31,320 --> 02:29:33,320
В своем сторидже.

2752
02:29:33,320 --> 02:29:36,320
И когда делается трансфер, соответственно, там,

2753
02:29:36,320 --> 02:29:39,320
у Васи там списали 20, этому добавили 20.

2754
02:29:39,320 --> 02:29:42,320
Пишет этот токен программист.

2755
02:29:42,320 --> 02:29:43,320
Вот.

2756
02:29:43,320 --> 02:29:46,320
Но зато все, как бы, могут зайти в этот контракт

2757
02:29:46,320 --> 02:29:48,320
и убедиться, что у него здесь в трансфере нету, там,

2758
02:29:48,320 --> 02:29:52,320
какого-нибудь трояна, который позволит ему взять, короче,

2759
02:29:52,320 --> 02:29:55,320
и у кого угодно, там, не знаю, токены на свой адрес перевести,

2760
02:29:55,320 --> 02:29:56,320
утащить, как бы.

2761
02:29:56,320 --> 02:29:58,320
Есть, как бы, и такие затроянные токены.

2762
02:29:58,320 --> 02:30:01,320
То есть, это контракт, который удовлетворяет вот этим,

2763
02:30:01,320 --> 02:30:04,320
как бы, стандартам и ведет себя, как криптовалюта.

2764
02:30:04,320 --> 02:30:07,320
Ну, то есть, у него есть балансы, как бы, представляет собой,

2765
02:30:07,320 --> 02:30:09,320
там, что-то типа, там, денег и так далее.

2766
02:30:09,320 --> 02:30:13,320
Вот на этих токенах строится практически вся, как бы,

2767
02:30:13,320 --> 02:30:14,320
экосистема.

2768
02:30:14,320 --> 02:30:17,320
Такой, как бы, базовый кирпичик, из которого это строится.

2769
02:30:17,320 --> 02:30:18,320
Вот.

2770
02:30:18,320 --> 02:30:21,320
Мы будем, будем очень подробно, как бы, про это смотреть.

2771
02:30:21,320 --> 02:30:23,320
Вот.

2772
02:30:23,320 --> 02:30:29,320
Это, по сути, ну, как бы, когда, как бы, эфир появился,

2773
02:30:29,320 --> 02:30:36,320
начались же вот это, началась эпоха, как бы, ICO, краудфандинга.

2774
02:30:36,320 --> 02:30:40,320
И ICO-шный контракт, он обычно работал следующим образом.

2775
02:30:40,320 --> 02:30:45,320
То есть, есть какая-то цена, например, ну, например,

2776
02:30:45,320 --> 02:30:51,320
я говорю, я делаю специальную криптовалюту, токен, значит,

2777
02:30:51,320 --> 02:30:54,320
у кого есть один токен, то, значит, один час, как бы,

2778
02:30:54,320 --> 02:30:57,320
может на моих, там, самокатах кататься.

2779
02:30:57,320 --> 02:30:58,320
Вот.

2780
02:30:58,320 --> 02:31:00,320
Токен равно один час, как бы, на моих самокатах.

2781
02:31:00,320 --> 02:31:03,320
И пытаюсь убедить людей накидать мне на это денег.

2782
02:31:03,320 --> 02:31:08,320
Я создаю цену, там, цена, которая делает, как бы,

2783
02:31:08,320 --> 02:31:11,320
эфир на мой, там, какой-нибудь самокат-токен.

2784
02:31:11,320 --> 02:31:12,320
Вот.

2785
02:31:12,320 --> 02:31:16,320
Приходит чувак, кидает, как бы, десять эфира, хочет

2786
02:31:16,320 --> 02:31:20,320
очень кататься на самокате, и в ответ, и мой вот этот

2787
02:31:20,320 --> 02:31:23,320
вот смарт-контракт, то есть он там вызывает функцию

2788
02:31:23,320 --> 02:31:26,320
депозит, короче говоря, или там функцию, там, какую-нибудь,

2789
02:31:26,320 --> 02:31:27,320
или просто, там, отправляет, как бы, эфир.

2790
02:31:27,320 --> 02:31:30,320
Это тоже, как бы, программируется.

2791
02:31:30,320 --> 02:31:34,320
И когда он, соответственно, эту функцию вызывает, в

2792
02:31:34,320 --> 02:31:37,320
ответ я ему в сторидже создаю запись.

2793
02:31:37,320 --> 02:31:41,320
Там, это опять Вася у нас, как бы, тебе, Вася, значит,

2794
02:31:41,320 --> 02:31:43,320
дорогой друг, двадцать токенов.

2795
02:31:43,320 --> 02:31:44,320
Сам.

2796
02:31:44,320 --> 02:31:47,320
Как бы, и Вася у себя, как бы, видит в метамаске,

2797
02:31:47,320 --> 02:31:50,320
что у меня двадцать токенов сам теперь.

2798
02:31:50,320 --> 02:31:53,320
А десять эфира, как бы, ушли, легли на баланс, как бы,

2799
02:31:53,320 --> 02:31:56,320
вот этого, на баланс этого проекта.

2800
02:31:56,320 --> 02:31:58,320
В принципе, Вася может и обратно сказать, так,

2801
02:31:58,320 --> 02:32:00,320
все, я передумал, хочу withdraw.

2802
02:32:00,320 --> 02:32:03,320
Я тебе отправляю, как бы, двадцать токенов сам,

2803
02:32:03,320 --> 02:32:05,320
а ты мне возвращай мои десять эфира.

2804
02:32:05,320 --> 02:32:07,320
И там до определенного момента это возможно.

2805
02:32:07,320 --> 02:32:14,320
А потом VCO, как бы, появил, ну, то есть сам контракт

2806
02:32:14,320 --> 02:32:15,320
является токеном.

2807
02:32:15,320 --> 02:32:18,320
То есть кто угодно может прийти, как бы, и спросить,

2808
02:32:18,320 --> 02:32:23,320
какой баланс, какой балансов у Васи.

2809
02:32:23,320 --> 02:32:24,320
И он ответит.

2810
02:32:24,320 --> 02:32:25,320
Вот.

2811
02:32:25,320 --> 02:32:26,320
И он ответит.

2812
02:32:26,320 --> 02:32:28,320
У Васи двадцать токенов.

2813
02:32:28,320 --> 02:32:32,320
Могу, кстати говоря, это даже продемонстрировать.

2814
02:32:32,320 --> 02:32:36,320
У меня в метамаске есть какие-то активы.

2815
02:32:36,320 --> 02:32:38,320
В тестовой сети.

2816
02:32:38,320 --> 02:32:40,320
Нет, по-моему, в тестовой нету.

2817
02:32:40,320 --> 02:32:42,320
Может, в Ринкебе есть.

2818
02:32:42,320 --> 02:32:43,320
Вот.

2819
02:32:43,320 --> 02:32:45,320
У меня тут много разных токенов.

2820
02:32:45,320 --> 02:32:47,320
Каких-то там многих.

2821
02:32:47,320 --> 02:32:49,320
Вот есть Юни.

2822
02:32:49,320 --> 02:32:52,320
Токен, сейчас посмотрим на него.

2823
02:32:52,320 --> 02:32:54,320
Вот он, контракт этого Юни.

2824
02:32:55,320 --> 02:32:56,320
Токена.

2825
02:32:56,320 --> 02:33:00,320
То есть вот он прям с его там трансфер, депозит.

2826
02:33:00,320 --> 02:33:02,320
Вот они все его там эти функции.

2827
02:33:02,320 --> 02:33:07,320
И я могу спросить, а сколько вот у этого чувака, возьму

2828
02:33:07,320 --> 02:33:12,320
свой адрес, вот у этого парня, 0FD, короче говоря,

2829
02:33:12,320 --> 02:33:15,320
сколько у него токенов, балансов.

2830
02:33:15,320 --> 02:33:16,320
Вот я ввожу.

2831
02:33:16,320 --> 02:33:19,320
Это как раз вот эти самые view функции читающие.

2832
02:33:19,320 --> 02:33:21,320
Спрашиваю, он мне возвращает.

2833
02:33:21,320 --> 02:33:22,320
У него шестнадцать токенов.

2834
02:33:22,320 --> 02:33:23,320
Вот.

2835
02:33:23,320 --> 02:33:26,320
Здесь видит шестнадцать и еще вот семнадцать знаков

2836
02:33:26,320 --> 02:33:27,320
после запятой.

2837
02:33:27,320 --> 02:33:28,320
Decimals.

2838
02:33:28,320 --> 02:33:29,320
Вот.

2839
02:33:29,320 --> 02:33:32,320
Я правильно понимаю, что дробные числа в блокчейне

2840
02:33:32,320 --> 02:33:35,320
представляются как числа с фиксированной точкой?

2841
02:33:35,320 --> 02:33:36,320
Да.

2842
02:33:36,320 --> 02:33:39,320
Я как раз про это на прошлой лекции говорил.

2843
02:33:39,320 --> 02:33:43,320
То есть нету никаких дробных чисел в блокчейне вообще.

2844
02:33:43,320 --> 02:33:47,320
Даже там проценты, они все равно как бы представляются

2845
02:33:47,320 --> 02:33:51,320
как бы, как вот такие вот целые, целые там по большей

2846
02:33:51,320 --> 02:33:52,320
части беззнаковые числа.

2847
02:33:52,320 --> 02:33:53,320
Вот.

2848
02:33:53,320 --> 02:33:54,320
Это все как бы из-за детерминизма.

2849
02:33:54,320 --> 02:33:55,320
То есть вы не можете операции нативные с FPU, но с плавающей

2850
02:33:55,320 --> 02:33:56,320
точкой проводить как бы на разных процессорах

2851
02:33:56,320 --> 02:33:57,320
с одними и теми же результатами.

2852
02:33:57,320 --> 02:33:58,320
Вот он.

2853
02:33:58,320 --> 02:33:59,320
Поэтому под это есть специальный библиотек.

2854
02:33:59,320 --> 02:34:00,320
Поэтому все токены, все криптовалюты, биткоины,

2855
02:34:00,320 --> 02:34:01,320
эфиры, короче говоря, какие не возьмете, как бы они

2856
02:34:01,320 --> 02:34:02,320
все вот так выглядят под капотом.

2857
02:34:02,320 --> 02:34:03,320
Как целые, которые вы делите, как бы вы делите.

2858
02:34:03,320 --> 02:34:04,320
Вот.

2859
02:34:04,320 --> 02:34:05,320
Вот.

2860
02:34:05,320 --> 02:34:06,320
Вот.

2861
02:34:06,320 --> 02:34:07,320
Вот.

2862
02:34:07,320 --> 02:34:08,320
Вот.

2863
02:34:08,320 --> 02:34:09,320
Вот.

2864
02:34:09,320 --> 02:34:10,320
Вот.

2865
02:34:10,320 --> 02:34:11,320
Вот.

2866
02:34:11,320 --> 02:34:12,320
Вот.

2867
02:34:12,320 --> 02:34:13,320
Вот.

2868
02:34:13,320 --> 02:34:14,320
Вот.

2869
02:34:14,320 --> 02:34:15,320
Вот.

2870
02:34:15,320 --> 02:34:16,320
Вот.

2871
02:34:16,320 --> 02:34:17,320
Вот.

2872
02:34:17,320 --> 02:34:18,320
Вот.

2873
02:34:18,320 --> 02:34:19,320
Вот.

2874
02:34:19,320 --> 02:34:20,320
Вот.

2875
02:34:20,320 --> 02:34:21,320
Вот.

2876
02:34:21,320 --> 02:34:22,320
Вот.

2877
02:34:22,320 --> 02:34:23,320
Вот.

2878
02:34:23,320 --> 02:34:24,320
Вот.

2879
02:34:24,320 --> 02:34:25,320
Вот.

2880
02:34:25,320 --> 02:34:26,320
Вот.

2881
02:34:26,320 --> 02:34:27,320
Вот.

2882
02:34:27,320 --> 02:34:28,320
Вот.

2883
02:34:28,320 --> 02:34:29,320
Вот.

2884
02:34:29,320 --> 02:34:30,320
Вот.

2885
02:34:30,320 --> 02:34:31,320
Вот.

2886
02:34:31,320 --> 02:34:32,320
Вот.

2887
02:34:32,320 --> 02:34:33,320
Вот.

2888
02:34:33,320 --> 02:34:34,320
Вот.

2889
02:34:34,320 --> 02:34:35,320
Вот.

2890
02:34:35,320 --> 02:34:36,320
Вот.

2891
02:34:36,320 --> 02:34:37,320
Вот.

2892
02:34:37,320 --> 02:34:38,320
Вот.

2893
02:34:38,320 --> 02:34:39,320
Вот.

2894
02:34:39,320 --> 02:34:40,320
Вот.

2895
02:34:40,320 --> 02:34:41,320
Вот.

2896
02:34:41,320 --> 02:34:42,320
Вот.

2897
02:34:42,320 --> 02:34:43,320
Вот.

2898
02:34:43,320 --> 02:34:44,320
Вот.

2899
02:34:44,320 --> 02:34:45,320
Вот.

2900
02:34:45,320 --> 02:34:46,320
Вот.

2901
02:34:46,320 --> 02:34:47,320
Вот.

2902
02:34:47,320 --> 02:34:48,320
Вот.

2903
02:34:48,320 --> 02:34:49,320
Вот.

2904
02:34:49,320 --> 02:34:56,400
то есть насколько минимально он делится вот соответственно этого да что касается как бы

2905
02:34:56,400 --> 02:35:02,860
контракта токина ну а дальше вася была просто функция как бы которая говорит

2906
02:35:02,860 --> 02:35:12,240
там типа забрать все деньги ты потом там три колма не и которая выводила весь эфир

2907
02:35:12,240 --> 02:35:18,700
который выкидали там куча вас как бы это куча этого эфира они отдавали как бы владельцу тому

2908
02:35:18,700 --> 02:35:23,060
кто-то контракт создал и вообще решил там самокатами заниматься но при этом в этой

2909
02:35:23,060 --> 02:35:28,780
функции прям публично можно было представить смарт-контракте написано типа если время как

2910
02:35:28,780 --> 02:35:37,940
бы меньше чем там декабрь короче 2018 года идите нафиг как бы эфир до этого времени я забыл забрать

2911
02:35:37,940 --> 02:35:44,800
если баланс короче говоря меньше чем 1000 эфира то есть если как бы мне накидали денег меньше чем

2912
02:35:44,800 --> 02:35:48,680
1000 эфира как бы все идите нафиг как бы то есть можете забрать свои деньги как

2913
02:35:48,680 --> 02:35:54,620
бы и выйти из если они не наберу на свой проект 1000 эфира на запах самокатов то как бы извините

2914
02:35:54,620 --> 02:36:02,740
вот такой как бы как этот kickstarter по сути как бы просто аналог kickstarter и как бы но

2915
02:36:02,740 --> 02:36:09,500
написанный в виде по 1 смарт-контракта при этом у тех кто как бы участвует у них остаются вот эти

2916
02:36:09,500 --> 02:36:15,740
вот токены баланса как бы они ими могут дальше пользоваться там как угодно и там уже миллион

2917
02:36:15,740 --> 02:36:18,480
идей там типа этими токи нами расплачиваться там за

2918
02:36:18,680 --> 02:36:27,060
не знаю там еще там смотреть там кино короче говоря собирать краудфандинг на создание фильма здесь

2919
02:36:27,060 --> 02:36:33,060
можно тоже конечно куча всяких идей там всякие там и scroll какие-нибудь там знаменитые люди которые

2920
02:36:33,060 --> 02:36:38,360
будут ставить галочки типа прошел ли проект на следующую стадию на следующей стадии можно ли

2921
02:36:38,360 --> 02:36:44,920
ему там достать следующий кусок из этих фамилий то есть очень много всего было сделано и сама идея как

2922
02:36:48,680 --> 02:36:55,340
ничего можно просто краудфандинг заниматься не выходя вообще никуда из эфира вот очень просто

2923
02:36:55,340 --> 02:37:01,580
как бы и проекта на этом многие там миллиард собрали понятно что трэша там было очень много

2924
02:37:01,580 --> 02:37:10,240
то что такое такая свобода просто конечно не дается вот это значит что касается там токенов

2925
02:37:10,240 --> 02:37:18,660
и а из рассказа давайте посмотрим теперь собственно как наверное уже немножечко прям зацепим как бы

2926
02:37:18,680 --> 02:37:27,900
разработку в которой вам придется довольно много работать я в общем-то показываю такой движок такой

2927
02:37:27,900 --> 02:37:34,920
фреймворк который называется hard head это для тех кто любит больше java script чем питон вот

2928
02:37:34,920 --> 02:37:42,980
для тех кто любит больше питон как бы есть очень похожий фреймворк называется брауни вот у меня есть

2929
02:37:42,980 --> 02:37:45,800
hard head потому что там есть там демонстрации некоторых всяких штук

2930
02:37:48,680 --> 02:37:54,560
по сути представьте что я просто решил как бы создать свой контракт не знаю там токина который

2931
02:37:54,560 --> 02:38:00,860
просто чуть-чуть поумнее там у него там не знаю что он берет комиссии там еще что-нибудь у меня

2932
02:38:00,860 --> 02:38:09,020
есть вот этот oversight hard head этоisiónет желестный короче там этот package Zlojko это

2933
02:38:09,020 --> 02:38:12,900
качество называется значит он позволит вам на вашем компьютере вам на вашем компьютере

2934
02:38:13,580 --> 02:38:16,320
хорошо свет сатру

2935
02:38:18,680 --> 02:38:24,320
он на вашем компьютере поднимает но до такую как бы девелоперскую свою собственную которая

2936
02:38:24,320 --> 02:38:33,980
вроде бы как как бы манит блоки вы пишете как бы смарт-контракт этот смарт-контракт затем

2937
02:38:33,980 --> 02:38:40,820
выполняете как бы java скриптовый тест в этом java скриптовом тесте есть диплой этого контракта

2938
02:38:40,820 --> 02:38:48,620
вы это диплой как бы дипло из вот это вот как бы в игрушечный эфир в этом же как бы внутреннем

2939
02:38:48,620 --> 02:38:54,800
в этом скрипте как бы вы станете владельцем адреса на котором есть много много эфира 100 миллионов

2940
02:38:54,800 --> 02:39:02,600
там такой там эфира вы можете здесь же притвориться любым другим адресом в обчине то есть стать как

2941
02:39:02,600 --> 02:39:06,940
бы им там полезно не знаю изменить старич контракты так далее там возможности очень

2942
02:39:06,940 --> 02:39:10,820
много вот на по сути вы можете сделать диплой какой как вот в этом

2943
02:39:10,820 --> 02:39:16,040
виртуальную ноду а потом начать соответственно делать различные вызовы там тесты как бы и так

2944
02:39:16,040 --> 02:39:20,780
далее то есть работать ровно так как он будет работать в блокчейне ваш контракт то есть

2945
02:39:20,780 --> 02:39:27,620
проводить тесты в такой локальный девелопер ноде вот штука крайне удобно ее как бы легко

2946
02:39:27,620 --> 02:39:34,460
запускать как бы и легко программировать сидишь в двух файлах один файл пишешь на солидите второй

2947
02:39:34,460 --> 02:39:39,380
как бы тест на джейсе и в общем то никуда как бы из этой штуки не выходишь как бы тебе ни эфир

2948
02:39:39,380 --> 02:39:40,800
не нужен никакой там не будет

2949
02:39:40,800 --> 02:39:46,560
блокчейн как бы не криптовалюта просидишься в локальном окружении она достаточно удобно и

2950
02:39:46,560 --> 02:39:53,760
а сам hard head как бы и брауни и последние фреймворки чем они круты тем что вот вместо

2951
02:39:53,760 --> 02:40:02,840
вот этого вместо вот этого я могу прицепить майнет начиная с любого блока то есть я могу

2952
02:40:02,840 --> 02:40:10,560
сказать внутри вот этого своего теста джества я хочу сказать я могу сказать так возьми пожалуйста

2953
02:40:10,800 --> 02:40:18,180
как бы ford не сделай прям копию боевого эфира начиная с блока там такого-то такого-то прям вот

2954
02:40:18,180 --> 02:40:26,400
в точности вот прям полностью его состоянии после этого я хочу стать васей вот прям причем реальным

2955
02:40:26,400 --> 02:40:34,440
васи вот прям вот отсюда то есть реальным васи который вот здесь вот там славки это транзакции

2956
02:40:34,440 --> 02:40:39,120
там так далее хочу стать вот этим вот адресом что у меня на балансе был эфир как бы вот такие вот

2957
02:40:40,800 --> 02:40:47,560
то есть ты становишься как вот этим вот адресом он тебя имперсонирует и после этого ты делаешь

2958
02:40:47,560 --> 02:40:53,160
там любые вызовы делаешь либо чего хочешь там эмулируешь работу там с любым протоколом и он

2959
02:40:53,160 --> 02:40:59,100
тебе исполняет это в таком как бы в блокчейне который от почковывается от майонета то есть

2960
02:40:59,100 --> 02:41:05,400
там никого кроме тебя нету как бы и ты там делаешь что хочешь именно в этом кроется как раз причина

2961
02:41:10,800 --> 02:41:16,440
то есть почему как бы здесь хаки такие частые как бы почему хаки такие как бы там большие почему

2962
02:41:16,440 --> 02:41:21,300
как бы хакерам здесь так фривольно потому что у них есть именно вот это вот возможность они

2963
02:41:21,300 --> 02:41:28,320
могут сказать взять в прям в текущем виде как бы прям протокол где лежит там не знаю там 100

2964
02:41:28,320 --> 02:41:33,800
миллионов долларов на разных и в депозитах прикинуться там таким-то как бы участникам

2965
02:41:33,800 --> 02:41:39,540
или просто взойти как бы новым участникам и полностью про эмулировать как бы все атаку там

2966
02:41:40,800 --> 02:41:47,380
со практически со стопроцентной вероятность то есть все данные готовы как бы все состояние

2967
02:41:47,380 --> 02:41:52,680
контракта все будет воспроизведено со стопроцентной точностью не считая конечно то что здесь

2968
02:41:52,680 --> 02:41:58,200
пользователем могут видеть как бы транзакции за это время helping этого не увидит но для так это

2969
02:41:58,200 --> 02:42:03,360
как вне суть то есть вы можете воспроизвести любой контракт в майонете прямо вот в его

2970
02:42:03,360 --> 02:42:09,300
пол к чистом в виде со стопроцентной точностью без особых проблем как это позволяет сделать

2971
02:42:09,300 --> 02:42:10,700
там тоже несколько строчек и то

2972
02:42:10,800 --> 02:42:14,100
Это мега удобно для тестирования.

2973
02:42:15,160 --> 02:42:18,060
У меня здесь есть контракт, их там несколько.

2974
02:42:18,380 --> 02:42:20,040
У меня есть там контракт токена.

2975
02:42:21,040 --> 02:42:23,040
Вот, он такой достаточно как бы тупой.

2976
02:42:23,040 --> 02:42:25,580
Так, давайте я лучше с подсветочкой как-нибудь.

2977
02:42:27,780 --> 02:42:29,980
Так, это тест, это тест.

2978
02:42:30,360 --> 02:42:33,040
Давайте контракт с токеном.

2979
02:42:36,240 --> 02:42:37,680
Так, промахнулся.

2980
02:42:37,680 --> 02:42:40,660
У меня тут много их.

2981
02:42:40,920 --> 02:42:45,940
Ну, соответственно, там солидити указывается версия, как бы солидити.

2982
02:42:46,360 --> 02:42:49,000
Там импорт это относится только к хардкату,

2983
02:42:49,000 --> 02:42:54,140
который дает суперскую возможность писать в консоль из контрактов,

2984
02:42:54,280 --> 02:42:57,720
потому что так-то, когда вы там тестите контракты в блокчейне,

2985
02:42:57,780 --> 02:43:01,420
конечно, там ни консоли нет, ничего, никакого вывода, ничего такого.

2986
02:43:02,900 --> 02:43:05,160
Я писал название своего токена.

2987
02:43:06,680 --> 02:43:07,000
Вот этот мой...

2988
02:43:07,680 --> 02:43:10,200
Public name, по сути, превратился в getter,

2989
02:43:10,460 --> 02:43:11,800
то есть такую функцию name,

2990
02:43:12,000 --> 02:43:14,080
которая возвращает как бы вот такое название,

2991
02:43:14,300 --> 02:43:15,280
my hard hat token.

2992
02:43:15,420 --> 02:43:16,660
Мы уже такой getter видели,

2993
02:43:17,020 --> 02:43:19,320
когда смотрели с вами в rapid эфир.

2994
02:43:21,120 --> 02:43:22,060
Так, где он там?

2995
02:43:23,760 --> 02:43:26,520
Вот, в rapid эфир, как бы, когда мы его смотрели с вами,

2996
02:43:26,620 --> 02:43:28,920
у него тоже можно спросить, как бы, какой у тебя name,

2997
02:43:29,040 --> 02:43:31,140
как бы он возвращает имя в rapid ether.

2998
02:43:32,280 --> 02:43:33,520
Вот такое неявное.

2999
02:43:34,020 --> 02:43:35,640
Очень похоже все-все на OOP.

3000
02:43:35,840 --> 02:43:37,520
Значит, описали, кто владелец данного контракта,

3001
02:43:37,680 --> 02:43:40,680
это, в общем, владельцем будет тот, кто его задеплоил,

3002
02:43:40,780 --> 02:43:43,080
то есть тот, кто отправил транзакцию создать токен,

3003
02:43:43,180 --> 02:43:44,980
как бы он станет олднером.

3004
02:43:45,080 --> 02:43:50,580
И у меня есть просто ассоциативный массив, там dict, как в питоне,

3005
02:43:50,680 --> 02:43:54,780
который эфириумный адрес отображает uint-256.

3006
02:43:54,880 --> 02:43:58,980
uint-256, привыкайте, как бы это будет вообще любимый тип данных ваших.

3007
02:43:59,080 --> 02:44:04,460
Вот, который говорит, у вас есть 100 токенов, у Пети 200 токенов и так далее.

3008
02:44:04,560 --> 02:44:07,460
Вот прям вот примитивно совершенно.

3009
02:44:07,680 --> 02:44:09,680
Затем у меня есть конструктор.

3010
02:44:09,780 --> 02:44:12,680
Когда я буду деплоить этот контракт, у меня пропишется,

3011
02:44:12,780 --> 02:44:15,680
что у того, кто создал данный контракт,

3012
02:44:15,780 --> 02:44:20,680
у него будет вот столько-то токенов, total supply,

3013
02:44:20,780 --> 02:44:22,680
вот сколько у него будет здесь соответственно,

3014
02:44:22,780 --> 02:44:25,680
один миллион токенов, я его сделал, как будто переменную.

3015
02:44:25,780 --> 02:44:28,680
То есть все вот эти токены будут на моем балансе,

3016
02:44:28,780 --> 02:44:30,680
когда я это задеплою.

3017
02:44:30,780 --> 02:44:32,680
То есть я буду их владельцем.

3018
02:44:32,780 --> 02:44:34,680
И я же буду владельцем данного контракта.

3019
02:44:34,780 --> 02:44:36,680
Если у меня будут какие-то админские функции,

3020
02:44:36,780 --> 02:44:37,680
которые будут,

3021
02:44:37,780 --> 02:44:38,680
которые только для Овнер,

3022
02:44:38,780 --> 02:44:40,680
я могу в них делать проверку,

3023
02:44:40,780 --> 02:44:44,680
типа что транзакцию отправил только вот этот чувак Овнер.

3024
02:44:44,780 --> 02:44:47,680
Вот эти вещи, опять же, в Solidity,

3025
02:44:47,780 --> 02:44:52,680
то есть почему похоже на JavaScript,

3026
02:44:52,780 --> 02:44:54,680
но на самом деле совсем не то программирование,

3027
02:44:54,780 --> 02:44:56,680
потому что на самом деле вот это не явно,

3028
02:44:56,780 --> 02:44:58,680
это запись storage.

3029
02:44:58,780 --> 02:45:00,680
То есть то, что я здесь присваиваю переменные,

3030
02:45:00,780 --> 02:45:01,680
это просто для удобства,

3031
02:45:01,780 --> 02:45:06,680
а на самом деле здесь происходит именно запись в переменной storage,

3032
02:45:06,780 --> 02:45:12,680
потому что описанные вот здесь переменные глобальные для всего этого класса контракта,

3033
02:45:12,780 --> 02:45:17,680
они в общем по дефолту отправляются в storage.

3034
02:45:17,780 --> 02:45:19,680
То есть это не временные какие-то переменные.

3035
02:45:19,780 --> 02:45:21,680
Стоит мне изменить total supply,

3036
02:45:21,780 --> 02:45:26,680
и с меня спишут там сколько-то тысяч газа за запись в storage,

3037
02:45:26,780 --> 02:45:30,680
и это изменится в блокчейне, если транзакция пройдет.

3038
02:45:30,780 --> 02:45:33,680
Затем функция transfer.

3039
02:45:33,780 --> 02:45:35,680
Я же хочу, чтобы у меня был токен,

3040
02:45:35,680 --> 02:45:36,680
совместимый с кошельками,

3041
02:45:36,780 --> 02:45:38,680
чтобы они знали, какую функцию дергать,

3042
02:45:38,780 --> 02:45:40,680
поэтому у меня функция такая, как и у других.

3043
02:45:40,780 --> 02:45:43,680
Принимает адрес, называется transfer.

3044
02:45:43,780 --> 02:45:47,680
Сначала она проверяет, что у меня достаточно токенов,

3045
02:45:47,780 --> 02:45:49,680
чтобы сделать этот перевод.

3046
02:45:49,780 --> 02:45:51,680
А что означает external?

3047
02:45:51,780 --> 02:45:54,680
External то же самое, что public.

3048
02:45:54,780 --> 02:45:58,680
Тоже будем разбирать.

3049
02:45:58,780 --> 02:46:01,680
Посчитайте, что это как бы то же самое, что и public,

3050
02:46:01,780 --> 02:46:03,680
как бы просто чуть лучше работает,

3051
02:46:03,780 --> 02:46:05,580
если эта функция...

3052
02:46:05,680 --> 02:46:08,680
Вызывается только снаружи исключительно,

3053
02:46:08,780 --> 02:46:10,680
то есть как бы только в транзакциях.

3054
02:46:10,780 --> 02:46:15,680
Public работает лучше, если она еще и вызывается из других контрактов.

3055
02:46:15,780 --> 02:46:18,680
Газа потребляет меньше.

3056
02:46:18,780 --> 02:46:22,680
Значит, require это типа ассерта.

3057
02:46:22,780 --> 02:46:26,680
Здесь есть, кстати, и ассерт, но типовая как бы это require.

3058
02:46:26,780 --> 02:46:30,680
История такая же, как и в программировании,

3059
02:46:30,780 --> 02:46:33,680
там на C, на C++.

3060
02:46:33,680 --> 02:46:36,680
Если у вас вообще там логика в хламину как бы разломалась,

3061
02:46:36,780 --> 02:46:38,680
и все там автум.

3062
02:46:38,780 --> 02:46:41,680
А require это типа не хватает баланса.

3063
02:46:41,780 --> 02:46:44,680
Все как бы, иди отсюда, произойдет реверт.

3064
02:46:44,780 --> 02:46:48,680
То есть если не выполнится эта штука, то будет реверт.

3065
02:46:48,780 --> 02:46:55,680
Затем консоль лог, которая кроме hardhat у вас не сработает.

3066
02:46:55,780 --> 02:47:00,580
То есть вы, конечно, такой как бы не скомпилите ничем кроме hardhat.

3067
02:47:00,680 --> 02:47:03,580
Вот такую как бы штуку в эфире.

3068
02:47:03,680 --> 02:47:05,680
Потому что там нет никакой консоли как бы.

3069
02:47:05,780 --> 02:47:08,680
Но это позволит нам подебажить как бы это дело.

3070
02:47:08,780 --> 02:47:11,680
Ну и дальше прям все просто как бы.

3071
02:47:11,780 --> 02:47:15,680
У sender удалили, сняли 100 токенов как бы,

3072
02:47:15,780 --> 02:47:17,680
а recipient добавили.

3073
02:47:17,780 --> 02:47:21,680
Еще тоже довольно важная как бы штука в смарт-контрактах,

3074
02:47:21,780 --> 02:47:25,680
что в смарт-контрактах все, что не определено, то ноль.

3075
02:47:25,780 --> 02:47:29,680
Вот все, что неизвестно что, короче говоря, вот оно ноль.

3076
02:47:29,780 --> 02:47:31,680
Вот мы посылаем, короче, Пете,

3077
02:47:31,680 --> 02:47:34,680
а у Пети как бы у него и адресы,

3078
02:47:34,780 --> 02:47:38,680
он адрес там от балды какой-нибудь там рандомный назвал там.

3079
02:47:38,780 --> 02:47:42,680
И вообще как бы у него там ни баланса, ничего нету.

3080
02:47:42,780 --> 02:47:44,680
Что здесь будет как бы?

3081
02:47:44,780 --> 02:47:48,680
На самом деле как бы по дефолту вот эта баланса 100 как бы будет равно нулю.

3082
02:47:48,780 --> 02:47:51,680
К нулю прибавится имаунт как бы.

3083
02:47:51,780 --> 02:47:55,680
И будет создана как бы запись в ассоциативном массиве как бы вот с этим вот имаунтом.

3084
02:47:55,780 --> 02:47:59,680
То есть в этом плане как бы solidity как бы здесь достаточно все просто.

3085
02:47:59,680 --> 02:48:01,680
Если что-то нету, то это ноль.

3086
02:48:01,780 --> 02:48:03,680
Если что-то не вышло, как бы это ноль.

3087
02:48:03,780 --> 02:48:07,680
Вы можете обратиться там к любому там адресу в памяти, куда угодно.

3088
02:48:07,780 --> 02:48:09,680
Как бы никто вам по рукам бить не будет.

3089
02:48:09,780 --> 02:48:12,680
Просто как бы отдадут вам ноль и все как бы.

3090
02:48:12,780 --> 02:48:15,680
Это тоже сделано из-за детерминизма.

3091
02:48:15,780 --> 02:48:17,680
У меня там тоже любимая фраза.

3092
02:48:17,780 --> 02:48:20,680
Да, смарт-контракты должны исполняться детерминированно.

3093
02:48:20,780 --> 02:48:24,680
То есть результаты как бы работы смарт-контракта должны быть детерминированы.

3094
02:48:24,780 --> 02:48:26,680
Но они и ломаться даже должны быть детерминированно.

3095
02:48:26,780 --> 02:48:29,580
То есть одна и та же ошибка на всех компьютерах,

3096
02:48:29,680 --> 02:48:33,580
должна приводить ровно к одному и тому же результату.

3097
02:48:33,680 --> 02:48:36,580
Это тоже достаточно важно.

3098
02:48:36,680 --> 02:48:38,580
Ну и вот у меня функция balance of balance,

3099
02:48:38,680 --> 02:48:41,580
которая просто возвращает баланс у аккаунта.

3100
02:48:41,680 --> 02:48:46,580
Такой прям самый-самый дубовый-дубовый прям вообще в никакую как бы токен.

3101
02:48:46,680 --> 02:48:49,580
Как я его, соответственно, тестирую?

3102
02:48:49,680 --> 02:48:54,580
Здесь там фреймворк какой-то JavaScript для тестов.

3103
02:48:54,680 --> 02:48:57,580
Chai там очень модный с каким-то describe'ами и так далее.

3104
02:48:57,680 --> 02:48:59,580
С асинхронщиной с различными.

3105
02:48:59,680 --> 02:49:04,580
Вот здесь уже можете упражняться, как вам нравится, как бы в этих тестах.

3106
02:49:04,680 --> 02:49:08,580
Есть, соответственно, модификатор, что перед каждым тестом,

3107
02:49:08,680 --> 02:49:11,580
который я буду запускать, должны выполниться следующие функции.

3108
02:49:11,680 --> 02:49:15,580
И вот они нам достаточно интересны.

3109
02:49:15,680 --> 02:49:19,580
То есть первое, как бы здесь используется библиотека ethers,

3110
02:49:19,680 --> 02:49:24,580
которая позволяет работать с эфиром, там деплоить контракты, вызывать их там и так далее.

3111
02:49:24,680 --> 02:49:27,580
Таких библиотек на самом деле в JS несколько.

3112
02:49:27,680 --> 02:49:29,580
Есть web3.js.

3113
02:49:29,680 --> 02:49:30,580
Есть ethers.

3114
02:49:30,680 --> 02:49:32,580
Есть еще какие-то.

3115
02:49:32,680 --> 02:49:34,580
Вот здесь используется ethers.

3116
02:49:34,680 --> 02:49:40,580
Я делаю, так называемую, фабрику контрактов.

3117
02:49:40,680 --> 02:49:46,580
То есть он возьмет мой токен .sol, вот этот мой как бы с алиэйти, скомпилит его

3118
02:49:46,680 --> 02:49:51,580
и инициализирует такой как бы код, который сможет его в блокчейн как бы деплоить.

3119
02:49:51,680 --> 02:49:58,580
Затем я возьму и вот этим вот переменным назначу значение getSigners.

3120
02:49:58,580 --> 02:50:03,480
То есть это по сути там такой десяток синтетических аккаунтов, которые у меня будут созданы.

3121
02:50:03,580 --> 02:50:08,480
То есть мне будет создан owner, у которого будет там 100 тысяч эфира на балансе,

3122
02:50:08,580 --> 02:50:12,480
адрес 1 со 100 тысячами эфира на балансе, адрес 2,

3123
02:50:12,580 --> 02:50:16,480
чтобы я мог изображать из себя как бы пользователя моего протокола.

3124
02:50:16,580 --> 02:50:19,480
То есть у меня в тестах же, наверное, много участников.

3125
02:50:19,580 --> 02:50:22,480
И поэтому как бы таким образом я это все инициализирую.

3126
02:50:22,580 --> 02:50:26,480
Затем вызываю функцию deploy.

3127
02:50:26,480 --> 02:50:28,380
Здесь все как бы асинхронное.

3128
02:50:28,480 --> 02:50:34,380
То есть если я не сделаю как бы это wait, я получу promise на как бы на транзакцию,

3129
02:50:34,480 --> 02:50:37,380
которую мне придется подождать.

3130
02:50:37,480 --> 02:50:44,380
Вот тут я дождался, короче говоря, и теперь у меня, ну, соответственно,

3131
02:50:44,480 --> 02:50:49,380
вот этот hardhat токен как бы будет задеплоен таким вот образом.

3132
02:50:49,480 --> 02:50:55,380
Теперь как бы у меня перед каждым, перед каждым моим тестом будет выполняться

3133
02:50:55,380 --> 02:50:57,280
вот эта вот штука.

3134
02:50:57,380 --> 02:51:00,280
То есть я каждый раз перед каждым тестом буду заново деплоить свой токен.

3135
02:51:00,380 --> 02:51:04,280
У меня вот в этой переменной будет лежать вот этот контракт.

3136
02:51:04,380 --> 02:51:09,280
За меня будет сгенерирован вот это ABI, интерфейс к нему.

3137
02:51:09,380 --> 02:51:14,280
То есть я теперь к этому токену смогу обращаться просто как в объектно-ориентированной штуке.

3138
02:51:14,380 --> 02:51:20,280
То есть есть у него переменная owner публичная, вот она, она public.

3139
02:51:20,380 --> 02:51:24,280
Значит, существует как бы getter публичный, вот такая вот функция как бы,

3140
02:51:24,280 --> 02:51:27,180
которая будет возвращать значение вот этой переменной.

3141
02:51:27,280 --> 02:51:34,180
И я, соответственно, могу как бы проверить то, что овнером стал как бы тот овнер,

3142
02:51:34,280 --> 02:51:37,180
который деплоил этот контракт.

3143
02:51:37,280 --> 02:51:43,180
Ну, там, ну, по дефолту вот здесь вот как бы он от адреса овнера и задеплоил.

3144
02:51:43,280 --> 02:51:46,180
А теперь там протестируем там транзакции.

3145
02:51:46,280 --> 02:51:52,180
То есть я беру как бы hardhat токен своего адреса овнера по дефолту,

3146
02:51:52,180 --> 02:51:57,080
у которого там миллион этих токенов, на адрес 1 перевожу как бы 50 токенов.

3147
02:51:57,180 --> 02:52:06,080
Затем как бы вызываю функцию balanceof и проверяю то, что баланс получателя стал равен 50.

3148
02:52:06,180 --> 02:52:10,080
Вот, там, я по-моему, где-то тест запущен.

3149
02:52:10,180 --> 02:52:16,080
Вот, можно, соответственно, посмотреть как бы то, что в трансфер вот этот мой консоль,

3150
02:52:16,180 --> 02:52:20,080
консоль лог написал, что я перевожу вот с этого адреса на этот 50 токенов,

3151
02:52:20,080 --> 02:52:22,980
и с этого на этот 50 токенов.

3152
02:52:23,080 --> 02:52:24,980
Вот, ну и тесты там проходят.

3153
02:52:25,080 --> 02:52:28,980
Понятно, что я могу здесь все вывести, там, все попечатать.

3154
02:52:29,080 --> 02:52:33,980
Вот, затем точно так же теперь я как бы становлюсь адресом 1,

3155
02:52:34,080 --> 02:52:38,980
то есть у которого 50 токенов, и пытаюсь их перевести на адрес 2.

3156
02:52:39,080 --> 02:52:45,980
Вот, и, ну, ожидаю как бы, что на адресе 2 как бы теперь тоже будет 50 токенов.

3157
02:52:46,080 --> 02:52:49,980
То есть там уже как бы пользователи начинают это делать.

3158
02:52:50,080 --> 02:52:53,980
Дальше, соответственно, проверки как бы, что там все должно падать,

3159
02:52:54,080 --> 02:52:55,980
если не хватает токенов.

3160
02:52:56,080 --> 02:52:59,980
Да, там, адрес 1 теперь как бы токенов ноль как бы,

3161
02:53:00,080 --> 02:53:01,980
а он кому-то пытается один токен перевести,

3162
02:53:02,080 --> 02:53:04,980
и как бы тоже как бы все должно упасть.

3163
02:53:05,080 --> 02:53:08,980
По сути это, да, такой как бы, не знаю, template как бы,

3164
02:53:09,080 --> 02:53:11,980
если захотите как бы начать там разрабатывать.

3165
02:53:12,080 --> 02:53:14,980
Здесь это, как видите, довольно несложно.

3166
02:53:15,080 --> 02:53:18,980
При этом все, что мы здесь делаем, вообще не знаем, где там какой адрес,

3167
02:53:18,980 --> 02:53:21,880
не знаем, где там какой-то там эфир, короче, какие-то блоки,

3168
02:53:21,980 --> 02:53:23,880
что-то там майнится как бы и так далее.

3169
02:53:23,980 --> 02:53:27,880
То есть пока вы не начнете тестировать какие-то более сложные паттерны,

3170
02:53:27,980 --> 02:53:32,880
то есть когда там типа надо задепозитить, подождать пока пройдет там, не знаю, 30 дней,

3171
02:53:32,980 --> 02:53:36,880
чтобы потом пришел как бы второй там какой-нибудь чувак, там третий,

3172
02:53:36,980 --> 02:53:39,880
что будет, если несколько транзакций в один блок как бы затолкать,

3173
02:53:39,980 --> 02:53:43,880
как бы как это все сделать, как бы, то здесь все достаточно просто.

3174
02:53:43,980 --> 02:53:48,880
Вот, и учитывая небольшое, ну, там, например,

3175
02:53:48,980 --> 02:53:52,880
там, да, что балансы должны все правильно апдейтиться, там, и так далее, и так далее.

3176
02:53:52,980 --> 02:53:55,880
То есть здесь там куча всяких разных тестов.

3177
02:53:55,980 --> 02:53:58,880
И если вы будете делать как бы курсовой проект,

3178
02:53:58,980 --> 02:54:01,880
это именно как бы разработка смарт-контрактов на Solidity,

3179
02:54:01,980 --> 02:54:07,880
то вот такой вот репозиторий, это, по сути, как раз то, что вы будете,

3180
02:54:07,980 --> 02:54:09,880
то, что вы будете задавать.

3181
02:54:09,980 --> 02:54:13,880
То есть вы мне будете как бы задавать линк на GitHub-репозиторий,

3182
02:54:13,980 --> 02:54:18,880
там у вас в ритме будет описано, как его там поставить, запустить,

3183
02:54:18,980 --> 02:54:21,880
короче, и что это вообще за проект, что он делает, вот.

3184
02:54:21,980 --> 02:54:25,880
Возможно, как бы там во многих местах как бы очень мне хочется,

3185
02:54:25,980 --> 02:54:30,880
чтобы прям в ритме был вот этот вот вывод в консоли,

3186
02:54:30,980 --> 02:54:36,880
и чтобы там хоть какая-то, короче, вот такая вот инфа в консоли выводилась.

3187
02:54:36,980 --> 02:54:39,880
А вот здесь, короче говоря, у нас там человек пришел,

3188
02:54:39,980 --> 02:54:41,880
там, не знаю, зарегистрировал диплом.

3189
02:54:41,980 --> 02:54:45,880
А вот здесь пришел там верифайер, короче, и подтвердил как бы этот диплом.

3190
02:54:45,980 --> 02:54:48,880
А вот он его, значит, принес как бы проверяющим,

3191
02:54:48,980 --> 02:54:53,880
как бы ему там вот это вот, у него вот это проверяют и так далее, и так далее.

3192
02:54:53,980 --> 02:54:57,880
То есть чтобы вот эту вот трассу можно было более-менее так нормально

3193
02:54:57,980 --> 02:55:00,880
как бы посмотреть в домашнем задании, вот.

3194
02:55:00,980 --> 02:55:04,880
Ну, чтобы я мог заглянуть там, не знаю, там буквально там в тесты,

3195
02:55:04,980 --> 02:55:08,880
посмотреть, насколько они полные, заглянуть в сам контракт,

3196
02:55:08,980 --> 02:55:11,880
посмотреть, как бы насколько он полный.

3197
02:55:11,980 --> 02:55:16,880
И желательно, если я как бы залипну с какими-нибудь версиями там Node.js там

3198
02:55:16,980 --> 02:55:18,880
или там Brownie и так далее,

3199
02:55:18,980 --> 02:55:22,880
я не могу запустить, что я хотя бы мог увидеть в ритме вашу трассу

3200
02:55:22,980 --> 02:55:26,880
и исполнение как бы вашего теста.

3201
02:55:26,980 --> 02:55:31,880
Этого, в принципе, уже как бы по большей части достаточно, вот,

3202
02:55:31,980 --> 02:55:34,880
для того, чтобы сделать именно протокол работающий.

3203
02:55:34,980 --> 02:55:38,880
Значит, я, мы там не будем особо сильно смотреть на то,

3204
02:55:38,980 --> 02:55:41,880
насколько вы там красивые как бы интерфейсы нарисовали,

3205
02:55:41,980 --> 02:55:46,880
но, конечно, если вы прям хотите делать там, не знаю, там NFT, там еще что-то, IPFS использовать,

3206
02:55:46,980 --> 02:55:48,880
то, конечно, какие-то базовые вещи.

3207
02:55:48,980 --> 02:55:52,880
Вы должны как бы показать, да, если у вас там JPEG заливаются как бы какие-то,

3208
02:55:52,980 --> 02:55:56,880
ну, как бы их надо все-таки в браузере отобразить, вот.

3209
02:55:56,980 --> 02:56:02,880
Но как бы на дизайн смотреть они будут точно как бы, скорее всего, именно на тесты.

3210
02:56:02,980 --> 02:56:04,880
Вот, поэтому разработка довольно комфортная.

3211
02:56:04,980 --> 02:56:08,880
Здесь сидишь себе как бы в нескольких, в нескольких файликах в Solidity как бы в тестах,

3212
02:56:08,980 --> 02:56:11,880
гоняешь их как бы туда-сюда, вот.

3213
02:56:11,980 --> 02:56:18,880
Особо это как бы не сильно требовательная штука, и можешь легко вот эту же историю,

3214
02:56:18,980 --> 02:56:22,880
как бы попробовать прямо задеплоить в MyNet.

3215
02:56:22,980 --> 02:56:29,880
То есть ты, ну, хардхед, как бы, так как вот эти вот функции, которые я здесь сделал, короче,

3216
02:56:29,980 --> 02:56:36,880
вот этот вот деплой, по-хорошему, израилу своему неважно, куда как бы этот деплой делать.

3217
02:56:36,980 --> 02:56:40,880
То есть вот эти все вот эти сложные как бы функции, выкладки,

3218
02:56:40,980 --> 02:56:44,880
вы можете точно так же хардхед подключить прямо к реальному кошельку,

3219
02:56:44,980 --> 02:56:48,880
ну, точнее, к не реальному кошельку, а как бы указать,

3220
02:56:48,980 --> 02:56:54,880
что действуй вот с этого адреса, вот тебе публичный, вот тебе секретный ключ от этого адреса,

3221
02:56:54,980 --> 02:57:00,880
на нем есть там сколько-то там боевого эфира, переключись на боевую сеть и иди как бы туда деплой.

3222
02:57:00,980 --> 02:57:03,880
И, в общем-то, проекты так и деплоятся.

3223
02:57:03,980 --> 02:57:07,880
То есть они выкладываются как раз вот при помощи хардхеда,

3224
02:57:07,980 --> 02:57:10,880
здесь есть там специальный как бы JavaScript-овый сценарий,

3225
02:57:10,980 --> 02:57:15,880
если вам надо там задеплоить там 3-4 контракта, правильно их инициализировать,

3226
02:57:15,980 --> 02:57:18,880
то есть вы сделали как бы первый контракт, потом создали второй,

3227
02:57:18,980 --> 02:57:23,880
во втором указали адрес первого, сказали он будет мной управлять, потом создали третий,

3228
02:57:23,980 --> 02:57:27,880
то есть все вот это как бы удобно не в голове держать, да,

3229
02:57:27,980 --> 02:57:31,880
а именно весь этот деплоймент как бы иметь вот здесь вот в тестах.

3230
02:57:31,980 --> 02:57:33,880
Эта штука как бы крайне, крайне удобная.

3231
02:57:33,980 --> 02:57:37,880
И можете это проделать на форке майнета,

3232
02:57:37,980 --> 02:57:41,880
то есть попробовать просто весь сценарий боевой своего деплоя проверить

3233
02:57:41,980 --> 02:57:46,880
прямо со 100% гарантией прямо на копии как бы текущего эфира,

3234
02:57:46,980 --> 02:57:48,880
что все у вас сработает как бы,

3235
02:57:48,980 --> 02:57:50,880
что у вас получится.

3236
02:57:50,980 --> 02:57:53,880
Вот в этом плане разработка крайне удобная.

3237
02:57:53,980 --> 02:58:00,880
Так, ну и, соответственно, там по поводу как бы общих тасков,

3238
02:58:00,980 --> 02:58:07,880
мы много очень будем смотреть всяких разных проектов с вами там пересматривать, вот,

3239
02:58:07,980 --> 02:58:11,880
но, конечно, хотелось бы, чтобы вы как бы почитали сами, что пишется.

3240
02:58:11,980 --> 02:58:16,880
Скорее всего, вы прям сразу закопаетесь в тонны как бы проектов, посвященных финансам,

3241
02:58:16,880 --> 02:58:22,780
там, положил, вынул деньги туда-сюда, у нас под это будут отдельные лекции,

3242
02:58:22,880 --> 02:58:25,780
значит, как я сказал, финансы крайне популярные,

3243
02:58:25,880 --> 02:58:28,780
потому что не надо выходить из эфира никуда.

3244
02:58:28,880 --> 02:58:32,780
Все, как бы, у тебя есть DAB, у тебя, у пользователей есть метамаски,

3245
02:58:32,880 --> 02:58:34,780
у тебя есть смарт-контракты, все.

3246
02:58:34,880 --> 02:58:37,780
Все остальное как бы это уже такая аналитическая обстройка,

3247
02:58:37,880 --> 02:58:41,780
как бы она может там существовать по сути как бы самостоятельно, вот.

3248
02:58:41,880 --> 02:58:45,780
Это мега удобно, работа с финансами, как бы.

3249
02:58:45,780 --> 02:58:49,680
Поэтому они и победили как бы сейчас, пока что, вот.

3250
02:58:49,780 --> 02:58:56,680
А так-то как бы среди тем, которые там, я считаю, как бы крайне перспективными,

3251
02:58:56,780 --> 02:59:01,680
это вообще как бы создание DAO, то есть создание как бы на смарт-контрактах

3252
02:59:01,780 --> 02:59:06,680
таких организаций, ну, по сути, смарт-контракты, управляющие конкретными бизнесами, вот.

3253
02:59:06,780 --> 02:59:10,680
Потому что у каждого бизнеса есть своя собственная там специфика, там, DAO для,

3254
02:59:10,780 --> 02:59:15,680
там, не знаю, для доставки дронами, как бы, DAO для, там, не знаю,

3255
02:59:15,780 --> 02:59:20,680
аудита кода, DAO для выполнения, там, не знаю, там, заказов, не знаю, там,

3256
02:59:20,780 --> 02:59:23,680
подписки на услуги, там, фитнес-тренера, как бы.

3257
02:59:23,780 --> 02:59:25,680
Ну, то есть неважно, у них у всех есть свои нюансы.

3258
02:59:25,780 --> 02:59:30,680
Где-то там надо деньги списывать вестингом, где-то нужны какие-то, там,

3259
02:59:30,780 --> 02:59:34,680
экспертные сообщества, которые голосуют, как бы, там, за что-то и так далее.

3260
02:59:34,780 --> 02:59:38,680
То есть здесь фантазия может как угодно, как бы, работать.

3261
02:59:38,780 --> 02:59:44,680
И, как бы, DAO тема такая, как бы, очень интересная, организация бизнесов на блокчейне.

3262
02:59:44,680 --> 02:59:48,580
Еще тема – это вот эти self-serving identity, verified credentials,

3263
02:59:48,680 --> 02:59:53,580
то есть когда у нас эфир используется просто как публичная база данных,

3264
02:59:53,680 --> 02:59:58,580
в которой можно хранить публичные ключи, адреса, как бы, и вот, ну, адреса,

3265
02:59:58,680 --> 03:00:02,580
которые, по сути, есть как публичные ключи, и доказывать, что ты, там, находишься

3266
03:00:02,680 --> 03:00:07,580
в каком-то там реестре, имеешь какой-то документ, имеешь какой-то пропуск, билет на мероприятие,

3267
03:00:07,680 --> 03:00:13,580
там, или еще что-то. Тоже делается очень красиво, как бы, на контрактах, минималистично, как бы,

3268
03:00:13,580 --> 03:00:20,480
и закончено, вот. Ну, NFT, как бы, это сами, как бы, разберетесь, там, не знаю, там, игры,

3269
03:00:20,580 --> 03:00:24,480
представленные NFT, там, это тоже инфы, как бы, очень много.

3270
03:00:24,580 --> 03:00:32,480
Вот, в общем, есть здесь, что поделать, вот, думайте. Вот, на сегодня, наверное, все

3271
03:00:32,580 --> 03:00:39,480
в качестве post-reader к этой лекции. Ну, значит, что, как бы, важно почитать?

3272
03:00:39,580 --> 03:00:43,480
Ethereum Official Docs – это, по сути,

3273
03:00:43,580 --> 03:00:47,480
вообще, как бы, просто рекомендую, у них хорошая очень документация.

3274
03:00:47,580 --> 03:00:53,480
Есть очень хорошая статья, типа, что происходит, когда вы отправляете один DAI.

3275
03:00:53,580 --> 03:00:58,480
DAI – это токен такой, как бы, ERC-20, там, одного проекта, как бы, крайне популярный,

3276
03:00:58,580 --> 03:01:03,480
который к доллару привязан. Вот, вот там, прям, подробно, вместе со ссылками на,

3277
03:01:03,580 --> 03:01:12,480
прям, вместе со ссылками на исходный код ноды, описывается все, вообще, что происходит

3278
03:01:12,480 --> 03:01:18,380
в момент отправки транзакции. И как она готовится, и что она делает, как бы, на ноде,

3279
03:01:18,480 --> 03:01:23,380
и там, трейсы всяких, как бы, транзакций, и как она обрабатывается, как газ обрабатывается,

3280
03:01:23,480 --> 03:01:28,380
как смарт-контракт исполняется. То есть, это такая чтива на, прям, на несколько часов.

3281
03:01:28,480 --> 03:01:32,380
Но, если прочтете, как бы, то предыдущая лекция по эфиру, как бы, она, в общем-то,

3282
03:01:32,480 --> 03:01:37,380
вам тоже не особо будет нужна. Ну, либо, прям, супер дополнит, вообще, полностью

3283
03:01:37,480 --> 03:01:42,380
понимание того, как эта штука функционирует. Еще раз напоминаю, что другие блокчейны,

3284
03:01:42,480 --> 03:01:47,380
они не сильно отличаются, на самом деле. Ну, то есть, архитектурно не сильно.

3285
03:01:47,480 --> 03:01:52,380
У всех одни и те же требования. У всех БФТ, у всех детерминизм, у всех газ.

3286
03:01:52,480 --> 03:01:58,380
У всех, как бы, execution restriction. Все похожим образом решают.

3287
03:01:58,480 --> 03:02:05,380
Еще одна ссылка, вот здесь вот, это про то, как вычисляется газ динамически.

3288
03:02:05,480 --> 03:02:10,380
То есть, здесь довольно, там, много, вроде бы, как кажется, что это сложно,

3289
03:02:10,480 --> 03:02:12,380
на самом деле, как врубитесь, там, не знаю, в первый, второй этап,

3290
03:02:12,480 --> 03:02:16,380
пункт, а остальные все очень легко, как бы, прочитать. По сути, это описание того,

3291
03:02:16,480 --> 03:02:21,380
как высчитывается, сколько вы должны заплатить, если вы в память записываете

3292
03:02:21,480 --> 03:02:27,380
x байт какой-то информации. Сколько это будет стоить, потому что здесь, там,

3293
03:02:27,480 --> 03:02:32,380
нулевые байты стоят дешевле, ненулевые байты стоят дороже. Все это выравнивается

3294
03:02:32,480 --> 03:02:37,380
слотами по 32 байта, как бы, здесь это, вот это все описано. Это тоже, как бы,

3295
03:02:37,480 --> 03:02:42,380
можно, там, почитать, как бы, для общего развития. Но, вот, как бы, я,

3296
03:02:42,380 --> 03:02:49,280
рекомендую крайне вот эту вот статью, прям она очень классная. Вот, в принципе,

3297
03:02:49,380 --> 03:02:53,280
все. В следующий раз все уже поедем, там, по солидите, уже будет смотреть

3298
03:02:53,380 --> 03:02:57,280
всякие контракты, паттерны, как бы, подразумевается, что, как работает эфир,

3299
03:02:57,380 --> 03:02:59,280
вы, в общем-то, знаете.

3300
03:02:59,380 --> 03:03:02,280
А пример кода с тестами пришлете?

3301
03:03:02,380 --> 03:03:06,280
Имейте в виду вот этот хардхед, да?

3302
03:03:06,380 --> 03:03:07,280
Да.

3303
03:03:07,380 --> 03:03:12,280
А, да-да-да-да, закинул. Да, хорошо. Там, пингонетики,

3304
03:03:12,380 --> 03:03:17,280
ну, это открытая репа. Все тогда. Ладно, тогда мы сегодня завершаем.

3305
03:03:17,380 --> 03:03:19,280
Всем хорошего дня.

3306
03:03:19,380 --> 03:03:21,280
До свидания.

3307
03:03:21,380 --> 03:03:23,280
До свидания.

3308
03:03:23,380 --> 03:03:25,280
До свидания.

