start	end	text
0	5000	Так, отлично. Значит, сегодня у нас, в общем-то, как раз вторая лекция.
5240	11820	Мы опять, как и в первой лекции, мы попробуем довольно-таки быстро обозреть,
11960	15920	как душами смарт-контракты эфирные, как они работают для того,
16020	19580	чтобы вы дальше могли выбирать себе курсовые проекты,
19680	22560	может быть, там, потыкать где-то в код, как бы посмотреть.
23880	27400	Первая домашка, соответственно, тоже к курсу, как бы это, по сути,
27400	31540	внести дифы в Solidity код, вот, особо не пугайтесь,
31640	35260	он достаточно легко, как бы, читается, и модифицировать его тоже, как бы, несложно.
36520	39460	Вот, сложности, как бы, смарт-контрактов, они, на самом деле, в понимании
39460	43360	таких низкоуровневых механизмов, вот, как бы, в самом, там, грубо говоря,
43440	48240	написании кода, там, большого количества каких-то таких страшных тонкостей нет.
49500	50640	Вот, значит, поехали.
52280	57240	Возвращаясь к процессингу транзакций, то есть на этот раз мы уже их посмотрели,
57400	61840	затем со стороны клиента, то есть как это выглядит вообще общение со смарт-контрактами
61840	64940	для клиентов, то есть для ваших, там, пользователей, вот.
65880	72440	Ну, например, предположим, я зашел на какой-то сайт, который посвящен финансам,
72740	77600	я сейчас нахожусь в тестовой сети, сейчас уже не помню в какой, в Герле.
78460	81080	Вы ее, кстати говоря, будете довольно часто использовать, возможно,
81080	87080	имеет смысл, как бы, туда, как бы, деплоить свои, не знаю, там, проекты,
87400	91280	то есть вы можете там разворачивать свои контракты, пользоваться этой сетью спокойно.
92100	96740	В Герле сейчас наиболее из всех вот этих вот тестовых сетей, как видите, там много.
97840	101020	Ринки бай уже, как бы, скоро будет деприкейтед.
102540	106640	Герле сейчас наиболее такая свежая, как бы, которая поддерживает последнюю версию эфира,
106640	112020	как бы, так что, значит, в ней, собственно, и, скорее всего, придется работать.
112820	113500	Очень удобно.
113900	116640	А там есть копия сайта, ну, кстати, да, в отличие, как бы, от источника,
117400	123800	остальных от Web2 сервисов, в Web3 можно взять и скопировать свой сервис
123800	126280	и запустить его в тестовые сети с игрушечным эфиром.
126780	131000	Представьте, если бы у вас был там Тинькофф или Сбер, как бы, с игрушечными рублями,
131000	137000	как бы, но стопроцентно повторяющий полностью, абсолютно всю бизнес-логику основного приложения.
138580	138980	Ну, вот.
139940	142900	Там, на самом деле, такие же, такие и есть, как бы, штуки,
143080	146880	и недавно в Сбере была какая-то дичайшая бага как раз с тестовой версией приложения.
147400	150080	Значит, для взаимодействия со смарт-контрактом,
150480	154660	то есть для отправки вот такой же, вот такой вот транзакции,
155300	159420	вот, в которой, как я говорил, находятся вот здесь вот в импуте,
159700	163420	закодировано, какую функцию данного смарт-контракта я хочу вызвать.
163620	166600	То есть я хочу бросить транзакцию вот на этот адрес
166600	170200	и вызвать такую-то функцию с такими-то парами.
170320	172880	Они здесь упакованы, конечно, но, тем не менее,
174000	175160	выглядит это следующим образом.
175160	177260	Ну, там, предположим, я хочу там включить,
177400	181880	не знаю, свой, там, эфир, как калатору.
182780	185180	Я сейчас отправлю, по сути, как бы, функцию, которая говорит,
185320	189440	типа, разреши мне посылать, там, не знаю, эфир в этот смарт-контракт.
189500	191440	То есть у него внутри произойдет запись.
192180	194020	Для клиента это выглядит вот таким вот образом.
194640	197220	То есть у него всплывает вот этот вот метамаск
197220	201600	или какой там у вас есть, там, не знаю, там, кошелек там какой-нибудь
201600	204120	и предлагает эту транзакцию подписать.
204120	206200	Я эту транзакцию подтверждаю.
207400	210220	Я не отправляю никакого эфира, вот.
210240	212720	Но мне, конечно, придется заплатить за эту транзакцию.
212880	213700	Сейчас надо нажать.
214680	215080	Вот.
216020	217640	И все, транзакция, как бы, поехала.
218420	220820	Я жду, пока она, там, что-то там заманится,
220940	223240	пока майнеры ее примут, пока они включат блок,
223360	224300	пока, как бы, но...
224300	229200	Я тоже не особо любитель плюс-сайза, да и таковым не являюсь.
229680	231080	Я думаю, что...
231080	232500	Никита, выключи микрофон.
234020	234420	Да.
234860	237080	И, соответственно, теперь, когда транзакция дошла,
237400	239000	то собновился, вот.
239120	242040	И, соответственно, эфир, как бы, теперь у меня включен.
242100	244780	Я могу теперь его, там, например, не знаю, там,
245120	248440	какое-то количество этого эфира положить, там, не знаю, процент, например.
249200	250720	Будет выглядеть все точно так же.
251620	254540	В чем, как бы, ну, как бы, удобство веб-три приложения,
254600	257820	что я вот ровно таким же образом хожу, там, в сотни проектов
257820	260860	абсолютно разных, как бы, могу делать в них, как бы,
260860	263520	все делать при помощи одного и того же, не знаю,
263620	266800	даже одного и того же адреса, одного и того же, вот, этого расширения.
267840	271680	Нигде, как видите, нет никаких ни логинов, ни регистрации,
271740	273300	вообще ничего, как бы, этого добра нет.
273420	275200	Все свалено на пользователя.
275400	279520	То есть за безопасность своих адресов, своей крипты, я отвечаю сам.
279620	282720	То есть никто мне здесь не поможет никаких, там, восстановить аккаунт,
282820	283860	ничего этого нету.
285160	290360	А так, на секунду, так, вообще, как бы, взломы аккаунтов, угоны,
290360	292600	короче говоря, получение персональных данных,
292720	296200	оно в Web2-сервисах, в разных, там, почтах, как бы, сервисах
296200	297280	очень часто делается.
297400	300560	Как раз через функции восстановления доступа к аккаунту.
301060	304280	Всякие вот эти секретные вопросы, Wi-Fi и так далее.
304400	307140	Вы все это, как бы, в security штуках, как бы, видели.
307820	310200	Ну, вот я положил, там, сколько-то, там, 0.12 эфира,
310280	313240	положил под 11% годовых, все, они там валяются,
313320	314560	потом захочу, как бы, вытащу.
315560	317720	Вот, то есть все, как бы, довольно просто.
318680	320740	И с точки зрения разработки ваших проектов,
320740	323600	это тоже достаточно, как бы, удобно, потому что вы пишете,
324020	326740	ну, если так, в минимальном варианте, то вы пишете смарт-контракт,
327400	331940	деплойте, выкладываете его в сеть, куда-нибудь, там, не знаю, в тест-нет-герле,
332600	336440	и пишете просто на Node.js какой-то, там, простейший, как бы, интерфейс.
337540	341740	Ну, как бы, за этим интерфейсом, там, коду, на самом деле,
341820	344380	там, на три строчки буквально, которые с эфиром общаются,
344520	348340	потому что вся бизнес-логика, по сути, находится там где-то, в тест-нете.
349540	356400	Вот, а бэкэнд вам нужен для того, чтобы на вашем проекте показывать,
356400	357380	ну, всякие, там, цифры.
357400	360800	Цифры, агрегации, там, сколько, там, не знаю, какие там проценты,
361220	364700	total balances, вы можете взять, брать что-то из контрактов,
365380	368580	но что-то вам понадобится, там, агрегировать, собирать статистику,
368680	370460	чтобы пользователю дать больше информации,
370540	372560	и для этого как раз используются бэкэнды, вот,
372640	374400	поэтому с этой точки зрения Web3-разработка,
375620	378400	она включает в себя, в том числе и Web2-разработка,
379100	381340	то есть вам надо, там, курсы какие-то там переводить,
381420	383420	еще что-нибудь, в общем, все это делается на бэке.
384700	387000	Вот, значит, поехали.
387400	389900	Значит, что происходит с транзакцией?
390380	393000	На самом деле, на начальном этапе, когда мы ее только кинули,
393080	396040	когда она попала в ноду, у нее, конечно, нету ни хэша-блоков,
396080	399980	в которые она была включена, ни номера блока, вот,
400140	404580	неизвестно, сколько она потратила газа, эта транзакция,
405000	407080	то есть после того, как она была, как бы, замайнена.
407860	412360	У нее непонятно, на какой позиции в блоке она находится, вот,
412400	415140	но, в принципе, все остальное, как бы, оно, в общем-то, одно и то же,
415140	416240	то есть вот здесь подпись,
416240	421240	сколько эфира она на себе тащит, ее, соответственно, нагрузка,
421840	422980	вот этот hex bytes.
423700	427680	Кстати, что интересно, как бы, хакеры бывают, ну, точнее, не бывают,
427780	430100	когда довольно часто переписываются с проектами
430100	432880	вот посредством вот этих hex bytes,
433080	435540	то есть вы можете отправить там транзакцию кому-нибудь с эфиром
435540	440040	и здесь написать в комментарии, типа, вот, как бы, не знаю, там,
440220	443080	спасибо за хак, короче говоря, вот, заберите часть денег.
444320	445960	То есть бывает такое.
446240	449660	Что и с хакерами переписываются, собственно, через вот эти вот hex bytes тоже бывает.
451120	455640	Значит, что происходило вот здесь, когда я работал с Metamask?
456180	458620	Сделал транзакцию, подписал транзакцию,
459340	461860	затем мой вот этот вот Metamask,
462460	465380	я напоминаю, это не ваше приложение,
465680	468700	то есть не ваш DAP сделал эту транзакцию,
468860	472440	ну, точнее, он ее изготовил, эту транзакцию сформировал,
472440	475520	а подписал и отправил ее именно как раз Metamask,
476240	478480	никакой JS с вашей страницы этого не делает,
478580	482800	это делает расширение в валюту, то есть саму транзакцию отправляет, вот.
483960	486340	Ну, а здесь, как бы, в JS-ке вы можете сделать, там, не знаю,
486440	491100	PubSub, там, подписаться, там, на обновление, там, от Metamask, там, от ноды, как бы,
491160	495460	и в нужный момент, когда пришла информация, что все, транзакция включена,
495560	499380	как бы, галочки переключилась, стейт изменился.
500160	504160	Соответственно, там используется обычный, там, JSON-RPC интерфейс,
504160	509480	обычно у нод есть, как бы, два интерфейса, HTTPS и WebSockets,
509580	513660	WebSockets, которые позволяют, как бы, вам держать все время открытым соединение,
513760	516260	то есть если вам надо, как бы, там, непрерывно получать апдейты,
516360	520160	все время страничку обновлять, как бы, это более удобно, ну, вот.
520260	524460	Здесь, как бы, все стандартно, и поэтому, как бы, ноды, они, по сути,
524560	528960	представляют собой, ну, так, для внешнего наблюдателя, по сути, такой веб-сервер,
529060	533780	который прям JSON-RPC API, то есть открытые порты, как бы, вы можете,
534160	538320	туда кинуть какой-нибудь запрос, и он вам в ответ, как бы, ответит,
538400	543380	как бы, можете кинуть, там, послать транзакцию, и нода, как бы, отправит транзакцию.
544380	548940	Значит, что делает нода? Нода валидирует транзакцию, чтобы ее, там,
548980	553480	мусором не закинули, всякие черновые проверки, кладет, как торрент,
553560	559220	как бы, начинает раздавать, как бы, через торрент и, там, через P2P эту транзакцию, вот.
560120	563220	Причем, там, есть, по сути, как бы, несколько,
564160	569220	несколько протоколов, по которым они работают, там, родной эфирный P2P,
570080	574140	есть стэк, как бы, который использует другие ноды, вот, то есть, несколько вариантов,
574240	577260	как бы, но смысл один и тот же, то есть, нода рассказывает другим, типа,
577360	581520	чуваки, у меня есть, вот, новые хэши транзакций, кому надо, как бы, если хотите,
581620	585440	я вам, типа, перешлю тело этих транзакций, ну, чтобы дважды, как бы, не слать.
586320	591560	Вот, наконец, она добирается, там, до майнера, вот, и, соответственно, майнер,
594160	600500	ее применяет. Значит, затем, ну, и после этого, после того, как, как бы,
600540	605420	нода объявила о транзакции полной ноды, она стоит и ждет, как бы, новых блоков,
605520	609880	подписывается на все, как бы, новые блоки. Когда прилетает новый блок,
610580	614540	она узнает, что, как бы, я жду результатов вот этой транзакции,
614620	617900	то есть, когда она будет включена в блок, она, по сути, как бы, подписана, в общем,
617940	623440	на эти события, вот, она получает новый блок, проверяет его, выбирает,
623440	628120	в соответствии с консенсусом, годится ли этот блок или нет, как бы, попадает ли он
628120	633380	в основную цепочку, в мастер-чейн. Если и надо, как бы, как я там показывал
633380	638300	на схемах, как бы, откатывать, может быть, предыдущие блоки и накатывать вот эти вот
638300	643920	новые, вот, с ревертом, как бы, всех транзакций. Затем накатывает все транзакции
643920	649340	из вот этого нового блока на свою state database. Вот, возможно, среди этих
649340	653420	транзакций есть и наша, вот. И как раз вот в этот момент,
653440	659260	когда она применяет, как бы, этот, ну, применяет, по сути, блок, бежит по
659260	663160	транзакциях и делает вот эту вот apply, вот ровно в этом месте работает код
663160	669360	контракта. Прямо здесь как раз запускается виртуальная машина, вот, и вот здесь, как
669360	674400	бы, она бежит-бежит, как бы, по транзакции, по сути, исполняет, как бы, код контракта.
674400	683060	Вот. Далее она решает, как я говорил, любой smart-контракт, любой вызов к smart-контракту
683060	688160	заканчивается всего двумя исходами, да, типа, все окей, как бы, и реверт, и в случае реверта,
688160	694400	как бы, ну, ничего не происходит. То есть никаких изменений абсолютно, как бы, вот, кроме, как бы,
694400	700040	списания денег с баланса отправителя за потраченный газ. А в самой state database,
700040	704360	как бы, там, во всех, там, данных контракта никаких значений, никаких изменений не происходит.
704360	712340	После чего она обновляет state root, вот это вот в дерево организованное значение, грубо говоря,
713060	719780	state, ну, hash state database, такой общий, который, как бы, зависит от всех значений этой базы
719780	725780	данных, и, соответственно, проставляет транзакции, как бы, сколько было потрачено газа, какой блок
725780	732260	она была включена, там, какой индекс, и так далее, и так далее. В этот момент наш metamask, как бы,
732260	739040	висит на этой ноде, там, по вебсокетам или опрашивает ее по HTTPS, вот, и ждет, когда
739040	743000	появится информация о его транзакции. Значит, приходит новый блок,
743060	749540	он ждет, как бы, будет ли доказательство того, что моя транзакция попала в мой блок. Здесь, как раз,
749540	755960	используются вот эти вот merkle proof, то есть доказательство того, что транзакция, она, как бы,
755960	761060	в блок попала, в то время как в блоке есть буквально одно только число. Ну, про меркл деревья мы с вами
761060	766960	обязательно, там, поговорим подробно, это широко используемый паттерн в блокчейнах. То есть она ждет,
766960	772500	как бы, еще и доказательство того, что транзакция в текущий блок попала, вот.
773060	780060	Затем получает, соответственно, апдейты от ноды, как бы, ну, там, она запрашивает, там, любые, там,
780060	788540	интересные значения, например, там, включен ли флажок он для эфира для вот этого адреса клиента,
788540	796220	который, как бы, запросил. Если да, то он там что-то отрисовывает. Вот, она это все дело опрашивает,
796220	799880	и, как бы, после того, как понятно, что транзакция включена, все изменилось, как бы,
799880	802940	все данные из контрактов получены, она апдейтит мордочку.
803060	807380	Вот, то есть выглядит весь вот этот цикл таким образом.
807380	815020	Кто является клиентами? То есть кто может дергать, как бы, оперировать эфиром? Значит,
815020	820460	самые популярные это браузеры вот с этими расширениями, там, помимо Metamask есть еще много,
820460	827540	там, всего. Есть, там, просто десктопные программы-клиенты, но браузеры, они, почему они,
827540	833060	как бы, наиболее популярны? Ну, потому что, как я сказал, как бы, я своим браузером бегаю, там, я
833060	837860	не знаю, по десяткам, как бы, проектов, что хочу, там, закладываю, перекладываю, как бы, как угодно,
837860	846140	там, не знаю, в финансы регистрируюсь, играю, там, в игры, там, NFT какие-нибудь создаю, и все это
846140	851720	делается при помощи, по сути, одного расширения в этом браузере. Это крайне удобно. Вот, то есть,
851720	856040	как бы, тот, у кого, как бы, есть на балансе эфир, по сути, имеет доступ, там, к сотням разных
856040	862340	финансовых инструментов, совершенно, там, разных типов, как бы, и, там, возможностям, там, десяткам
863060	872540	и вообще кучу всего. Все это при помощи буквально одной софтины. Но есть еще, мы тоже будем про них
872540	877840	говорить, это, наверное, самый надежный способ защитить отдельный адрес, это железные ключи
877840	885500	хардварные. Это такие типа флешки, как бы, штуки, вставляются в USB, и их основная суть, то, что у
885500	891860	них внутри зашит приватный ключ, они никогда его в жизни наружу не показывают. Вот, ты в эту флешку,
891860	893040	как бы, ну, ты в этот ключ, как бы, не можешь, ну, как бы, не можешь, ну, ты в этот ключ, как бы,
893040	899660	передаешь транзакцию а он в ответе выдает ее подпись то есть типа да я подписал вот и там
899660	904980	если там например кнопочка есть на этой флешке то хакера как бы даже полностью захватив компьютер
904980	912000	он не может получить не может получить доступ к этой кнопочки то есть как минимум там нажать
912000	920640	нажать confirm и подписать за вас ну и там это маска умеет коннект с этими с этими ключами вот
920640	929400	в общем их рекомендуется использовать мобильные валятся значит то что вы набираете когда вы
929400	937120	наберете там эфириум wallet мобайл по большей части на самом деле это обрезанные браузеры такие
937120	943360	которые входят на ограниченное количество сайтов то есть без строки url ада как вас кучей там не
943360	949380	знаю там линков там favorites и тоже встроенные как бы истории управления ключами пока и это
949380	950580	имеется паблике и инфо
950640	956320	structure то есть там приватные публичные ключи адреса там и так далее вот то есть такие как
956320	961320	бы популярные браузеры мобильные кошельки это по сути как бы браузер для того чтобы ну им было
961320	967500	удобно ходить сюда там городить особо ничего не надо потому что джессон рпс и все стандартно все
967500	972660	как в вебе как бы особо что-то придумать как бы смысла нет если вы будете самописный валит там
972660	980260	писать на java вот вам придется реализовать вообще там ну ты фига там всяких взаимодействий там так
980260	980640	далее
980640	993660	и в этом же еще причина почему мобильщики не любят особо крипту значит потому что смотрите вы сделали
993660	1000440	какую-нибудь вас там мобилка у вас здесь ваша опка не знаю какая там крутая игра как бы там
1000440	1005360	здесь эфир значит можно чего-нибудь покупать продавать всякие там предметы игровые там какая
1005360	1010160	экономика интересная но для того чтобы каждую транзакцию вам отправить вам нужные подписались
1010640	1015780	Для этого вам нужен секретный ключик, личный ключик, адреса.
1016580	1023260	И зачастую вот это реализовать сложнее, чем реализовать всю вашу апку целиком.
1024160	1027840	Потому что ваша апка, там, не знаю, красивые картинки плюс несколько типов транзакций,
1028400	1034420	а вот здесь вот надо прям сильно поскрепеть, потому что здесь требования к безопасности очень высокие.
1034520	1039200	То есть вам придется, по сути, в свое приложение встроить валет.
1039200	1042320	А требования к валету, они крайне серьезные.
1042420	1046040	То есть здесь вы что-то там набажете, как бы это еще можно будет поправить,
1046560	1050340	а здесь что-нибудь не так сделаете, там, не знаю, генерацию адресов, там еще что-то.
1051580	1054340	И будет очень плохо, как бы валет поломают.
1055480	1058640	Вот, ну, буквально недавно там вот тоже дичайшая история в Салане.
1059060	1062860	То есть когда там было взломано, там, не знаю, сотни, как бы тысячи адресов,
1062940	1065780	огромное количество крипты было украдено как раз просто потому,
1065780	1068780	что один из валетов, он генерировал...
1069920	1072020	адреса несекьюрным образом.
1072640	1077480	Вот, там, секретный ключ из него, публичный из него, там, адрес, соответственно.
1078300	1083100	Он делал, ну, несекьюрно, как бы, и, по сути, это было взломано.
1084260	1086440	Так, нет. Нет, я нет, я набрал.
1086520	1089520	Нет, на самом деле, он не несекьюрный, да, я извиняюсь,
1089580	1095120	а он отправлял дебажную информацию, дебажную информацию в сервис-центре.
1095120	1099120	И там среди дебажной информации валялись, как бы, приватные клиенты.
1099220	1106180	То есть то, что полностью вз installing, ну, перiąдовACcurrency и там е-ч Biern el ...
1106500	1108180	كignment и и так далее,
1108180	1109760	поэтому, наверное, ещё иyn клиент,
1109780	1111260	поэтому его нужно вставить вот сюда,
1111260	1112480	так что weekends.
1112540	1117280	Ну, в общем, хоть и нелегче, но с генерацией адресов это вот,
1117320	1120040	буквально, совсем недавняя бага, вот.
1120120	1124720	Есть софт, который позволяет генерировать красивые адреса там с ноликами и так далее,
1124760	1127720	как бы, и, вот, в этой генерации была найдена уязвимость.
1127720	1131080	Все, кто автоматически ходят в эфир и шлют туда транзакции.
1132440	1133400	Что-то там запрашивают.
1134120	1137140	У них обычно приватные ключи в конфиге.
1137720	1141100	Пугаться тут вообще особо не нужно, потому что штука вообще простая.
1141200	1145840	На любом языке программирования, Python, Rust, JS и так далее,
1145840	1151000	есть там прям куча библиотек, которые вам позволят сгенерировать адрес эфириумный
1151000	1153380	и спокойно там все подписи ставить и так далее.
1153500	1156900	То есть все вообще делается на самом деле очень просто, там несколько строчек.
1156900	1161400	Вот, поэтому если вы что-то пишете автоматизированное, что работает там,
1161460	1163820	не знаю, с эфиром, как бы это очень просто.
1164700	1168120	Вот, то есть создать транзакцию, создать адрес, как бы создать ключ,
1168320	1169920	можно без особых проблем.
1171400	1175840	Вот, и еще, наверное, еще одна история про клиентов,
1176300	1179880	которые могут работать со смарт-контрактами, про которые часто забывают,
1180040	1181480	это различные девайсы.
1182400	1186880	Вот, на хакатонах довольно часто, как бы раньше там довольно популярно,
1186900	1190520	популярная штука была сейчас, по-моему, не очень уже стала, как бы популярная,
1190600	1193600	а так-то раньше, как бы много народа, как бы пытались соединить эти вещи.
1194880	1199200	Действительно удобно, как бы интернет вещей, ему блокчейн достаточно интересен,
1199240	1205460	просто потому что нет единой точки отказа, то есть плевать любая сеть, короче,
1205580	1210140	любая нода, как бы ваше устройство, считай, как бы подключено к сети, вот,
1210260	1215680	у вашего устройства есть приватный ключ, есть адрес, как бы, который никто, как бы,
1215680	1216780	там не остановит, как бы.
1216900	1221960	Никто им там особо, как бы, не управляет, вот, и оно там может всякие штуки делать.
1223920	1227480	Ну, у нас там знакомый проект, например, Робономика очень много занимается
1227480	1231400	соединением как раз всяких, там, не знаю, там роботов, датчиков, там, и так далее,
1231520	1233960	всего, как бы, с блокчейнами.
1234380	1239140	Если у вас есть какая-то девайсина, мы, например, делали там счетчик электричества,
1239140	1246580	там, 100 киловатт насчитал, он, соответственно, формирует транзакцию,
1246900	1250400	то есть, мое следующее показание – это 100 киловатт, значит, подписывает ее,
1251440	1254920	отправляет в сеть, у нас там была другая сеть, как бы, ну, неважно, например,
1255000	1260020	отправляет в эфир, а здесь смарт-контракт, как бы, принимает эти показания,
1260240	1265080	100 киловатт, у него есть, там, 90 предыдущие показания, как бы, теперь у него стало 100,
1266000	1273340	у него получается 10, и он за эти 10 списывает плату по текущей, там, цене,
1273340	1275620	как бы, за киловатт, то есть, такая, достаточно.
1276900	1281380	Понятная, как бы, история, и при этом, что, как бы, удобно, ни одного сервера нету,
1281740	1285580	ну, то есть, у вас нет ни облака, никаких, там, бэкэндов, никаких хайпи, короче,
1285640	1289660	у вас есть просто счетчик, и все, как бы, его просто как-нибудь подрубить, там, не знаю,
1289740	1295040	к Wi-Fi или куда-нибудь в сеть, он уже там сам разберется, там, достучится до какой-нибудь,
1295040	1300320	до какой-нибудь, там, из сотни нод публичных, и отправит, как бы, туда транзакцию,
1300320	1306560	вот он, там, считает, соответственно, показания, но для этого есть некоторые ограничения.
1306560	1318640	Технически, прошу прощения, в первую очередь, они связаны с тем, что такие девайсы должны быть
1318640	1323580	достаточно производительными, потому что им нужно будет сделать электронную подпись
1323580	1330400	с использованием вот такой электрической кривой, то есть, это арифметика с числами,
1330400	1336480	как бы, 256-битными, и на каком-нибудь, там, мелком каком-нибудь орудии,
1336560	1340460	там, которые еле-еле, там, как бы, что-то там пашет, как бы, вы, скорее всего,
1340460	1345880	такую подпись произвести не сможете. Ну, вот, а Raspberry Pi, например, может достаточно спокойно,
1345880	1352180	как бы, сформировать транзакцию и ее отправить. Вот, ну, и понятно, что там должна быть, там, сеть,
1352300	1357460	короче, там, вебка и так далее, то есть, возможность обращаться к ноде и сделать, по сути,
1357460	1361960	JSON-RPC вызов, вот, то есть, ну, это тоже хороший вариант, и вот.
1363560	1366460	Теперь, следующий такой кусочек.
1366560	1375620	Как бы, важный. Это ноды, то есть, сами, сами ноды, которые наши узлы, как бы, наши узлы вот этой
1375620	1382220	эфириум-сети. Кто-то из них майнером является, кто-то из них является, там, не знаю, валидатором,
1382220	1388880	все они умеют принимать, как бы, транзакции от пользователей, все они, как бы, друг другу,
1388880	1394520	как бы, про эти транзакции рассказывают, каждый из них, как бы, от других нод получает блоки,
1394520	1396520	тоже так.
1396560	1401460	То есть, они, как бы, строят цепочку по одним и тем же правилам, с одним и тем же консенсусом, вот.
1401460	1410660	Но, опять же, в централизованном мире, мы видим, как бы, такую историю, нам говорят, как бы, вот, у нас есть, типа, Монго,
1411860	1420460	она у нас, там, на четырех репликах, как бы, там, одна реплика, там, не знаю, в Китае, другая, там, в USA, как бы, третья реплика, там, не знаю, в России,
1421960	1425160	и вот между ними настроена репликация, вот они вот так общаются.
1425160	1426360	Вот этот софт, он одинаковый.
1426560	1431420	То есть, везде, как бы, здесь стоит Монго, здесь стоит Монго, здесь стоит Монго, здесь стоит Монго,
1431420	1436440	то есть, весь один и тот же код, один и тот же программный продукт одних и тех же версий.
1436440	1444440	Из-за того, чтобы я говорил, что эфир — это, как бы, в первую очередь, как бы, протокол, да, нежели имплементация,
1444440	1449420	у эфировских нод, у неё, вот, это вот просто самые, только известные, как бы,
1449420	1450540	имплементации ноды.
1450580	1452580	То есть, у вас здесь стоит здесь, здесь стоит Nethermind, написанный, там, не знаю,
1456560	1458260	на C-Sharp, здесь
1458260	1460100	GES на горшке написан,
1460420	1461660	здесь какой-нибудь
1461660	1464340	OpenEthereum, который на Rust
1464340	1466360	написан, как бы здесь стоит
1466360	1466840	Eragon,
1468600	1469380	такая чуть более
1469380	1472320	быстрая версия GES,
1472600	1474140	тоже на горшке написано.
1474700	1476360	Вот, и они все друг с другом, как бы
1476360	1478040	по одному и тому же протоколу,
1478040	1480240	в общем-то, общаются. Там есть у них отличия
1480240	1482080	в P2P, там, в стэках и так далее,
1482160	1484260	но, как бы, по большей части они все, как бы, друг друга
1484260	1485900	видят и друг друга понимают.
1486560	1488180	И в этом, собственно, крутость
1488180	1488820	как раз
1488820	1492420	всей вот этой вот истории,
1492560	1494400	потому что, когда были атаки на эфир,
1495260	1496580	ну, такие прям вот эксплойты
1496580	1498160	как бы на ноды, он
1498160	1500400	достаточно достойно их выставил, потому что
1500400	1502240	была там, по-моему, там атака на
1502240	1504320	там Rust-имплементацию, как бы
1504320	1506180	их там много сразу полегло,
1507580	1510220	а там горшечная, она, как бы,
1510400	1512340	осталась в строю,
1512380	1513860	ну, или наоборот, как бы было, вот.
1513860	1515720	Но смысл в том, что клиентов много,
1515720	1517180	и всех атаковать, как бы, сразу
1517180	1519380	не получится, найти дыры, как бы,
1519420	1521780	одновременно во всех. А оставшиеся
1521780	1523540	продолжат тащить сеть, как бы,
1523620	1525540	да, там отвалится, может, часть майнеров, там,
1525600	1527500	еще что-то, но сама сеть продолжит работать.
1528660	1529300	Это, опять же,
1529580	1531760	в пользу довода о том,
1531820	1533500	что блокчейны круто подходят, как бы,
1533540	1536200	в условиях тотального киберпротивостояния,
1536220	1537900	как бы, крайне устойчивой
1537900	1538420	сети.
1540780	1541440	Отличаются они,
1541980	1543980	ну, как бы, с точки зрения
1543980	1545700	протокола, отличаются они,
1545720	1547700	не сильно, вот, но
1547700	1549620	отличия все-таки есть, как бы,
1549680	1550680	ну, например, там у них
1550680	1553960	различные API, то есть какие-то стандартные
1553960	1555240	функции, как бы, есть везде,
1556440	1557860	вот, а какие-то,
1557940	1559720	какие-то вот эти, вот, как бы, функции
1559720	1561720	через JSON RPC, как бы, вызываются,
1561880	1563560	как бы, на некоторых нодах написано,
1563760	1565260	типа, not supported.
1566260	1567780	То есть кто-то там не отдает, как бы,
1567840	1569460	сырые транзакции в байтах,
1569560	1571540	кто-то там не позволяет, там, типа, не знаю,
1571620	1573500	подписаться на какой-то особый вид,
1573500	1575460	я не знаю, там, событий.
1576040	1577520	Тут еще там что-то, как бы, то есть
1577520	1579600	здесь уже, как бы, колдует
1579600	1580780	команды разработки.
1581580	1583420	И это, кстати говоря, разработка
1583420	1585660	нод, вот, собственно, вот этого софта.
1586580	1587640	Это тоже называется,
1587740	1589480	как бы, блокчейн-разработка, не та,
1589600	1591440	которую мы будем изучать,
1591460	1593340	то есть это, собственно, люди, которые сами ноды
1593340	1595760	разрабатывают. И эта работа,
1595840	1597440	она больше похожа на системную
1597440	1598560	разработку. То есть
1598560	1601320	можете считать, как бы, что те, кто
1601320	1603120	пишут эти ноды, ну, точнее, даже
1603120	1605280	не можете считать, а на самом деле там, собственно,
1605720	1612320	которая этим занимается это разработчики которые до этого разрабатывали движки субэдэ различные
1612320	1620300	это и там из маиску или какого-нибудь там кто делал там поздно с манги редис и и так далее
1620300	1626420	то есть те кто вот это писали прям вот по сути изнутри собственно сам сам как бы движок вот они
1626420	1634580	же пишут и вот чей на победителями в языках здесь однозначно как бы являются го и раз
1634580	1640940	потому что именно вот эти вот два языка как бы они могут обеспечить во первых как бы крайне
1640940	1648260	высокую производительность да как бы хотя как бы но блокчейн и да может и не славятся у нас
1648260	1652520	там миллионами tps и меня там каждый раз на конференции холод надо объяснять как вы
1652520	1659120	через сделаю вообще зачем сюда пришел как бы со своими этим блокчейн ими тормознут ими вот
1659120	1664260	но на самом деле внутри как бы здесь not как бы оптимизации производительности огромное внимание
1664260	1664520	в деле
1664580	1671300	поэтому пишется они в основном на низкоуровневых языках как бы гошка за счет того что у нее
1671300	1676760	многопоточность как бы хорошо сделано здесь прям это там серьезно там надо много к на эту держать
1676760	1682480	там подписываться на кучу событий все это трекать одновременно в нужном порядке устраивать ну а раз
1682480	1687500	потому что он просто позволяет там контролировать буквально там каждый чих то есть там вообще любой
1687500	1693860	как бы там любой алгоритм прямо как бы гвоздями прибит как он исполняется максимально оптимизирован
1694580	1700400	вот поэтому там блокчейн и как бы на питоне блокчейн и там на растя не сильно приветствуется
1700400	1706700	но вот есть еще пример как бы например nether майнт тоже там знакомый к команда как раз писал
1706700	1712580	они написали его на си шарпе вот что в принципе наверно как бы тоже вполне себе варианта у них
1712580	1719900	очень достойных сочи клиент получился как бы nether майнт его тоже используют во все вот так что и на
1719900	1724420	java вот эта консорциум гипер ledger тоже как бы сделал свою имплементацию
1724580	1731240	на java не знаю как она поддерживается мы с ней дела не имели далее тоже по терминологии
1731240	1739280	как бы вот этих вот нод когда я буду говорить ну то есть по сути есть наверное два вида как
1739280	1747800	бы нот ну точнее не 2 я первым может быть сюда даже добавил как бы архивные ноды если
1747800	1753580	говорить как бы об эфире значит архивная нода я прям с нее наверно начну
1754580	1761540	архивная нода если вам кстати такая нужна то вы можете получить там в сервисе типа алкими возможно
1761540	1767360	вам и понадобится если вам нужна своя нода как бы вы идете как бы вот здесь вот регистрируйтесь и вам
1767360	1776060	бесплатно дадут доступ но по сути прям дадут урл секретный ваш собственный как бы к по которому вы
1776060	1784020	можете обращаться к ноде эфира там у меня есть там ноды майнета есть но до этого тестового герле а вот
1784580	1789200	и вы можете как бы с ней работать как бы это будет бесплатно пока вы там совсем и не нагрузить там
1789200	1795080	немеряным количеством запросов вот тогда с вас денег попросят вот для обучения прекрасно как бы
1795080	1803240	хватает значит архивные ноды это самые честные ноды блокчейна то есть та которая собирает все
1803240	1812000	блоки начиная там с первого и до текущего вот такого вот блока она полностью ведет короче говоря
1814580	1820640	абсолютно все апдейты она сохраняет все транзакции на ней есть которые были за время существования
1820640	1830720	эфира и что самое важное вы у архивной ноды всегда можете запросить состояние прям стоит то есть
1830720	1836780	обратиться к этой базе данных на на какой-то определенный блок зафиксированы если вы говорите
1836780	1843820	хочу короче что ты мне сказала как бы вот начиная с этого блока какое было вот это вот значение там
1844580	1850800	тракте как чему была равна вот этот переменная там не знаю там три дня назад ровно в 5 утра вот на
1850800	1855540	этот номер блока и архивные ноды вам ответить то есть она умеет перепроигрывать весь эфир как бы
1855540	1864680	вперед-назад как вам нравится она довольно большая сейчас чтобы ее крутить как бы надо там там больше
1864680	1872120	двух терабайт место занимает эфир по моему 16 или 17 терабайт вот это вся как бы полностью вся инфа
1874580	1879380	и чтобы просто догнать эту ноду до последнего блока она же по-честному как бы бежит его
1879380	1884000	фабула по блоковых накатывает как бы нужно несколько дней на очень хорошем и мощном
1884000	1895720	сервере так что эта штука не дешевая крайне дайте мне секундочку потерял
1900500	1904060	вот а
1904580	1911820	архивные надо штука довольно такая прожорливая вот и в общем один из путей как бы развитие эфир
1911820	1922280	это как раз но облегчение not вообще по сути даже как бы отказ от архива вот этого от архива
1922280	1927640	транзакции от архива блоков от снапшотов вот этой вот базы как бы это один из путей по сути
1927640	1934160	развития эфира вы не можете скелет эфир довести его там до десятков и сотен тысяч транзакций в
1934580	1939620	и все это как бы хранить вот на архивной ноде у вас как бы никого компьютер как бы никогда это
1939620	1946280	не потянет вот поэтому но при этом как бы должны соблюдаться все крипто графические доказательства
1946280	1950720	того что какие-то конкретные транзакции были включены в блоке там и так далее поэтому задача
1950720	1957460	такая немаленькая обычно мы все используем вот когда вот я смита маскам до отправлял
1957460	1964420	транзакция все используют так называемые фолл-ноды это нода которая тащит актуально
1964580	1972820	стоит database то есть последнего последнего формата она может не сохранять как бы транзакции
1972820	1978080	вот она просто накатывает как бы новые блоки получают как бы новый блок накатывают и и
1978080	1984440	растает database держит последний там не знаю там последний какой-то кусочек как бы блокчейна
1984440	1991840	вот держит актуальную версию вот этой вот как бы стоит базы данных перепроверяет вот но при
1994580	2002320	всеми по всей по сути истории вот но еще понятие light но да как бы но тут ее прям как-то
2002320	2007600	формализовать довольно сложно потому что от структуры блокчейна сильно зависит как бы ну
2007600	2013600	что вообще нужно от этой light но да то есть легкая нода который вообще как-то ну там минимальная там
2013600	2019660	самое дешевое в поездка который просто висит где-то там на конце как бы блокчейна у нее
2019660	2024340	есть там какая-то может маленькой стоит database который следит только за заданными адресами
2024580	2029840	зафиксирован имя зафиксирован ими контрактами протоколами то есть здесь можно конечно
2029840	2036840	народить как бы чего угодно очень много простора для творчества вот поэтому то есть это такое
2036840	2043560	понятие как бывает но до легкий но вы там чуть ли не ноты в браузере которые понимаются вот в
2043560	2048260	некотором видео но были идеи до бутыльных которые вообще как бы работает из браузер то есть вы
2048260	2052420	включаете браузер власты к аппарату джаз на странице как бы начинает общаться с другими
2052420	2054520	браузерами и учиться к тому-то нет поршивны的 района видов sacred board с той Halloween
2054580	2062560	как бы в работе такого блокчейна такие идеи тоже это были ну и конечно же но до валидатор которые
2062560	2070840	производят блоки вот но это по сути то же самое и ему сгодится как бы full но да да как бы валидатор
2070840	2076000	штука нагруженная получает последнюю версию блока у него есть как бы текущий стейт даты
2076000	2082020	бейсом формирует как бы новый блок формирует изменения в стейт даты бейс как бы все это
2082020	2090140	записывает как были отдает как другим ну то есть майнеры майнеры валидаторы так далее вот это значит
2090140	2098600	к софту мы про надо еще тоже как бы поговорим с вами вот это просто для того чтобы вы обозрели
2098600	2107900	как бы горизонт софта как бы с которым придется работать а теперь значит про распределенные базы
2107900	2111060	данных распределенные базы данных
2112020	2120900	ну то есть блокчейн подают по сути как какой-то какое-то новое не знаю там направление какой-то
2120900	2128580	отдельный какой-то там не знаю там область знания но на самом-то деле на самом деле сама вот это
2128580	2134760	как бы идея вот этого блокчейна как бы сетевого консенсуса она уже изо всех сил прорабатывается
2134760	2141840	в базах данных то что много у кого были бы были базы данных вот чтобы изоляция
2142020	2146860	транзакции там какой-то хэдлок репликация было у кого-нибудь
2146860	2160340	так понятно ну ладно ну вообще это довольно как бы важная такая концепция и кстати говоря
2160340	2166500	над sky до что для блокчейна разработчика база данных это типа одна из областей как бы знаний
2166500	2172020	в которой хорошо бы хорошо рубать у нас в общем то наверное если так
2172020	2177780	сформулируйте по требования какие был член разработчики крутые то но так вот если на
2177780	2184280	пальцах то это человек который имеет хорошие такие глубокие знания в трех из пяти как бы
2184280	2190240	областей области такие лишь первый это алгоритм и структуры данных второе это там криптография
2190240	2197100	но это понятно естественно это все как вы говорили третье это как ни странно базы данных 4 это
2197100	2202020	операционная система потому что но именно прям вот как внутри как бы устроена операционная
2202020	2207120	система переключения процессов всякие там страничные механизмы так далее то что там на
2207120	2214200	самом деле очень много всего используется крайне эффективно как бы зубья из алгоритмов и 5 это там
2214200	2220860	безопасность сетевые протоколы то есть умение построить именно сам протокол там я тебе рандом
2220860	2226400	ты мне подпись этого рандома как бы я тебе в ответ как бы там еще что то то есть то есть понимание
2226400	2231840	таких низкого уровня механизмах тоже круто для всего в трех из пяти этих областей как бы
2232020	2240120	да то есть если вы действительно хорошо разбираетесь то с букчейнами будет не очень сложно значит
2240120	2249720	про репликации я уже много раз говорил значит мы говорим о самом сложном виде репликации которые
2249720	2256820	есть он называется master мастер значит таким мастер и если вы заходите на индекс там на какую
2256820	2261720	бы там страницу там не знаю на страницу маркета и делайте выборку дай мне все товары как бы цена
2262020	2269340	короче говоря и которые там чайники там например у вас происходит выборка из базы данных и вам api
2269340	2275160	вам api соответственно выдает все вот эти чайники отрисовывать значит на самом деле вы обращаетесь
2275160	2283820	к базе данных который называется слив и в этой базе данных лежат все чайники но она ридон ли
2283820	2290940	то есть она заточена на число запросу что вот этих селектов их немерено их там сотни тысяч и
2290940	2296460	поэтому как бы в яндексе огромное количество этих слоев серверов там не знаю там сотни как
2296460	2302580	бы там я не знаю там сотни там не знаю может быть тысячи а на самом деле серверов в которой
2302580	2308520	ведется запись куда добавляются чайники чайники добавляются гораздо реже чем они всплывают как
2308520	2315420	бы запросах такие базы как бы которые именно у right они называются мастер вот вот мы как бы
2315420	2320880	все это как бы архитектуры этих слоев как бы забыли у нас есть только мастера теперь
2320940	2331540	вот по сути майнеры там валидаторы блок-блок продюсер это база данных она довольно часто
2331540	2337020	эта штука как бы нужно если мы говорим о банке о каком-то дата у нас есть там не знаю там 100
2337020	2345540	долларов на счету здесь как бы а банк международный и у него вот эта реплика там юсей как бы вот эта
2350940	2357260	и нам нужно консистентность между ними соблюсти то есть если человек одновременно отправит запрос
2357260	2362880	сюда и сюда и скажет как бы здесь минус 100 баксов я покупаю велосипед а здесь минус 100 баксов я
2362880	2368140	покупаю там чайник то как бы надо будет что-то делать то есть либо у него станет баланс минус
2368140	2375880	100 долларов вот ну то есть поставка не договорятся как бы и там придется там как-то это решать либо
2375880	2380840	каждый из этих серверов должен поменяться как бы сказать у меня вот столько времени а чувак хочет
2380940	2386700	снять 100 баксов ты типа согласен тут говорит но у меня время попозже так что я вот ему дам от лук
2386700	2393420	как бы а тебе как бы разрешаю выполнить эту транзакцию и потом еще и вот и вот это спросит
2393420	2399740	как бы это же получит вам ответ или там или динай посчитает эти голоса вот в общем мастер мастер
2399740	2405500	репликация штука такая непростая вот и когда начинаешь читать эти алгоритмы вот этой мастер
2405500	2410920	мастер репликации там raft access если вам там интересно то они почитают
2410940	2416340	то после изучения как бы консенсуса в блокчейне вы увидите что это вообще как бы одно и то же
2416340	2423060	просто как бы здесь будут вместо типа ответов битиков типа окей не окей будут просто электронные
2423060	2427980	подписи участников ну и проверка что они в правильном реестр там находится и так далее
2427980	2435900	то есть здесь те же самые как бы подтверждение между репликами это значит тут по сути репликация
2435900	2440940	данных между между базами данных теперь что такое брайтах от лока
2440940	2449340	мы теперь смотрим на одну базу данных в которой постоянно валится дофига всяких запросов там
2449340	2456000	вставка удаления но у нас там в базе данных там соответственно строчки как бы кто-то как бы добавил
2456000	2461160	новую строчку там с васей как бы его 100 долларов то таки за вычеркнул какую-то строчку там у него
2461160	2469020	баланс до нуля кто-то про апдейтил строчку insert апдейт и доделит вот они валятся тут мастер реплика
2470940	2478980	как она это дело процессе во-первых если она будет их просто накатывать как бы атомарно каждую
2478980	2485820	транзакцию вот так вот как бы на таблицу возникает проблема различных блокировок то есть там я сейчас
2485820	2491680	вот апдейт вот эту вот строчку а мой менеджер делает выборку там не знаю делает среднее там
2491680	2499920	не знаю число как бы денег на балансе и вот пока как бы я вот эту свою апдейт не закончу не разберусь
2500940	2505180	его менеджеру придется подождать потому что он там тоже там стучится со своими там не знаю там
2505180	2511980	селекциями там и так далее то есть я вот эту штуку блокирую на это время или оставляя там тысячу новых
2511980	2519180	как бы строк или еще что-то а еще как бы в базы данных вот эти вещи они объединяются в транзакции
2519180	2523940	то есть там сначала две вставки потом одно удаление потом один апдейт то есть это в одну
2523940	2530940	таблицу другую то встретит 4 и все это должно выполняться еще атомарно то есть
2530940	2536820	либо все выполнилось либо все как бы откатилась целиком то есть баз данных нам так позволяют
2536820	2541760	делать как бы не задумываться что там под капотом как бы а под капотом там как раз находится вот этот
2541760	2549900	в райдах от лог то есть лог который пишет только вперед значит туда вот эти все транзакции складываются
2549900	2560060	t1 t2 t3 прям в порядке в котором они приходят t4 там и у него есть понятие у этого в райдах лога так называемый чекпоинт
2560940	2570780	ну потом опять сколько транзакции потом опять как бы потом опять чипом там опять в транзакции опять
2570780	2578480	как бы чип он вот чип видом . в которой в нашей базе данных информация фиксируется то есть сделали
2578480	2584540	т1 т23 т4 поставили чекпоинт то есть провели первую транзакцию вторую транзакцию третью
2584540	2590740	транзакцию 4 транзакция за комит или по сути как бы сделали комик в базы данных
2590940	2595540	есть прям собственно инструкция такая как бы комит провести вот эту мою транзакцию как бы
2595540	2604140	и в конце как бы сделать камень если все хорошо прошло вот соответственно база запоминает свои
2604140	2610980	так называемые снэпшоты снимки как бы на каждый чекпоинт и если вот здесь вот я вырублю свет
2610980	2616260	внутри как бы чекпоинт ну то давайте вот здесь вот короче говоря выключу свет то есть я сделал
2616260	2622260	там закатил первую транзакцию вторую а вот 3 4 не успел как бы у меня компьютер вырубили то
2622260	2625960	в следующий раз когда база поднимется она поймет как бы что она находится вот на этом
2625960	2631820	чекпоинте она поймет что вот эти накаченные мной изменения на диск запиши записаны они
2631820	2638140	еще не за комыми чен и то есть они еще не в комите и она как бы откатит базу да вот это
2638140	2644520	учит по это и начнет как с него работать а начнет наказывать как бы то есть такие как
2644520	2646140	бы именно такието
2646260	2650520	точки невозврата, по сути, вот этим, как бы, чекпоинтами,
2650680	2653660	и базы данных умеют быстро между ними переключаться,
2653780	2654920	то есть быстренько сбрасывать.
2656220	2660000	То есть там есть версии строк, там, в общем, куча разных механизмов.
2660080	2662420	Это, кстати, очень, ну, очень полезно почитать.
2662580	2666840	Полезно почитать, как это сделано там в MySQL, в Postgres, наверное,
2666840	2670520	наиболее такая, как бы, хорошо описанная, как бы, вот эта вот история
2670520	2673700	с версионированием строк, как они вот с этим работают.
2673700	2678480	То есть интересно, да, почитать, как это все сделано в KVL, в базах данных.
2678740	2682260	Значит, в KVL, в базах данных, вот всякие наши Mongo и Redis,
2682760	2686080	вот эти вот транзакции, то есть почему они такие быстрые,
2686140	2689260	потому что они очень простые, то есть они просто, как бы, тупые,
2689320	2692060	они не бегают, как бы, не захватывают там миллионы строк, как бы,
2692080	2696560	в одной транзакции, вот, ну, либо они как-то очень так
2696560	2700340	аранжируются там правильно, там быстрее работают чекпоинты,
2700340	2703320	вот эти вот откаты, как бы, поэтому эти базы, они более,
2703440	2703680	более...
2703700	2705420	более быстрые, вот.
2705460	2708380	Но они, конечно, такую логику, как SQL, не позволяют реализовать,
2708460	2712360	там, типа, не знаю, там, там, очень сложных выборок.
2713200	2715580	Вот, и вот эта вот конструкция называется Write a Headlock.
2717100	2721180	Секрет KVL в баз данных, как раз, вот тоже, в Mongo и Redis,
2721220	2727440	в том, что они бегут по вот этому логу крайне предсказуемо
2727440	2730160	с точки зрения потребления ресурсов.
2730160	2732560	То есть они вот эти вот расстояния между чекпоинтами,
2732560	2736740	они, в отличие от SQL, очень здорово измеримы, то есть прям
2736740	2739240	по количеству обновляемых ключей, то есть здесь прямо
2739240	2742820	есть какое-то такое фиксированное N, как бы, и они очень здорово
2742820	2747180	отмеряют вот эти вот кванты исполнения, и у вас компьютер,
2747180	2750940	ну, задействован, задействован на полную, как бы, мощность,
2751020	2753560	он прям жрет максимальное количество вот этих транзакций.
2753640	2756420	А в SQL потенциально может прилететь вот эта вот прям
2756420	2759640	огромная какая-нибудь штука, которая все это дело, как бы,
2759640	2761120	затормозит сильно надолго.
2761120	2768060	Ну, и в SQL базах там бывают, как бы, всякие там процедуры
2768060	2772520	оптимизации вот этих таблиц, уплотнения, когда они приходят,
2772580	2775600	здесь все начинает тормозить, все, все, как бы, останавливаются,
2775740	2778900	процессинг вау останавливается, вот.
2780360	2785100	И есть такой класс, как бы, k-value баз данных, levelDB,
2785600	2789680	его наследница rocksDB, здесь такие две, короче говоря,
2789680	2790900	k-value базы данных.
2791120	2796900	Которые знамениты тем, что они наиболее предсказуемым образом
2796900	2799900	вот этот вот вал, как бы, процесса, то есть очень-очень ровно,
2800180	2804240	то есть никогда не бывает у вас там на компьютере, что CPU у вас вот такой,
2804320	2809380	а потом вдруг вот такой вот, потому что пришел скрипт компактификации
2809380	2813860	вот этой вот таблицы или там что-нибудь еще, то есть или там пришел там,
2813900	2817180	я не знаю, там какой-то супер запрос, который все, как бы, повалил,
2817180	2820860	то есть они работают прям ровно, то есть больше ключей вот так вот,
2820960	2821100	вот так вот.
2821120	2826120	И пока не упрутся в 100%, как бы, ну, там уже, как бы, да, ловить нечего,
2826200	2828420	там все умерло, вот.
2830020	2835120	И, ну, у них там специально от слова, как бы, level, там на самом деле идет,
2835900	2841600	как бы, вот этот первый вал в write a headlock, данные из него собираются,
2841680	2847140	как бы, там во второго уровня, там level 2, как бы, там упаковываются,
2847140	2851080	там достаточно тоже предсказуемо, потом level 2, как бы, еще,
2851120	2855400	упаковываются в следующий, как бы, лейер, вот.
2855440	2859680	И вот таким вот образом здесь получается такой очень ровный, предсказуемый процессор.
2859800	2864320	Поэтому вот блокчейн ноды выбирают вот такие вот базы данных,
2864480	2870380	level db, rocks db, под капотом и у Геса, и там, по-моему, и у Эрегона,
2870760	2875340	и в RAST-имплементациях, и в Тоне, и в Polkadot, короче говоря,
2875340	2880880	ну, то есть и в разных блокчейнах, как бы, под капотом очень часто стоит вот это вот level db,
2880880	2884820	или rocks db, как раз вот за счет вот этих вот ее фишек.
2885700	2891140	Очень жестко структурированные транзакции, прибитые прям гвоздями, там, по размеру,
2891220	2895400	по времени исполнения, предсказуемая вот эта компактификация, как бы,
2895620	2901440	и отсутствие таких производительности просадок таких жестких, вот.
2901520	2903660	Потому что для блокчейна это смерти подобно.
2904280	2910360	Если вы можете какой-то транзакции вызвать, не знаю, залипание блокчейн ноды
2910880	2914140	в очень серьезное время, как бы, вы, по сути, атаковали блокчейн.
2914340	2919920	Вот, если найдете такую штуку, вот, можете приватно отрепортить, как бы, разработчикам,
2920020	2920780	получите баунти.
2922660	2929740	Теперь, опять же, с этой точки зрения, тоже, как бы, у кого не было, у кого не было баз данных,
2930280	2932020	объясню, что такое хранимая процедура.
2932280	2938480	Хранимая процедура – это как раз вот эта вот пачка вставок, делитов, еще какая-то логика,
2938480	2940780	там, типа, если, как бы, там, не знаю, там, денег.
2940880	2945820	Больше нуля, то еще сделать вставку в такую-то таблицу, и так далее, и так далее.
2946320	2947440	Там, проапдейтить.
2947880	2953420	И вся вот эта вот штука, она, по сути, лежит в базе данных, прям код, как бы, вот этой вот процедуры,
2953540	2958640	он прям лежит прямо в SQL-базе данных, и вы вызываете его названием функции.
2958700	2964860	Ну, например, в Тинькофф, как бы, приносите деньги, там, не знаю, там, оплата, как бы, за кредит.
2965280	2970380	У него в базе вызывается вот эта вот хранимая процедура, что же это про сейджи,
2970880	2978540	как бы, увеличит вам баланс, потом, там, типа, удалит, там, типа, задолженность за текущий месяц,
2978800	2981780	за current month, там, не знаю, платеж, например, если за кредит.
2982460	2987300	Типа, если, как бы, там, остались еще деньги, как бы, на кредите,
2987420	2992380	то он вам еще добавит, короче говоря, еще план платежей на следующий месяц,
2992900	2995260	проапдейтит ваш кредитный рейтинг.
2995860	2999600	И исполняться вот эта функция, она будет тоже, как бы, атомарной.
3000400	3000840	Да.
3000880	3004680	То есть либо выполнится, либо целиком не выполнится, как бы,
3004740	3009260	либо целиком выполнится, то есть для того, чтобы целостность в базе данных обеспечена.
3009400	3011600	Такие штуки называются хранимые процедуры.
3012980	3016100	Вот, там, по-разному, там, вот, там, вызывают в разных базах,
3016180	3020980	там, где функции, где хранимые процедуры, вот, в общем, там, терминологии, как бы, очень много.
3021660	3025260	Но, по сути, это, как бы, пачка атомарных действий с...
3025900	3028400	Атомарная пачка действий из базы данных.
3028860	3030640	И смарт-контракты очень похожи на вот эти...
3030880	3032640	хранимые процедуры. То есть если просто
3032640	3034540	рассматривать эфир как базу данных, то как бы
3034540	3036420	смарт-контракт это, можно сказать, как бы в нем
3036420	3038560	хранимые процедуры. Транзакции,
3038640	3040120	это понятно, как бы пишущие,
3040480	3042800	это транзакции, которые пишут
3042800	3044720	в базу, то есть такая же
3044720	3046700	аналогия. Консенсус
3046700	3049140	алгоритма это репликация мастер-мастер,
3050260	3050660	то есть точно
3050660	3052700	так же как бы то, что здесь
3052700	3054760	у нас ноды для того, чтобы
3054760	3056820	договориться о том, как бы
3056820	3058740	принять блок или не
3058740	3060540	принять блок, использовать для этого как бы
3060540	3062540	деньги какие-то там, я не знаю,
3062660	3064460	там Proof of Work или там Kilowatt,
3064560	3066600	или там в Proof of Stake договариваться
3066600	3068820	как бы входишь ли ты в список валидаторов,
3068880	3070480	за которые деньгами проголосовали.
3070880	3072340	Это на самом деле второй вопрос.
3073580	3074940	Здесь просто получается
3074940	3076180	решать вот эту проблему
3076180	3078720	распределенного консенсуса этой репликации
3078720	3080780	при помощи экономических механизмов.
3080780	3082780	Потому что многие действия как бы просто
3082780	3084680	невыгодны большинству участников.
3086020	3086840	Вот. А
3086840	3088680	по сути это как бы и есть та самая
3088680	3090080	репликация мастер-мастер,
3090080	3092200	причем это на
3092200	3094520	низком уровне это репликация
3094520	3096040	LevelDB, ну там или
3096040	3098360	ROXDB, там неважно, какие вы или базы данных
3098360	3100360	как бы получаются, на самом деле как бы по сути
3100360	3102580	это механизм репликации
3102580	3104260	для вот этих вот баз данных, так если
3104260	3105900	прям совсем как бы на пальцы.
3107440	3107860	Вот.
3108120	3110300	Тогда в этом случае наш write a headlock
3110300	3112180	вот этот, в который мы как бы складируем
3112180	3114000	транзакции одни за другой, потом их
3114000	3116500	оформляем как бы в пачки и накатываем
3116500	3117920	их, то есть на там
3117920	3118520	чекпоинт,
3120080	3122080	то как бы вот это вот наш пул транзакций
3122080	3124140	в P2P, который висит
3124140	3125940	полностью такой публичный,
3126620	3127800	а чекпоинты
3127800	3128980	и коммиты в этом
3128980	3132440	в этом write a headlock
3132440	3134080	это по сути как бы новые блоки.
3134920	3135920	То есть произвели блок,
3136040	3138140	взяли вот такое вот количество транзакций,
3138740	3139840	а тамарных накатили
3139840	3142080	как бы на state database, если потом блок
3142080	3143780	нам не понравился, мы его откатили
3143780	3144960	так же как бы а тамарных.
3145700	3148000	Там вернулись вот сюда как бы к предыдущему
3148000	3148920	как бы чекпоинту.
3150080	3153100	Это к тому, что
3153100	3154980	как бы блокчейн не какие-то там
3154980	3157020	космолеты, а на самом деле в общем по сути
3157020	3158740	используют штуки, которые
3158740	3161020	большие, там крупные
3161020	3162880	как бы сайты, высоконагруженные
3162880	3164900	приложения, как бы используют уже годами.
3165080	3166320	То есть там уже очень много
3166320	3169120	всего сделано. Там под капотом на самом
3169120	3170700	деле все те же самые механизмы
3170700	3172020	находятся.
3173200	3174500	Вот это про как бы
3174500	3176640	аналогии с базой данных.
3178320	3179240	Теперь про
3179240	3180060	сам шаг.
3180080	3182120	Смарт-контракт. Так, давайте по прошлому.
3182280	3183860	Материалы есть? Какие-то вопросы?
3189960	3190520	Тишина.
3191240	3191720	Все понятно.
3192160	3194380	Да, вопросов нет. Отлично.
3195420	3196560	Так, я еще хотел узнать
3196560	3200360	как идет ли у нас
3200360	3202000	запись. Да, идет. Отлично.
3202480	3203700	Так, поехали.
3203980	3204860	Вращаю обратно.
3208180	3209960	Теперь что же
3210080	3212120	с собой представляется собственно сам
3212120	3214400	смарт-контракт? Что на них можно
3214400	3216080	делать? Тоже немножко сегодня
3216080	3216840	поговорим.
3218600	3220120	Вернемся обратно как бы
3220120	3222180	к той нашей как бы прошлой табличке.
3222560	3224100	Что значит у нас там был Вася,
3224580	3226520	у него соответственно
3226520	3227900	был баланс эфира,
3228840	3230320	у него был анонс
3230320	3232040	счетчик его транзакций,
3232680	3234320	у него не было никакого кода,
3235400	3236480	вот, у него не было
3236480	3237960	никакого там сториджа.
3240080	3242440	Вот. И потом он задеплоил
3242440	3243740	смарт-контракт в сеть.
3244200	3246060	У этого смарт-контракта появился
3246060	3248620	адрес, что очень важно. То есть у смарт-контрактов
3248620	3249300	есть адрес.
3250020	3252260	У него есть баланс эфира. Когда он создал
3252260	3253940	он, например, был ноль, как бы, но
3253940	3256220	в принципе, если контракт позволяет
3256220	3258060	его код принять себе
3258060	3259760	как бы эфир, то он может как бы быть
3259760	3262040	и не нулевым. У него тоже
3262040	3263720	есть нонс у этого контракта.
3264160	3266040	Он меняется, если контракт
3266040	3267960	создает другие контракты, то есть
3267960	3270040	деплоит как бы там следующие,
3270080	3271840	как бы там контракты, то у него
3271840	3272720	нонс меняется.
3274040	3274480	Вот.
3275860	3277320	У него есть байт-код.
3278980	3279940	То есть прям вот
3279940	3281500	как, не знаю, как содержимое
3281500	3283120	экзешника, грубо говоря, по сути.
3284340	3285940	Машинные инструкции, как бы, которые
3285940	3286920	исполняются EOM.
3287800	3289860	А, и этот код, как бы, может обращаться
3289860	3291620	к своему собственному сториджу,
3291780	3293760	который представляет собой k-value.
3293960	3294780	Я вообще решил, наверное,
3295340	3298120	ну, я раньше всегда рисовал вот так вот,
3298120	3300060	типа кусочки в этом k-value, там, типа,
3300080	3302020	что у адреса один, там, такие-то данные,
3302080	3304340	у адреса два, как бы, вторые, другие данные.
3304840	3306100	Но это вообще не очень правильно,
3306440	3308020	когда я вам рисую, как бы,
3308080	3310020	ну, я очень люблю вот эту картинку,
3311040	3312040	когда здесь, типа, код,
3312300	3314080	а здесь у нас записано, типа, что там
3314080	3316040	у Васи, как бы, 100 токенов, значит,
3316140	3318440	а у Пети 200 токенов.
3318500	3320020	Вот просто может, как бы, показаться,
3320140	3322120	что они один за другим идут,
3322220	3324180	как бы, вот эти вот адреса, там, как-то в памяти
3324180	3325840	они, там, располагаются рядом.
3326120	3328040	На самом деле, ну, не так.
3328040	3330020	То есть вся адресация, она именно k-value,
3330080	3332240	то есть у этого есть ключ, как бы,
3332400	3333500	у этого есть ключ,
3334240	3336240	а value является,
3336320	3337280	как бы, вот этой вот штукой.
3337680	3340000	Вот, может, какой-то другой способ изобретать, рисовать
3340000	3341640	эту вещь. Вот.
3343500	3343980	Значит,
3344280	3348000	очень важная, как бы, история о том,
3348160	3349400	как устроен
3349400	3351920	storage-контракт. Это штука
3351920	3353820	такая, как бы, тоже
3353820	3355160	относится к тому, что я сейчас
3355160	3356340	рисовал.
3358120	3358600	Смотрите,
3359280	3359900	у меня,
3360080	3362680	один и тот же код, у меня есть какая-нибудь переменная,
3362680	3364680	variable a,
3364680	3368280	значит, она где-то, как бы, в storage-е находится.
3368280	3370280	Вот, вот здесь, вот у меня, вот здесь,
3370280	3372280	ссылается, как бы, на переменную a.
3372280	3374280	У меня там записано 100.
3374280	3376280	Как бы, потом я говорю a равно 200,
3376280	3378280	как бы, здесь становится 200.
3378280	3380280	И
3380280	3382280	вот этот вот код, представьте,
3382280	3384280	что он...
3384280	3386280	Ой, простите.
3386280	3388280	Тихо, ну.
3388280	3389280	Что этот код, он, как бы, не имеет никакого значения.
3389280	3391280	Что этот код, он, на самом деле, находится
3391280	3393280	на большом количестве разных компьютеров
3393280	3395280	с разной архитектурой.
3395280	3397280	Если бы мы этот код
3397280	3399280	запускали, как бы, в разных, там,
3399280	3401280	ну, не знаю, там, на JS
3401280	3403280	и в разных браузерах, на
3403280	3405280	C++, короче говоря, на разных
3405280	3407280	машинах, то у нас у этой
3407280	3409280	переменной каждый раз бы выделялся
3409280	3411280	определенный адрес памяти, какой-нибудь, там,
3411280	3413280	0x, там, не знаю, там,
3413280	3415280	fa0000001,
3415280	3417280	кто там на C, там, прогал.
3417280	3419280	Вот.
3419280	3421280	И эти адреса
3421280	3423280	этой переменной, они, на самом деле,
3423280	3425280	были бы разные. То есть в другом контракте,
3425280	3427280	как бы, по D2A было бы
3427280	3429280	выделено, было бы выделено другое
3429280	3431280	место в памяти с другим
3431280	3433280	адресом, там, и так далее, и так далее.
3433280	3435280	Значит, для того, чтобы
3435280	3437280	даже storage,
3437280	3439280	как бы, имел полностью детерминированный
3439280	3441280	вид на всех, как бы, компьютерах,
3441280	3443280	переменные в смарт-контрактах,
3443280	3445280	все внутренние, как бы, они адресуются
3445280	3447280	исключительно по ключу. Вот.
3447280	3449280	Причем довольно просто.
3449280	3451280	Смотрите, у меня есть смарт-контракт,
3451280	3453280	я объявил в нем первую переменную
3453280	3455280	размером,
3455280	3457280	ну, здесь у нас
3457280	3459280	все будет размером 256 бит,
3459280	3461280	практически все по дефолту, то есть любые
3461280	3463280	данные размером 256 бит, любые
3463280	3465280	ключи размером 256 бит.
3465280	3467280	Сейчас объясню, почему.
3467280	3469280	Я создал первую
3469280	3471280	переменную, и
3471280	3473280	грубо говоря, так называемый
3473280	3475280	слот, есть такое, как бы,
3475280	3477280	понятие в смарт-контрактах, вот этот вот слот,
3477280	3479280	как бы, его адрес
3479280	3481280	будет равен хэшу,
3481280	3483280	вот тот самый, как бы, там,
3483280	3485280	алгоритм хэширования, от
3485280	3487280	адреса контракта и
3487280	3489280	номера вот этого слота.
3489280	3491280	Вот это, как бы, называется слот
3491280	3493280	номер. Я
3493280	3495280	переменную a объявил первой, как бы, она
3495280	3497280	заняла слот 0.
3497280	3499280	Она стала, как бы, вот сюда. То есть
3499280	3501280	слот номер-то, конечно, 0,
3501280	3503280	и когда я создам, как бы,
3503280	3505280	переменную b, скажу, что там
3505280	3507280	b равно a,
3507280	3509280	и она у меня, переменная b, как бы,
3509280	3511280	попадет в слот номер 1,
3511280	3513280	хэш от контракта и от
3513280	3515280	единицы. Вот здесь у меня будет
3515280	3517280	переменная a, здесь будет переменная b,
3517280	3519280	которая там будет равна,
3519280	3521280	там, не знаю, там, 200.
3521280	3523280	Тем не менее,
3523280	3525280	то есть сам адрес
3525280	3527280	вот этой вот ячейки в сторидже,
3527280	3529280	он будет хэшом
3529280	3531280	от адреса контракта и
3531280	3533280	единицы.
3533280	3535280	Для чего это сделано?
3535280	3537280	Это сделано, чтобы на низком уровне
3537280	3539280	в той же самой k-value базе данных,
3539280	3541280	да, в нашей leveldb или roxdb
3541280	3543280	один и тот же
3543280	3545280	контракт работал всегда,
3545280	3547280	ну, чтобы вот эту информацию
3547280	3549280	о сторидже контракта хранить в
3549280	3551280	k-value базе данных.
3551280	3553280	То есть я на другом компьютере
3553280	3555280	синканул блокчейн,
3555280	3557280	накатил, как бы, свою state database,
3557280	3559280	у меня там вот по вот этому адресу
3559280	3561280	лежит переменная a
3561280	3563280	от моего контракта,
3563280	3565280	а по этому адресу
3565280	3567280	лежит переменная b от адреса.
3567280	3569280	Ну, от адреса контракта.
3569280	3571280	Я могу всегда ее найти.
3571280	3573280	И это будет абсолютно
3573280	3575280	одинаково на всех компьютерах.
3575280	3577280	То есть даже, как бы, значения переменных
3577280	3579280	вот эти, они, по сути, будут в блокчейне
3579280	3581280	реплицироваться через обновление
3581280	3583280	вот этой вот state database.
3583280	3585280	То есть кто-то выполнит транзакцию,
3585280	3587280	запишет что-то в b,
3587280	3589280	у b появится слот
3589280	3591280	в сторидже, этот слот
3591280	3593280	в сторидже, по сути, займет, как бы,
3593280	3595280	определенную, ну, там,
3595280	3597280	определенную данную
3597280	3599280	и запишет, как бы, вот в этот вот leveldb,
3599280	3601280	и
3601280	3603280	вот этот ключ значения,
3603280	3605280	они будут реплицированы.
3605280	3607280	Ну, и, конечно, войдет в state root, будет включено
3607280	3609280	в блок, там, и так далее. То есть каждые такие
3609280	3611280	операции вот с этими переменами,
3611280	3613280	которые находятся в сторидже,
3613280	3615280	они все выполняются в консенсусе.
3617280	3619280	То есть все изменения их
3619280	3621280	реплицируются. Это довольно,
3621280	3623280	как бы, важная штука, чтобы понимать, как бы,
3623280	3625280	что там внутри контрактов происходит.
3625280	3627280	То есть это, по сути,
3627280	3629280	как бы, не оперативная
3629280	3631280	память. Очень любят, как бы,
3631280	3633280	там, контракт, как бы, выглядит
3633280	3635280	так это по коду, как бы, что я
3635280	3637280	объявил переменную, она у меня равна, там,
3637280	3639280	тому-то, тому-то, но она там как-то сохраняется.
3639280	3641280	На самом деле это именно
3641280	3643280	сторидж.
3643280	3645280	Сторидж это то, что аналог,
3645280	3647280	я не знаю, записи на диск
3647280	3649280	в реальной программе. Вот.
3649280	3651280	А так у контракта, конечно же,
3651280	3653280	есть у него, как бы, и оперативная
3653280	3655280	память, memory,
3655280	3657280	ему же там что-то надо делать, ему надо
3657280	3659280	там, там, циклы какие-то делать, там,
3659280	3661280	что-то там разворачивать в память, массивы
3661280	3663280	в них там создавать, значит, бегать по ним,
3663280	3665280	что-то там считать и так далее. То есть там
3665280	3667280	тоже есть выделение памяти,
3667280	3669280	локация этой памяти,
3671280	3673280	ну, под определенные вещи. Ну, понятно,
3673280	3675280	есть, конечно, там и del-локация,
3675280	3677280	как бы, памяти, как бы, но она автоматом
3677280	3679280	происходит, когда транзакция завершается,
3679280	3681280	провод, все это выкидывается.
3681280	3683280	А так, по-хорошему, есть, да, действительно,
3683280	3685280	как бы, оперативная память. Поэтому не путайте, как бы,
3685280	3687280	memory есть в смарт-контрактах,
3687280	3689280	как бы, memory это
3689280	3691280	отдельная история. Это то,
3691280	3693280	что на момент исполнения одной функции,
3693280	3695280	как бы, есть у контракта,
3695280	3697280	то есть оперативная память,
3697280	3699280	а есть storage.
3699280	3701280	Вот, и
3701280	3703280	поэтому там часть переменных, как бы, относится
3703280	3705280	к storage, как бы, а часть переменных вы можете
3705280	3707280	объявить, как бы, в памяти.
3707280	3709280	Вот, это такая довольно важная штука.
3709280	3711280	То, что storage в случае успешного
3711280	3713280	завершения функции, если не будет
3713280	3715280	реверта, как бы, оно сохраняется,
3715280	3717280	так и вы, любая из данных, то есть вы присвоили
3717280	3719280	а, там, 200, как бы, и оно будет
3719280	3721280	все время 200, как бы, всегда,
3721280	3723280	как бы, во всех следующих функциях вы
3723280	3725280	обращаетесь к а, как бы, получите 200,
3725280	3727280	там, через 100 блоков, там, если
3727280	3729280	где-то обменений не было.
3729280	3731280	Вот. Это такое, как бы,
3731280	3733280	персистентное хранилище.
3733280	3735280	Значит,
3735280	3737280	сам код смарт-контрактов
3737280	3739280	мы сейчас тоже будем смотреть.
3739280	3741280	Давайте, может, прям сразу
3741280	3743280	сходим, какой-нибудь там глянем.
3743280	3745280	Простенький.
3745280	3747280	RapidEther. Вот здесь можно
3747280	3749280	посмотреть контракт его.
3749280	3751280	Там есть, правда, там
3751280	3753280	по-дурацки довольно. Sorry, там.
3753280	3755280	Не знаю, как побольше сделать.
3755280	3757280	То есть, вот так.
3757280	3759280	Значит,
3759280	3761280	так, тоже кратко, как бы, если по этой
3761280	3763280	штуке, как бы, пробежаться, то
3763280	3765280	на самом деле, в уме, как бы,
3765280	3767280	слово контракт можно заменить на слово
3767280	3769280	класс. Прям, вот, как
3769280	3771280	C++ класс. Здесь, действительно,
3771280	3773280	работает изо всех сил
3773280	3775280	объект-ориентированное программирование.
3775280	3777280	Солидить — это объект-ориентированный язык.
3777280	3779280	Что мы еще,
3779280	3781280	как бы, знаем, что у нас есть
3781280	3783280	в объект-ориентированных языках?
3783280	3785280	У нас есть конструкторы.
3785280	3787280	Здесь они тоже есть. То есть,
3787280	3789280	в тот момент, когда вы будете
3789280	3791280	деплоить, размещать вот этот ваш код,
3791280	3793280	как бы, у вас выполнится код конструктора,
3793280	3795280	который инициализирует какие-то базовые вещи
3795280	3797280	в сторидже.
3797280	3799280	У нас есть публичные
3799280	3801280	и приватные переменные.
3801280	3803280	Вот здесь тоже, как бы, есть там public.
3803280	3805280	Здесь, там, три вида, как бы, переменных.
3805280	3807280	Вот.
3807280	3809280	Имеются области видимости.
3809280	3811280	Если это public, вы можете снаружи к ней обратиться,
3811280	3813280	получить ее значение, использовать там
3813280	3815280	каких-то там внешних функций.
3815280	3817280	Если она private, то вы ее можете только
3817280	3819280	внутри контракта использовать.
3819280	3821280	Вот, снаружи не можете запросить.
3821280	3823280	Здесь есть,
3823280	3825280	ну, типы данных,
3825280	3827280	там, все это мы с вами как раз
3827280	3829280	на следующей лекции будем смотреть.
3829280	3831280	То есть, самые, как бы,
3831280	3833280	типовые солидите паттерны.
3833280	3835280	Здесь есть ассоциативные массивы,
3835280	3837280	там, массивы, как бы,
3837280	3839280	с динамическим размером,
3839280	3841280	фиксированной длины.
3841280	3843280	Вот.
3843280	3845280	Есть, соответственно, функция,
3845280	3847280	вот, собственно, их название.
3847280	3849280	У них тоже есть
3849280	3851280	области видимости.
3851280	3853280	Вот, есть всякие там ключевые словечки.
3853280	3855280	Например, payable означает, что можно вызвать эту функцию
3855280	3857280	и прислать в нее эфир.
3857280	3859280	То есть, я могу
3859280	3861280	создать транзакцию, сказать, вызываю функцию
3861280	3863280	deposit и прикладываю к этому вызову
3863280	3865280	10 эфира.
3865280	3867280	Вот. Соответственно,
3867280	3869280	контракт, если эту функцию правильно обработает,
3869280	3871280	он съест мои 10 эфира,
3871280	3873280	увеличит свой баланс на 10,
3873280	3875280	как бы, запишет там,
3875280	3877280	что-то себе, как бы, в storage про то, что
3877280	3879280	я принес 10 эфира.
3879280	3881280	Вот. Ну и, соответственно, функция там
3881280	3883280	закончится. Вот.
3883280	3885280	И есть функции
3885280	3887280	getter'ы, а есть функции
3887280	3889280	setter'ы. Так, чтобы я точно,
3889280	3891280	как бы, ничего не забыл.
3891280	3893280	Кстати, уберу вот это
3893280	3895280	окно, мне клип мешает.
3895280	3899280	Есть функции getter'ы, есть setter'ы.
3899280	3901280	Значит, getter'ы, вот это ключевое
3901280	3903280	слово view, это, по сути,
3903280	3905280	функции, которые ничего
3905280	3907280	не записывают.
3907280	3909280	И у людей сразу, соответственно, вопрос, блин,
3909280	3911280	ты же говорил, типа, что в блокчейне за все
3911280	3913280	платят, как бы, а что, за вызов
3913280	3915280	этой функции не платят?
3915280	3917280	Ну вот, да, здесь есть
3917280	3919280	проблема, за вызов этой функции не платят.
3919280	3921280	То есть, если я хочу вызвать total supply
3921280	3923280	у какого-нибудь контракта,
3923280	3925280	вот, смотрите, в rapid-эфир,
3925280	3927280	давайте у него вызовем функцию total supply.
3927280	3929280	ReadContract
3929280	3931280	здесь функция. Вот я хочу, короче, вызвать
3931280	3933280	у него функцию total supply, вот он ее возвращает.
3933280	3935280	Вот столько-то в rapid-эфире
3935280	3937280	было, соответственно, там, выдано,
3937280	3939280	там, напечатано пользователям
3939280	3941280	и так далее.
3941280	3943280	Как называется этот токен,
3943280	3945280	сколько у него десятичных знаков после запятой
3945280	3947280	и так далее.
3947280	3949280	Какой баланс этого эфира у какого-то адреса.
3949280	3951280	На эти вопросы,
3951280	3953280	на вот эти вот view'ы
3953280	3955280	мне нода отвечает,
3955280	3957280	в общем-то, бесплатно.
3957280	3959280	То есть, у меня
3959280	3961280	вот мой вот этот metamask,
3961280	3963280	мой клиент, как бы,
3963280	3965280	он идет на ноду,
3965280	3967280	он делает jsonrpc,
3967280	3969280	как бы, запрос, говорит
3969280	3971280	дай-ка мне функцию total supply
3971280	3973280	total supply
3973280	3975280	вот у этого контракта
3975280	3977280	и нода просто, как бы, лезет, соответственно,
3977280	3979280	сюда, там, в storage этого контракта
3979280	3981280	вызывает вот эту view'шную функцию,
3981280	3983280	которая view читает это значение,
3983280	3985280	как бы, отдает его мне бесплатно,
3985280	3987280	потому что никаких записей в блокчейн
3987280	3989280	произведено не было,
3989280	3991280	ни за что платить не надо,
3991280	3993280	никакие блоки сформированы не были,
3993280	3995280	но и, как бы,
3995280	3997280	view функции, они, по сути,
3997280	3999280	бесплатны.
3999280	4001280	Тут есть некоторая такая,
4001280	4003280	некоторый обман, потому что
4003280	4005280	по поводу того, что они бесплатны,
4005280	4007280	потому что, ну, они могут быть
4007280	4009280	не совсем бесплатны,
4009280	4011280	если у вас внутри вот здесь вот есть, как бы,
4011280	4013280	функция, которая пишет в write,
4013280	4015280	и она, как бы, внутри себя
4015280	4017280	вызывает
4017280	4019280	вот эту вот view функцию,
4019280	4021280	ну, которая считает, например, вот это вот
4021280	4023280	total supply.
4023280	4025280	То есть она ее вызывает
4025280	4027280	и потом использует ее результат.
4027280	4029280	Тогда, как бы, когда
4029280	4031280	майнер будет исполнять, как бы, вот эту штуку,
4031280	4033280	он, конечно, зайдет вот в эту функцию
4033280	4035280	и с удовольствием
4035280	4037280	вычитает с вас денежки
4037280	4039280	за то, что ему пришлось, там, лезть
4039280	4041280	в storage, что-то там обращаться,
4041280	4043280	число получать, там, load делать,
4043280	4045280	как бы, и так далее.
4045280	4047280	То есть вот эта вот стоимость, как бы, этой функции,
4047280	4049280	она все-таки будет приплюсована к газу.
4049280	4051280	Так что, как бы, view не то, чтобы
4051280	4053280	прям вот прям совсем бесплатный.
4053280	4055280	Если их использовать внутри, как бы,
4055280	4057280	других пишущих функций, они платные.
4057280	4059280	А если вы снаружи, как бы, дергаетесь,
4059280	4061280	то, пожалуйста, как бы, запрашивайте.
4061280	4063280	На здоровье, как бы, они, ну,
4063280	4065280	они открыты.
4065280	4067280	Вот.
4067280	4069280	Еще довольно важный, как бы,
4069280	4071280	кусок контракта
4071280	4073280	это так называемые ивенты.
4073280	4075280	Это такие, как бы,
4075280	4077280	события,
4077280	4079280	такой, можно сказать, как бы, особый вид
4079280	4081280	сториджа. Это, как бы, у нас будет
4081280	4083280	называться сторидж.
4083280	4085280	Грубо говоря,
4085280	4087280	ивенты это лог,
4087280	4089280	давайте я вот здесь, там, напишу, как бы,
4089280	4091280	это лог событий
4091280	4093280	контракта. То есть просто,
4093280	4095280	как бы, он тоже фиксируется
4095280	4097280	в блокчейне. То есть то, что у вас, как бы,
4097280	4099280	произошло вот здесь, вот,
4099280	4101280	emit, где у нас там.
4101280	4103280	Вот здесь, по сути,
4103280	4105280	вызывается ивент.
4105280	4107280	Ну, там, в новых версиях Solidity, на самом деле,
4107280	4109280	тут надо явно ключевое слово
4109280	4111280	emit писать.
4111280	4113280	Типа, произвести событие
4113280	4115280	withdraw.
4115280	4117280	То есть, вот этот чувак, msg sender,
4117280	4119280	адрес отправителя,
4119280	4121280	вывел столько-то
4121280	4123280	вот этих вот вадов. Ну, там, вывел
4123280	4125280	такое-то количество эфира, если все
4125280	4127280	хорошо, если здесь нигде ничего не упало.
4127280	4129280	Вот.
4129280	4131280	То тогда в этом логе появится
4131280	4133280	сообщение withdraw.
4133280	4135280	Withdraw, там, адрес,
4135280	4137280	там, не знаю, 100 токенов. Потом пришел другой
4137280	4139280	чувак, сделал, там, депозит,
4139280	4141280	там, A2, там, не знаю, там, 10.
4141280	4143280	И так далее, и так далее.
4143280	4145280	То есть это лог, который
4145280	4147280	привязан к контракту.
4147280	4149280	Вот здесь вот.
4149280	4151280	И, ну, в чем, как бы, его
4151280	4153280	важность? Во-первых, он
4153280	4155280	дешевый. Вот.
4155280	4157280	То есть он стоит дешевле, чем записать сюда
4157280	4159280	то, что вот, короче, вот этот чувак,
4159280	4161280	значит, положил 100 токенов, и это
4161280	4163280	его, там, депозит. Понятно, что здесь
4163280	4165280	значение, как бы, есть. Но
4165280	4167280	писать в лог, во-первых, дешевле. По газу,
4167280	4169280	там, 3000 плюс, там, количество
4169280	4171280	за каждый байт данных придется
4171280	4173280	заплатить. Во-вторых, из
4173280	4175280	контракта сходить в лог нельзя.
4175280	4177280	То есть контракт не может, как бы,
4177280	4179280	сходить и посмотреть, какие события произошли
4179280	4181280	вот в том контракте. Как бы, дай мне список,
4181280	4183280	там, ивентов, что-то отфильтровать. То есть
4183280	4185280	это такая, как бы, более, более тупое, как бы,
4185280	4187280	хранилище, которое просто сохраняет,
4187280	4189280	как бы, эти ивенты. Но они крайне удобные,
4189280	4191280	для клиентов.
4191280	4193280	То есть, когда я ходил вот сюда, там,
4193280	4195280	на компаунд,
4195280	4197280	на самом деле, когда я вам сказал, типа,
4197280	4199280	я подписался, типа, на
4199280	4201280	транзакцию, на самом деле,
4201280	4203280	чуть-чуть я схитрил, потому что
4203280	4205280	интерфейс подписался на
4205280	4207280	события, коллатер был
4207280	4209280	включен, или, там,
4209280	4211280	типа, деньги были положены. Как бы, он
4211280	4213280	подписался на вот это событие с
4213280	4215280	моим адресом. То есть, он подписался,
4215280	4217280	типа, и на попсабе висит
4217280	4219280	и ждет, когда произойдет
4219280	4221280	ивент, как бы, что
4221280	4223280	вот этот вот чувак, как бы, сделал
4223280	4225280	какой-то, там, не знаю, депозит.
4225280	4227280	И, соответственно, он висит, как бы,
4227280	4229280	с нодой общается, как бы, ждет, пока нода,
4229280	4231280	как бы, ему пришлет апдейт. Да, такое событие
4231280	4233280	произошло, вот этот ивент, как бы,
4233280	4235280	и, соответственно, можно, там, не знаю, извести
4235280	4237280	вот этот флажок. Поэтому
4237280	4239280	ивенты — это крайне важная штука
4239280	4241280	именно для, именно, взаимодействия
4241280	4243280	с блокчейном. Чем
4243280	4245280	еще они вам будут интересны,
4245280	4247280	как бы, эти ивенты? Это, если вы собираетесь
4247280	4249280	что-то там анализировать в блокчейне,
4249280	4251280	собирать, там, типа, не знаю,
4251280	4253280	инфу, короче, кто, какие,
4253280	4255280	там, какие были, там, не знаю, там,
4255280	4257280	сделки с этим токеном,
4257280	4259280	кто ходил, как бы, в этот контракт, кто, там,
4259280	4261280	не знаю, NFT-шки минтил и так далее.
4261280	4263280	То есть вы, когда, как бы, парсите,
4263280	4265280	парсите блокчейн, как бы,
4265280	4267280	вы бежите по блокам, из этого
4267280	4269280	блока получаете, по сути, пачку ивентов
4269280	4271280	и фильтруете
4271280	4273280	их.
4277280	4279280	И фильтруете их, соответственно, по адресу контракта,
4279280	4281280	по, там, по
4281280	4283280	топикам и так далее. Тоже чуть-чуть посмотрим
4283280	4285280	на этот код с вами, потому что
4285280	4287280	с этим, если вы займетесь блокчейном, вам тоже
4287280	4289280	придется работать.
4289280	4291280	Вот, ивенты — такой источник информации.
4291280	4293280	Так, поехали
4293280	4295280	дальше.
4295280	4297280	Тоже, что
4297280	4299280	очень важно, как бы, что один
4299280	4301280	контракт может вызывать другой
4301280	4303280	контракт. То есть у нас есть, как бы,
4303280	4305280	два контракта, AC-штрих
4305280	4307280	какой-нибудь, там, 0, там,
4307280	4309280	0 — неважно, у него тоже есть код.
4309280	4311280	Здесь есть специальный
4311280	4313280	апкод, специальная инструкция
4313280	4315280	call, которая,
4315280	4317280	как бы, может пойти
4317280	4319280	в другой контракт, исполнить там
4319280	4321280	функцию и, соответственно, вернуться обратно.
4321280	4323280	То есть,
4323280	4325280	опять же, когда вы
4325280	4327280	строите что-то серьезное,
4327280	4329280	то по большей части, как бы,
4329280	4331280	ваша система представляет не один
4331280	4333280	смарт-контракт, а много.
4333280	4335280	И они отвечают, как бы, за разные вещи.
4335280	4337280	То есть у вас есть какой-нибудь, там, базовый
4337280	4339280	контроллер,
4339280	4341280	здесь есть какой-нибудь, там,
4341280	4343280	пришел пользователь, делает какой-нибудь, там,
4343280	4345280	депозит, вносит вам 10
4345280	4347280	эфира.
4347280	4349280	На самом деле ваш контроллер, как бы, функцию
4349280	4351280	депозит, там,
4351280	4353280	исполняет, а 10 эфира
4353280	4355280	кладет на адрес
4355280	4357280	волта какого-нибудь, ну, то есть
4357280	4359280	такой, как бы, крепости, как бы, на которой,
4359280	4361280	как бы, хранится, там, не знаю, там, столько,
4361280	4363280	как бы, эфира от пользователей.
4363280	4365280	Контракт этот сильно простой, как бы, чтобы
4365280	4367280	его не ломанули, чтобы не утащили, как бы,
4367280	4369280	вот, весь эфир.
4369280	4371280	Затем, там, не знаю, там, следующий, там,
4371280	4373280	какой-нибудь контракт, в котором, там,
4373280	4375280	например, там, access,
4375280	4377280	access list,
4377280	4379280	там, кто, там, админы,
4379280	4381280	кто, там, команда,
4381280	4383280	кто привилегированный пользователь, там,
4383280	4385280	прописано, как бы, именно в этом контракте
4385280	4387280	его сториджи, и контроллер, как бы,
4387280	4389280	ходит сюда, типа, спрашивает, а вот этому
4389280	4391280	можно сделать, там, какое-то административное
4391280	4393280	действие, ну, в ответ, там,
4393280	4395280	тоже при помощи вот этого
4395280	4397280	кода и так далее.
4397280	4399280	То есть, все современные проекты
4399280	4401280	на, ну,
4401280	4403280	на эфире, как бы, представляют собой
4403280	4405280	целые пачки смарт-контрактов,
4405280	4407280	которые между собой
4407280	4409280	взаимодействуют. Давайте, там,
4409280	4411280	что-нибудь
4411280	4413280	посмотрим, там, мы будем
4413280	4415280	подробно смотреть,
4415280	4417280	ну, просто какую-нибудь репу.
4419280	4421280	Вот, собственно, как раз такая
4421280	4423280	достаточно простая, да, как бы,
4423280	4425280	репа, через которую, не знаю,
4425280	4427280	там, сотни миллиардов долларов прокачивается
4427280	4429280	вот, как бы, ее все контракты,
4429280	4431280	на самом деле, там, буквально, там,
4431280	4433280	раз-два, как бы, и плюну.
4433280	4435280	Один контракт, Factory,
4435280	4437280	который, кстати говоря, это Pattern Factory,
4437280	4439280	который в объектно-ориентированном программировании,
4439280	4441280	когда один объект, как бы, печатает
4441280	4443280	другие объекты однотипные,
4443280	4445280	вот этот вот Factory, как бы,
4445280	4447280	выкладывает в сеть, как бы,
4447280	4449280	по желанию пользователя контракты
4449280	4451280	V2Payer,
4451280	4453280	вот, ну, и там, соответственно,
4453280	4455280	там, при этом используется токен,
4455280	4457280	вот, то есть, смарт-контрактов у нас
4457280	4459280	на самом деле, всего-то, как бы,
4459280	4461280	в общем-то, ничего. И вот, если вы
4461280	4463280	посмотрите, да, кода здесь очень мало.
4463280	4465280	То есть, это вам
4465280	4467280	не backend, как бы,
4467280	4469280	здесь кода достаточно мало,
4469280	4471280	как бы, просто над каждой строчечкой
4471280	4473280	придется подумать чуть-чуть больше.
4473280	4475280	Вот.
4475280	4477280	Так.
4477280	4479280	Значит, это, что касается
4479280	4481280	смарт-контрактов. Ну, и
4481280	4483280	про Strictly Restricted by Execution Cost,
4483280	4485280	про это мы уже с вами
4485280	4487280	очень подробно в тот раз, как бы, поговорили.
4487280	4489280	Ни одна функция вот этого контракта,
4489280	4491280	этих контрактов, если мы вот здесь вот будем
4491280	4493280	смотреть,
4493280	4495280	вы здесь не найдете нигде,
4495280	4497280	например, циклов,
4497280	4499280	если эти циклы
4499280	4501280	не прям жестко, там, прибиты сверху,
4501280	4503280	там, чуть ли не константами.
4503280	4505280	То есть, там, не знаю, там,
4505280	4507280	for1, to, короче, не знаю, там,
4507280	4509280	максимум, там, десяток, как бы,
4509280	4511280	какой-нибудь, там, сущностей. То есть,
4511280	4513280	если вы посмотрите, они все прям линейные, линейные,
4513280	4515280	линейные эти функции,
4515280	4517280	максимально экономящие
4517280	4519280	место. Ну, то есть, например, там, в Uniswap'е
4519280	4521280	время
4521280	4523280	приводится к 32
4523280	4525280	битам просто для того, чтобы сэкономить,
4525280	4527280	как бы, 32 бита.
4527280	4529280	Таймстемп 64 бита,
4529280	4531280	как бы, а здесь, как бы, 32,
4531280	4533280	потому что надо пожать,
4533280	4535280	чтобы данные более эффективно
4535280	4537280	упаковались, там, в слоты. То есть, экономия
4537280	4539280	идет на таких, на спичках,
4539280	4541280	и ее здесь очень много.
4541280	4543280	Потому что
4543280	4545280	каждый раз, когда вы вот здесь вот, как бы,
4545280	4547280	пробуете что-то неоптимально,
4547280	4549280	то есть, вы запрограммировали, не знаю,
4549280	4551280	там, цикл, который жрет зря,
4551280	4553280	как бы, газ, вы какую-то функцию выполняете
4553280	4555280	больше, чем нужно,
4555280	4557280	больше, чем, там, один раз
4557280	4559280	за блок, платят за это ваши
4559280	4561280	пользователи. То есть, приходит
4561280	4563280	пользователь, отправляет транзакцию в
4563280	4565280	контракт, исполняет ваш код, как бы,
4565280	4567280	ваш код неоптимальный, как бы, и жрет,
4567280	4569280	там, 100 тысяч газа вместо, там,
4569280	4571280	60 тысяч газа, и пользователь платит
4571280	4573280	100 долларов вместо 60 долларов.
4573280	4575280	Именно поэтому,
4575280	4577280	собственно, и спрос, как бы, такой, с блок
4577280	4579280	чейн разработчиков очень серьезный
4579280	4581280	в плане, как бы, алгоритмов и структур данных.
4581280	4583280	То есть, если, как бы,
4583280	4585280	да, ну, как бы,
4585280	4587280	если ты, там, не знаю, там,
4587280	4589280	не понимаешь, как бы, там, сложности алгоритмов
4589280	4591280	или просто, как бы, там, не знаю, прям
4591280	4593280	в лобешник, как бы, решаешь, типа, задачу,
4593280	4595280	а, да, все, прям, запихали
4595280	4597280	в массив, пробежали, сортирнули,
4597280	4599280	как бы, и потом, и взяли, там,
4599280	4601280	верхнее число, то, в общем,
4601280	4603280	на солидите лучше, как бы, не идти программировать,
4603280	4605280	вот, потому что здесь, прям,
4605280	4607280	об этом надо думать на каждой строчке.
4607280	4609280	Это очень серьезно.
4609280	4611280	Вот. Активные
4611280	4613280	используются всякие, там, не знаю, там,
4613280	4615280	может быть, кэширование,
4615280	4617280	надо при этом, как бы, понимать,
4617280	4619280	какая транзакция,
4619280	4621280	куда, ну, какая пишет
4621280	4623280	сторч, какая пишет память,
4623280	4625280	какая потребляет, как бы, соответственно, сколько,
4625280	4627280	сколько газа, это, вот, довольно
4627280	4629280	серьезная история в солидите
4629280	4631280	разработке.
4633280	4635280	Дальше, что еще интересно,
4635280	4637280	как бы, такое рассказать про смарт-контрол,
4637280	4639280	про контракты, ну, в частности,
4639280	4641280	например,
4641280	4643280	здесь
4643280	4645280	различных хитрых математических
4645280	4647280	функций, их довольно-таки
4647280	4649280	мало, потому
4649280	4651280	что, как я сказал, как бы, все
4651280	4653280	операции, они
4653280	4655280	целочисленные, вот, и поэтому
4655280	4657280	практически с любой экзотикой,
4657280	4659280	которая у вас появится, например,
4659280	4661280	даже квадратный корень, как бы,
4661280	4663280	является экзотикой, как бы, вам придется
4663280	4665280	разбираться самостоятельно.
4665280	4667280	А из-за жестких требований,
4667280	4669280	там, к битности, к экономии,
4669280	4671280	зачастую
4671280	4673280	многие виды, как бы,
4673280	4675280	математики приходится
4675280	4677280	реализовывать самостоятельно.
4677280	4679280	Вот, например, здесь, как видите, как бы,
4679280	4681280	квадратный корень, квадратный корень,
4681280	4683280	как бы, сделан вручную.
4683280	4685280	Нету в солидите, нету, как бы,
4685280	4687280	апкода квадратный корень.
4687280	4689280	Вот, вам придется его, как бы, реализовать
4689280	4691280	самостоятельно, здесь этот вавилонский
4691280	4693280	метод используется. И то же самое
4693280	4695280	касается большинства математических
4695280	4697280	функций.
4697280	4699280	Собственно,
4699280	4701280	даже для, там, операций,
4701280	4703280	там, перемножения, как бы, балансов
4703280	4705280	здесь используется своя собственная
4705280	4707280	математика,
4707280	4709280	вот, для того, чтобы
4709280	4711280	это влазило. Почему здесь 100-112
4711280	4713280	бит, например, у них используется?
4713280	4715280	Чтобы 112 бит
4715280	4717280	умножить на 112 бит дало
4717280	4719280	224 бита,
4719280	4721280	и плюс к этим
4721280	4723280	224 битам добавить
4723280	4725280	еще 32 бита
4725280	4727280	вот того таймстемпа, вот этого времени,
4727280	4729280	которое было в пэре. И получится, как раз,
4729280	4731280	256 бит, который можно затолкать
4731280	4733280	в...
4733280	4735280	который можно затолкать ровно
4735280	4737280	в один слот
4737280	4739280	сториджа. Он, у него размер, как бы,
4739280	4741280	256 бит, и у него здесь будет, как бы,
4741280	4743280	один баланс, здесь будет второй баланс, а здесь
4743280	4745280	будет время. И получится, вот, ровно
4745280	4747280	256 бит. Это, вот, с точки зрения
4747280	4749280	потребления газа, крайне,
4749280	4751280	ну,
4751280	4753280	оптимально. Потому что пользователь платит
4753280	4755280	за каждый выделенный, вот,
4755280	4757280	этот вот слот, как бы, 256 бит.
4757280	4759280	То есть, с чего
4759280	4761280	я, как бы, вдруг приплевывал
4761280	4763280	операционные системы, как бы, к блокчейнам, да?
4763280	4765280	А потому что, вообще, как бы,
4765280	4767280	всякая, там, страничная
4767280	4769280	организация памяти, да, когда вам нужно
4769280	4771280	на одну переменную выделить 4 байта,
4771280	4773280	а операционка вам, на
4773280	4775280	самом деле, как бы, выделяет сразу целиком
4775280	4777280	страницу размером 4 килобайта,
4777280	4779280	да еще и делает это
4779280	4781280	лениво, то есть она отображает это на физическую
4781280	4783280	память, там, и там, и так
4783280	4785280	далее, соответственно, и
4785280	4787280	инициализирует ее только, когда вы
4787280	4789280	делаете запись в эту штуку. Вот понимание
4789280	4791280	этих механизмов, на самом деле, делает
4791280	4793280	понимание того, что здесь происходит
4793280	4795280	за смарт-контрактами, прям, очень простым.
4795280	4797280	То есть, потому что это все, в общем-то,
4797280	4799280	как бы, одно и то же, как бы, единственно
4799280	4801280	только, ну, сдобренное
4801280	4803280	key-value вот этими,
4803280	4805280	как бы, хэшами.
4805280	4807280	Вот. Так.
4807280	4809280	Теперь, значит,
4809280	4811280	про
4811280	4813280	ограничения, getter и setter,
4813280	4815280	значит,
4815280	4817280	вызовы контрактов, контракты
4817280	4819280	мы прям будем тоже очень подробно смотреть.
4819280	4821280	Здесь очень много всяких, как бы, нюансов
4821280	4823280	есть. Вот.
4823280	4825280	Теперь чуть-чуть
4825280	4827280	продолжим, как бы, про газ.
4827280	4829280	Я уже вам в тот раз, как бы, рассказал
4829280	4831280	про то, что каждая инструкция стоит, там,
4831280	4833280	сколько-то денег. Вот.
4833280	4835280	Соответственно,
4835280	4837280	вот мы поговорили про газ.
4837280	4839280	И
4839280	4841280	теперь чуть-чуть поглубже, соответственно,
4841280	4843280	что внутри, под капотом у этих
4843280	4845280	смарт-контрактов происходит и как работает
4845280	4847280	EVM. То есть это вот сейчас, наверное,
4847280	4849280	там,
4849280	4851280	основная история.
4851280	4853280	Значит, как я говорил,
4853280	4855280	EVM — это, по сути,
4855280	4857280	микроконтроллер, можно сказать.
4857280	4859280	Те, кто у вас, как бы, такой, как бы, виртуальный
4859280	4861280	процессор, просто сделан, как бы, в софте.
4861280	4863280	Вот. Там в софте есть объект,
4863280	4865280	как бы, у которого есть, как бы, свой
4865280	4867280	собственный, там, storage, у которого есть собственный,
4867280	4869280	там, не знаю, там, код.
4869280	4871280	Кстати,
4871280	4873280	на микроконтроллерах или ассемблере
4873280	4875280	многие писали, тоже, кстати,
4875280	4877280	интересный вопрос.
4877280	4879280	Ну, на ассемблере писали,
4879280	4881280	на курсе C++.
4881280	4883280	Ага.
4883280	4885280	Ну, это, кстати,
4885280	4887280	кстати, вот тот случай, да,
4887280	4889280	когда, вот, кажется, да, в институте, что
4889280	4891280	и когда мне это, блин,
4891280	4893280	пригодится, я
4893280	4895280	тут эти самые сайты на Django делаю,
4895280	4897280	как бы, а вы какой-то микроконтроллер,
4897280	4899280	какие-то ассемблеры, хрен его знает, куда это мне надо.
4899280	4901280	Здесь это довольно
4901280	4903280	важная история в блокчейнах,
4903280	4905280	как бы, причем, кстати,
4905280	4907280	реально во всех. То есть это достаточно
4907280	4909280	полезные знания, вот,
4909280	4911280	того, как работает, как работает, собственно,
4911280	4913280	сам микропроцессор, потому что именно так
4913280	4915280	работает виртуальная машина.
4915280	4917280	Даже при изучении C++
4917280	4919280	полезно, чтобы понимать, когда
4919280	4921280	компилируется, как.
4921280	4923280	Да, да, да, да, именно, как выделяется память,
4923280	4925280	там, и так далее. Ну, я могу сказать,
4925280	4927280	по моему, как бы, рабочему опыту,
4927280	4929280	даже если вот эти теоретические знания
4929280	4931280	из института о низком уровне, там,
4931280	4933280	всякие, там, параллельные программирования,
4933280	4935280	архитектуры, там, систем, там, и так далее.
4935280	4937280	То есть, если они, как бы, по жизни
4937280	4939280	и не пригождались, да, там, суперкомпьютеры,
4939280	4941280	там, я не программировал, да, как бы,
4941280	4943280	и, там, микроконтроллеры для роботов,
4943280	4945280	то, когда ты начинаешь решать
4945280	4947280	проблемы, например, в какой-то сложной
4947280	4949280	системе, там, высоко нагруженной,
4949280	4951280	там, не знаю, предположим,
4951280	4953280	предполагаешь, почему, как бы, вот, на этой
4953280	4955280	системе вдруг процессор, как бы, начал
4955280	4957280	прям, как ни в коня, жрать.
4957280	4959280	Или, там, почему память утекла, и так далее.
4959280	4961280	То тут, как раз, эти знания здорово
4961280	4963280	помогают. Потому что ты вспоминаешь,
4963280	4965280	а, блин, мы же здесь вот добавили, как бы,
4965280	4967280	вот, вычисления, такое, как бы,
4967280	4969280	блин, и, может быть, не оптимально, как бы,
4969280	4971280	оно жрет процессор, как бы, по ходу дела в нем.
4971280	4973280	Вот. То есть, оно помогает, на самом деле,
4973280	4975280	копать и находить проблемы.
4975280	4977280	Вот.
4977280	4979280	Ну, и тоже, как,
4979280	4981280	так, в качестве философского, как бы,
4981280	4983280	напутствия, да, как бы,
4983280	4985280	написать систему, которая работает, несложно.
4985280	4987280	Вот. Но,
4987280	4989280	как бы, в тот момент, когда начнутся
4989280	4991280	проблемы, когда эта система, как бы, подойдет,
4991280	4993280	как бы, к пику своих
4993280	4995280	возможностей на текущих машинах,
4995280	4997280	то есть, когда перестанет хватать сервировка, да,
4997280	4999280	они станут, как бы, уходить, там,
4999280	5001280	в 100%, когда начнутся проблемы,
5001280	5003280	вот, с производительностью, вот, в этот момент,
5003280	5005280	как бы, прям, вот это
5005280	5007280	непонимание низкоуровневых
5007280	5009280	механизмов, оно прям вернется
5009280	5011280	сразу же, как бы, сторицей, потому что
5011280	5013280	придется очень долго, как бы, колупаться,
5013280	5015280	что там упало, почему, как бы,
5015280	5017280	что мы там такого сделали, как бы,
5017280	5019280	и так далее. То есть, вот это вот
5019280	5021280	эффективная утилизация, как бы, железа
5021280	5023280	штука важная. И если вы собираетесь
5023280	5025280	в крупную компанию, как бы, идти,
5025280	5027280	то там, возможно, как бы,
5027280	5029280	оптимизация пары строчек
5029280	5031280	кода может спасти компании, там, не знаю,
5031280	5033280	миллион долларов в месяц, спокойно,
5033280	5035280	на серверах, просто потому что они перестанут,
5035280	5037280	их не нужно будет такого количества.
5037280	5039280	Так что это важно.
5039280	5041280	Вот. Значит,
5041280	5043280	итак, EVM у нас представляет
5043280	5045280	собой такой, как бы, процессор,
5045280	5047280	мы бежим, как бы, по инструкциям,
5047280	5049280	у него есть
5049280	5051280	instruction pointer,
5051280	5053280	который говорит, на какой я сейчас
5053280	5055280	инструкции нахожусь,
5055280	5057280	у него есть, соответственно, память,
5057280	5059280	если эта инструкция делает какой-нибудь
5059280	5061280	M-load, там, не знаю, там,
5061280	5063280	загружать какие-то данные с памяти,
5063280	5065280	то процессор, как бы, сходит по вот этому адресу
5065280	5067280	в оперативную память, возьмет данные,
5067280	5069280	загрузит их куда-то там
5069280	5071280	в регистр, у него есть
5071280	5073280	stack,
5073280	5075280	ну, вот это, соответственно, memory называется,
5075280	5077280	у него есть обязательно stack,
5077280	5079280	значит,
5079280	5081280	как stack работает, тоже, как бы, надо знать,
5081280	5083280	да, всякие, надеюсь, как бы, все знают,
5083280	5085280	это push-pop,
5085280	5087280	да, то есть положили на stack что-то,
5087280	5089280	оно, как бы, попало вот сюда,
5089280	5091280	мы сделали push,
5091280	5093280	и stack pointer,
5093280	5095280	то есть указательно переместился
5095280	5097280	вверх, как бы, еще сделали
5097280	5099280	push, как бы, он еще вверх поместился,
5099280	5101280	сделали pop, как бы, мы
5101280	5103280	вернулись вниз, как бы, про вот эти вот забыли
5103280	5105280	данные.
5105280	5107280	Чем stack, как бы, удобен, да, тем, что
5107280	5109280	для того, чтобы, как бы, следить за stack-ом, нам
5109280	5111280	достаточно хранить одно число, вот это вот,
5111280	5113280	stack pointer, и все, как бы,
5113280	5115280	то есть и тогда у нас вот эти все push и pop
5115280	5117280	как бы прекрасно работают.
5117280	5119280	Соответственно, она
5119280	5121280	бежит по инструкциям последовательно,
5121280	5123280	исполняет, как бы, каждую инструкцию,
5123280	5125280	вот, и, как бы,
5125280	5127280	до тех пор, пока, как бы, не наткнется,
5127280	5129280	типа, на все там, типа, окей, я
5129280	5131280	закончила.
5131280	5133280	При этом, как мы с вами в тот раз, как бы,
5133280	5135280	выяснили, она каждый раз добавляет
5135280	5137280	сколько было
5137280	5139280	потрачено на данную инструкцию
5139280	5141280	газа, то есть у нас
5141280	5143280	есть специальные, как бы, цены, как бы,
5143280	5145280	на вот этот вот газ,
5145280	5147280	вот, и если
5147280	5149280	этот газ, газ,
5149280	5151280	газ,
5151280	5153280	становится больше определенного лимита,
5153280	5155280	какого-то там серьезного, не знаю, там,
5155280	5157280	10 миллионов газа, например, там,
5157280	5159280	то делается реверт,
5161280	5163280	то есть все откатывается,
5163280	5165280	и, как бы,
5165280	5167280	транзакция падает с
5167280	5169280	сообщением out of gas, но при этом
5169280	5171280	включается в блок, как бы, и вам придется,
5171280	5173280	как бы, заплатить за это. Лимит
5173280	5175280	этот указывает пользователь, то есть вы
5175280	5177280	в своей транзакции говорите, я готов
5177280	5179280	потратить не больше, чем там
5179280	5181280	100, чем 100 тысяч газа,
5181280	5183280	как бы, то есть это, в принципе, на совести
5183280	5185280	пользователя.
5185280	5187280	Вот. Чисто технически, если я укажу
5187280	5189280	бесконечный лимит, ну, у меня программа, как бы,
5189280	5191280	будет крутиться, пока не доберется
5191280	5193280	до, так называемого, hard, hard
5193280	5195280	лимита. Значит,
5195280	5197280	как это все дело выглядит?
5197280	5199280	Вообще, если мы будем строить
5199280	5201280	блокчейны, да, и нам нужна
5201280	5203280	будет вот именно вот эта вот механика,
5203280	5205280	она во всех блокчейнах на самом деле
5205280	5207280	присутствует, то есть где-то там по-другому
5207280	5209280	чуть-чуть считается, как бы, вот эти вот
5209280	5211280	попугаи, то есть сколько вы потратили
5211280	5213280	вычислительных ресурсов, но там, где они считаются,
5213280	5215280	как бы, это не блокчейны.
5215280	5217280	Вот. Блокчейны, как раз, только там,
5217280	5219280	где это считается, как бы,
5219280	5221280	и смарт-контракты.
5221280	5223280	Мы бежим. В принципе, можно построить
5223280	5225280	несколькими способами. Значит,
5225280	5227280	первое — это написать свою собственную
5227280	5229280	виртуальную машину, что и сделал Эфир.
5229280	5231280	Они написали, как бы, EVM, вот здесь
5231280	5233280	всякие, можно даже посмотреть примеры
5233280	5235280	инструкций,
5235280	5237280	там, не знаю, там, проверка является
5237280	5239280	то, что она лежит на стейке нулем.
5239280	5241280	Затем, если является,
5241280	5243280	то условный переход, там, туда-то,
5243280	5245280	туда-то, вот на вот это вот AE,
5245280	5247280	значит, куда-то.
5247280	5249280	— Какой уровень выполняет стэк?
5249280	5251280	Это стэковые машины?
5251280	5253280	— Да.
5253280	5255280	Вот. Я
5255280	5257280	прям про стэк сейчас,
5257280	5259280	ну, я сейчас прям подробно расскажу.
5259280	5261280	Потому что здесь есть
5261280	5263280	серьезные отличия.
5263280	5265280	Это значит написать свою
5265280	5267280	виртуальную машину. Второй
5267280	5269280	подход, как бы, который, на самом деле,
5269280	5271280	к которому идет прям очень широкая работа,
5271280	5273280	как бы, — это использовать WebAssembly.
5273280	5275280	WebAssembly — это
5275280	5277280	наш новый с вами, короче,
5277280	5279280	JavaScript,
5279280	5281280	такой, когда у вас есть браузер,
5281280	5283280	и вам здесь надо, там, 3D-модель нарисовать,
5283280	5285280	как бы, и крутить ее, и сделать это на
5285280	5287280	JS, как бы. Вы когда попробуете
5287280	5289280	сделать на JS, как бы, вы офигеете,
5289280	5291280	как бы, какая у вас будет производительность,
5291280	5293280	вряд ли у вас это получится.
5293280	5295280	И для этого появился стандарт
5295280	5297280	WebAssembly, который позволяет вам
5297280	5299280	написать программу, как бы, на
5299280	5301280	таком ассемблере. Вот он
5301280	5303280	вот так вот приблизительно выглядит.
5303280	5305280	И просто
5305280	5307280	прямо на JS-кой странице, типа,
5307280	5309280	сказать, там, JS, там, не знаю, там,
5309280	5311280	compile, там, что-нибудь там,
5311280	5313280	JS, там, .exec, вот этот вот
5313280	5315280	ассемблерный код. И в браузер
5315280	5317280	встроена виртуальная машина,
5317280	5319280	которая исполняет вот этот WASM,
5319280	5321280	и она делает это, там, в тысячу раз быстрее,
5321280	5323280	чем это делать на QNAME или каким-нибудь
5323280	5325280	при помощи JS-а.
5325280	5327280	Пробрасывает прямо в процессор инструкции,
5327280	5329280	там, и так далее. То есть
5329280	5331280	эта штука в тысячу раз быстрее, чем
5331280	5333280	такой, как бы,
5333280	5335280	JavaScript на стероидах, как бы,
5335280	5337280	ассемблерный. Тоже очень
5337280	5339280	популярная, как бы, штука.
5339280	5341280	И, конечно, хотелось бы, да,
5341280	5343280	писать смарт-контракты именно
5343280	5345280	на WebAssembly. Тем более, как бы,
5345280	5347280	WebAssembly
5347280	5349280	у него есть компиляторы,
5349280	5351280	компиляторы, которые
5351280	5353280	компилируют вот этот вот WASM
5353280	5355280	в WebAssembly
5355280	5357280	прямо там, ну, что хотите, хотите, там,
5357280	5359280	Python, JS, короче говоря,
5359280	5361280	там, Rust,
5361280	5363280	и так далее, там, не знаю, там, C,
5363280	5365280	C++. Все это, как бы, можно просто
5365280	5367280	компилировать именно как раз
5367280	5369280	в WebAssembly, и он будет исполняться в браузере
5369280	5371280	со всеми
5371280	5373280	штуками. Но у нас, конечно,
5373280	5375280	на WebAssembly в блокчейнах,
5377280	5379280	как я говорил, как бы, накладываются
5379280	5381280	требования по детерминизму,
5381280	5383280	поэтому у вас вот этот WebAssembly
5383280	5385280	в чистом виде, вот как в WebStore
5385280	5387280	стандарт, как бы, он не используется
5387280	5389280	в блокчейнах, потому что у него внутри
5389280	5391280	здесь может быть, как бы, какой-то рандом,
5391280	5393280	у него там есть
5393280	5395280	получение текущего времени
5395280	5397280	внутри этого WebAssembly, там, у него есть,
5397280	5399280	короче говоря, FPU
5399280	5401280	инструкции, и они все, как бы, ломают
5401280	5403280	детерминизм, вот. Поэтому
5403280	5405280	там, где WebAssembly используется,
5405280	5407280	в частности, там, в Polkadot
5407280	5409280	используются вот эти
5409280	5411280	смарт-контракты на WebAssembly в EOS,
5411280	5413280	еще там, на самом деле,
5413280	5415280	в кучу языков, да и эфир, в общем-то,
5415280	5417280	тоже, как бы, у него есть там
5417280	5419280	EIP и там стандарты
5419280	5421280	и подход к снаряду, они тоже,
5421280	5423280	как бы, хотели переезжать на WebAssembly,
5423280	5425280	вот, пока, как бы,
5425280	5427280	не переехали там, просто WebAssembly
5427280	5429280	в этой виртуальной машине, вот это
5429280	5431280	выпиливается и остается,
5431280	5433280	как бы, голый WebAssembly,
5433280	5435280	ну, такой, как бы,
5435280	5437280	детерминированный, вот. С ним
5437280	5439280	уже, там, соответственно, можно работать.
5439280	5441280	Ну, еще, в принципе,
5441280	5443280	один из кандидатов, как бы, это
5443280	5445280	и Яловский, и, там,
5445280	5447280	C-Sharp, короче, Bytecode,
5447280	5449280	вот такой, ну, как бы, чем не виртуальная машина
5449280	5451280	софтовая, как бы, в теории, как бы, тоже
5451280	5453280	можно использовать, но
5453280	5455280	тоже придется, как бы, поколдовать детерминизм,
5455280	5457280	чтобы ничего вот этого, как бы, не было.
5457280	5459280	Вот.
5459280	5461280	Ну, вот, часто бывает, что, как бы,
5461280	5463280	пишут блокчейны,
5463280	5465280	типа, у нас есть смарт-контракты, но они заботятся
5465280	5467280	о вот этом детерминизме, поэтому,
5467280	5469280	как бы, да, имейте в виду, в эту ловушку
5469280	5471280	не попадаете, там, просто не понимают,
5471280	5473280	как бы, люди.
5473280	5475280	Вот. Значит,
5475280	5477280	по поводу stack-based
5477280	5479280	машины. Значит, что, значит, вообще
5479280	5481280	stack-based,
5481280	5483280	stack-based
5483280	5485280	и register-based?
5485280	5487280	Мне кажется,
5487280	5489280	все знают, что это такая машина.
5489280	5491280	Ну,
5491280	5493280	не знаю, вот, не уверен,
5493280	5495280	если кто-то, как бы, на ASME, как бы, не писал.
5495280	5497280	Посмотрите, у меня есть какая-то
5497280	5499280	функция, которая принимает, как бы, два
5499280	5501280	аргумента, значит, она что-нибудь, там, делает
5501280	5503280	A плюс B, короче, возвращает,
5503280	5505280	там, типа, делает return,
5505280	5507280	return
5507280	5509280	A плюс B.
5509280	5511280	Вот. Такая. Я ее,
5511280	5513280	соответственно, в ASME пишу.
5513280	5515280	Вот.
5515280	5517280	И, значит, как
5517280	5519280	выглядит стековая машина? У меня есть
5519280	5521280	stack.
5521280	5523280	И,
5523280	5525280	как бы, вот эти слова stack и register,
5525280	5527280	на самом деле, ну, прям можно
5527280	5529280	воспринимать, как парадигма
5529280	5531280	передачи параметров функций. То есть,
5531280	5533280	каким образом функция получает свои
5533280	5535280	параметры. В стековой машине,
5535280	5537280	как бы, вот этот код вызову этой функции,
5537280	5539280	когда я сделаю, там,
5539280	5541280	F от 3 и 5,
5541280	5543280	вызову, как бы, ее,
5543280	5545280	то мне
5545280	5547280	компилятор создал следующий
5547280	5549280	код. Он сделает push
5549280	5551280	5, там, push
5551280	5553280	3 или push 3
5553280	5555280	push 5, как бы, там, по-разному.
5555280	5557280	Затем вызывает функцию
5557280	5559280	сложить
5559280	5561280	and,
5561280	5563280	ну, и потом, соответственно,
5563280	5565280	ну, не знаю, там, это
5565280	5567280	return, короче говоря, или, там,
5567280	5569280	не знаю, там, загрузить
5569280	5571280	со стека, как бы, результат,
5571280	5573280	там, не знаю, там, load, короче говоря,
5573280	5575280	там, в какой-нибудь, там,
5575280	5577280	память. Значит,
5577280	5579280	как это будет выглядеть? Сначала я положу
5579280	5581280	на stack 5, потом
5581280	5583280	я положу на stack 3, потом
5583280	5585280	я вызываю функцию add, которая, что делает?
5585280	5587280	Она делает pop
5587280	5589280	3, то есть она снимает, как бы, 3
5589280	5591280	со стека сначала, потом снимает
5591280	5593280	5 со стека, а потом кладет на stack
5593280	5595280	8. То есть делает push, как бы, вот,
5595280	5597280	8.
5597280	5599280	Ну, и, соответственно, я знаю,
5599280	5601280	что после выполнения этой инструкции, как бы,
5601280	5603280	на стеке будет результат вот этих вот
5603280	5605280	вот этих вот операций.
5605280	5607280	То есть это, как бы, простой достаточно способ.
5607280	5609280	А
5609280	5611280	register-based
5611280	5613280	виртуальные машины, они, как бы,
5613280	5615280	работают как? Они, на самом деле,
5615280	5617280	делают не push, а они делают
5617280	5619280	давайте в
5619280	5621280	первый регистр запишем 5,
5621280	5623280	затем, там, в EBX
5623280	5625280	запишем 3,
5625280	5627280	а потом, как бы, вызовем add,
5627280	5629280	там, там, EACS, там, EBX,
5629280	5631280	там, и так далее. То есть они, как бы, будут
5631280	5633280	использовать регистры,
5633280	5635280	как, собственно, используют наши,
5635280	5637280	как используют наши процессоры, там,
5637280	5639280	всякие intelовые, там, рисковые, и так далее.
5639280	5641280	Вот. И тогда в регистре
5641280	5643280	EACS, как бы, уже появятся, там,
5643280	5645280	результаты от 8, и мы его запишем
5645280	5647280	в память. То есть в теории
5647280	5649280	можно было бы сделать EVM, как бы,
5649280	5651280	и регистровать, то есть сделать, там,
5651280	5653280	нам пачку регистров договориться
5653280	5655280	о том, как между ними продают
5655280	5657280	передаются параметры и делать
5657280	5659280	вот эту вот стековую машину.
5659280	5661280	Значит,
5661280	5663280	у регистровой машины,
5663280	5665280	которая, там, напрямую работает
5665280	5667280	с процессором, у нее, наверное,
5667280	5669280	у нее, в общем-то, есть, как бы, преимущество,
5669280	5671280	потому что операции с регистрами, они быстрее, чем
5671280	5673280	операции со стеком. То есть
5673280	5675280	процессор гораздо быстрее, как бы, работает,
5675280	5677280	там, все перекидывает, как бы, в
5677280	5679280	регистрах. Если, там, дальше вот это
5679280	5681280	используется для дальнейших вычислений, все будет
5681280	5683280	прям сильно-сильно быстрее, не надо
5683280	5685280	в память ходить, там, и так далее.
5685280	5687280	То есть, это преимущество у регистровых
5687280	5689280	машин есть. Ну, еще можно, там, разные
5689280	5691280	окна регистров использовать, если вот
5691280	5693280	эти заняты, можно потом пойти, там,
5693280	5695280	ЕЦХ, ЕДХ, как бы, их, там,
5695280	5697280	современных процессоров, этих процессоров,
5697280	5699280	этих регистров немерено.
5699280	5701280	Вот, можно кучу всяких разных, там,
5701280	5703280	оптимизаций делать, но
5703280	5705280	это бьет, правда, по детерминизму
5705280	5707280	исполнения. То есть,
5707280	5709280	потому что здесь
5709280	5711280	внутри есть всякие предсказания, там,
5711280	5713280	переходов, и вот эти вот окна
5713280	5715280	регистров в процессоре, то есть, когда
5715280	5717280	у процессора, как бы, один и тот же набор
5717280	5719280	регистров, он мгновенно переключается
5719280	5721280	между, там, десятками, сотнями,
5721280	5723280	как бы, версий. Наш
5723280	5725280	процессор, когда мы в операционной системе
5725280	5727280	работаем, он постоянно между процессорами
5727280	5729280	переключается, и он, по сути, сейчас
5729280	5731280	он выполнял, там, Notepad,
5731280	5733280	а сейчас ему надо, как бы, в часы
5733280	5735280	как-то переключиться, Clock. Он раз, короче,
5735280	5737280	перескочил, сразу следующий контекст,
5737280	5739280	там уже другой набор регистров.
5739280	5741280	Потом, там, еще какой-нибудь, там, Scheduler,
5741280	5743280	как бы, там другой набор регистров, он, там,
5743280	5745280	работает постоянно, как бы, с разными
5745280	5747280	контекстами. И
5747280	5749280	поэтому, прям, какого-то такого четкого
5749280	5751280	софтового детерминизма от
5751280	5753280	регистровой машины
5753280	5755280	сложнее его реализовать.
5757280	5759280	Ну, и код сильно сложнее, как бы,
5759280	5761280	чем у стековой машины. А еще,
5761280	5763280	что важно, если у вас
5763280	5765280	вместо стековой машины находится такой
5765280	5767280	софтовый процессор, как бы, с регистрами,
5767280	5769280	то вам, чтобы сохранить его состояние,
5769280	5771280	если вам нужно
5771280	5773280	save сделать,
5773280	5775280	то вам нужно сохранить состояние
5775280	5777280	регистров. То есть, вот этот, вот этот,
5777280	5779280	вот этот, вот этот, чему они равны, короче
5779280	5781280	говоря, там, и так далее.
5781280	5783280	А у стековой машины, чтобы сохранить
5783280	5785280	его состояние, надо просто, как бы,
5785280	5787280	сохранить stack pointer,
5787280	5789280	вот я нахожусь, вот, на этой инструкции,
5789280	5791280	у меня instruction pointer,
5791280	5793280	то есть, ну, на какой
5793280	5795280	инструкции я стою, и
5795280	5797280	на каком месте стека я нахожусь в оперативной
5797280	5799280	памяти. Все, как бы, вот этих двух чисел,
5799280	5801280	как бы, достаточно, чтобы, там, пойти сделать
5801280	5803280	свои дела какие-то, потом вернуться,
5803280	5805280	как бы, и просто продолжить исполнять.
5805280	5807280	То есть мне, чтобы контекст установить, достаточно
5807280	5809280	всего двух чисел. Вот.
5809280	5811280	Ну, и стековая машина гораздо
5811280	5813280	более предсказуемая
5813280	5815280	в плане, как бы, поведения.
5815280	5817280	То есть, как бы, все
5817280	5819280	операции очень-очень сильно
5819280	5821280	однотипные, то есть
5821280	5823280	нет никаких, там, возможностей,
5823280	5825280	там, сделать, если мы A и B
5825280	5827280	писали в эти, например, регистры,
5827280	5829280	а на другом компьютере решили вот через вот эти
5829280	5831280	регистры сделать сложение, как бы, пожалуйста.
5831280	5833280	Ну, то есть, все вот это вот должно,
5833280	5835280	как бы, хендлиться. Вот.
5835280	5837280	Но, тем не менее, как бы, можно делать и так,
5837280	5839280	и так, и была выбрана, как бы, стековая
5839280	5841280	машина. Ну, я могу сказать, что
5841280	5843280	например, в блокчейне TON,
5843280	5845280	который,
5845280	5847280	Telegram, который строился там,
5847280	5849280	есть TVM, короче, и они тоже
5849280	5851280	выбрали стековую машину.
5851280	5853280	Вот. Что, как бы, для блокчейнов,
5853280	5855280	как бы, более правильно.
5855280	5857280	Но она, знаете, она такая, она более ровная,
5857280	5859280	она более предсказуемая, она более простая,
5859280	5861280	как бы, в ней меньше
5861280	5863280	может быть уязвимостей, связанной
5863280	5865280	с тратой ресурсов.
5865280	5867280	Различно. А вообще,
5867280	5869280	если взять какой-нибудь просто код,
5869280	5871280	как бы, того же, как бы, там,
5871280	5873280	современного смарт-контракта и скомпилировать
5873280	5875280	его в WebAssembly, в Wasm,
5875280	5877280	то у Wasm есть еще одна
5877280	5879280	проблема.
5879280	5881280	WebAssembly разрабатывался для того, чтобы вы
5881280	5883280	в своем браузере, да, могли
5883280	5885280	крутить 3D-объекты.
5885280	5887280	То есть, там есть, там предусмотрен
5887280	5889280	код, как бы, который может вам взять,
5889280	5891280	как бы, и заалоцировать, там, не знаю, там,
5891280	5893280	10 мегабайт оперативной памяти.
5893280	5895280	Там, не знаю, какого-нибудь объекта
5895280	5897280	и пойти, там, с ним, как бы, работать
5897280	5899280	и так далее. То есть, там очень много
5899280	5901280	аллокаций памяти. То есть,
5901280	5903280	выделить память под объект,
5903280	5905280	а когда вы работаете с объектами
5905280	5907280	вот такого размера,
5907280	5909280	у вас ваш аллокатор памяти,
5909280	5911280	он может, там, заранее, как бы, что-нибудь резервировать.
5911280	5913280	Там, выделю я, пожалуй, сейчас 10
5913280	5915280	килобайт вот этому чуваку, но еще вот здесь
5915280	5917280	вот, как бы, такой кусочек выделю, как бы,
5917280	5919280	вдруг он захочет потом расширить этот массив,
5919280	5921280	чем-нибудь дописать.
5921280	5923280	Дай-ка его, и вот здесь я тоже
5923280	5925280	с запасом сделаю, там, еще
5925280	5927280	что-то. И получается
5927280	5929280	так, что очень простой
5929280	5931280	код на, грубо говоря,
5931280	5933280	самая простая логика
5933280	5935280	в АСМе, она может порождать большое
5935280	5937280	количество аллокаций
5937280	5939280	аллок и фри.
5939280	5941280	Ну, и освобождение, как бы,
5941280	5943280	памяти. Просто потому, что у вас думают,
5943280	5945280	ну, а вдруг сейчас, как бы, в этой переменной
5945280	5947280	вдруг появится, там, не знаю, там, 10
5947280	5949280	мегабайт, как бы, а вдруг этот цикл
5949280	5951280	сейчас будет, там, какой-то, там, безумный, там,
5951280	5953280	и так далее. То есть, там есть, там, всякие, как бы,
5953280	5955280	оптимизации. То есть, для блокчейнов он не
5955280	5957280	очень-то подходит. Поэтому
5957280	5959280	в блокчейнах под WebAssembler
5959280	5961280	пишут, как бы, свои собственные
5961280	5963280	компиляторы. У Polkadot есть свои
5963280	5965280	собственные, там, однопроходные компиляторы
5965280	5967280	для WebAssembler. То есть, его все время нужно
5967280	5969280	докручивать. Вот.
5969280	5971280	Поэтому пока что
5971280	5973280	в смарт-контрактах победили специализированные
5973280	5975280	виртуальные машины.
5975280	5977280	Вот. Они являются наиболее такими
5977280	5979280	востребованными.
5979280	5981280	Так.
5981280	5983280	Время 13.40.
5983280	5985280	Мы уже час 40 с вами проговорили.
5985280	5987280	Поэтому я предлагаю сейчас перерыв.
5987280	5989280	Давайте
5989280	5991280	на 15 минут. То есть,
5991280	5993280	до 13.55.
5993280	5995280	В 13.55 я вернусь.
5995280	5997280	Раз чайку попьете.
5999280	6001280	Так. Все.
6001280	6003280	Тогда перерыв.
6015280	6017280	Продолжение следует.
6045280	6047280	Продолжение следует.
6075280	6077280	Продолжение следует.
6105280	6107280	Продолжение следует.
6135280	6137280	Продолжение следует.
6165280	6169280	Продолжение следует.
6195280	6201280	Продолжение следует.
6225280	6233280	Продолжение следует.
6255280	6265280	Продолжение следует.
6285280	6295280	Продолжение следует.
6315280	6327280	Продолжение следует.
6345280	6347280	Продолжение следует.
6375280	6377280	Продолжение следует.
6405280	6407280	Продолжение следует.
6435280	6437280	Продолжение следует.
6465280	6467280	Продолжение следует.
6495280	6497280	Продолжение следует.
6525280	6527280	Продолжение следует.
6555280	6557280	Продолжение следует.
6585280	6587280	Продолжение следует.
6615280	6617280	Продолжение следует.
6645280	6647280	Продолжение следует.
6675280	6677280	Продолжение следует.
6705280	6707280	Продолжение следует.
6735280	6737280	Продолжение следует.
6765280	6767280	Продолжение следует.
6795280	6797280	Продолжение следует.
6825280	6827280	Продолжение следует.
6855280	6857280	Продолжение следует.
6857700	6861280	55 мм.
6861280	6863280	55 мм.
6863280	6865280	55 мм.
6865280	6867280	55 мм.
6867280	6869280	55 мм.
6869280	6871280	55 мм.
6871280	6873280	55 мм.
6873280	6875280	55 мм.
6875280	6877280	55 мм.
6877280	6879280	55 мм.
6879280	6881280	55 мм.
6881280	6883280	55 мм.
6883280	6885280	55 мм.
6885280	6905240	То есть видно, что это как бы там запушили одно значение, другое значение, сохранили в память куда-то там, выделили, соответственно, в памяти кусочек, запушили, вызвали там какую-нибудь там функцию, которая вернула там размер входных аргументов, сравнили больше-меньше, условный переход.
6905240	6934020	То есть, в принципе, похоже как бы на работу с ассемблером, вот, и как бы все смарт-контракты, они представляют собой вот этот вот, собственно, набор как раз обходов, вот они как бы их байты, там, когда мы, скажем, выкладываем контракт в сеть, то, по сути, его машинные, ну, вот прям, как бы, собственно, байт-код его функции, вот он находится вот здесь вот где-нибудь там в инпуте, то есть достаточно как бы большой, вот можно, например, посмотреть.
6935240	6939040	Вот, у нас вот так вот все, наши контракты, этот вратит эфира.
6941440	6955880	Так, ну, будет, будет очень долго, не, на самом деле, можно посмотреть самую первую, как бы, его транзакцию, когда он только был создан первый раз, там, last, как бы, контракт creation, то есть в тот момент, когда он был создан.
6957500	6960760	Так, ладно, что-то он тут уже прям не доматывает.
6961640	6964880	Вот, и там можно увидеть, соответственно, байт-код контракта.
6965240	6969600	Байт-код контракта, который там размещался, он это сейчас, в общем, не так критично.
6970380	6971360	А можно вопрос?
6971620	6971740	Да.
6972000	6978660	У нас же показаны были разные байт-коды, да, естественно, как они вообще не разные байт-коды запускаются?
6982000	6995220	Ну, грубо говоря, сначала, сначала я создаю транзакцию create-контракт, create-контракт, у меня вот здесь внутри находится как раз байт-код моего контракта, вот эти вот там 6060,
6995460	7001900	6040, 52, вот это вот прям, он по сути, как бы, весь, как бы, байт-код контракта с определенными штуками.
7002580	7014160	И когда майнер применяет, когда майнер применяет, как бы, вот эту вот транзакцию, create-database, он создает, как бы, запись, что теперь, как бы, есть контракт по новому адресу, вот.
7014860	7025220	Датадес, кстати, вычисляется из моего, вот, из этого, из АВАСи, вот, там, с балансами фиры, там, с пустым нонсом, как бы, сюда прям копируется, вот,
7025240	7027460	байт-код, на самом деле
7027460	7029540	не целиком, там, за исключением
7029540	7030380	конструктора,
7031160	7033100	и теперь, как бы, он может вызываться.
7033220	7035400	То есть, на самом деле, может быть, как бы, много контрактов
7035400	7037220	с одним и тем же байт-кодом.
7037600	7038320	Пожалуйста, как бы.
7038840	7040620	Но это байт-код EVM, да?
7041180	7042980	Байт-код, да, именно EVM.
7043440	7044860	А если в AppAssembly
7044860	7046180	он транслируется в EVM?
7048140	7048580	Нет.
7048840	7050940	Но имеется в виду, что вы сюда
7050940	7053060	разместите, как бы, можете любой мусор
7053060	7055220	здесь разместить, но EVM его не обработает.
7055280	7057220	Конечно, в процессе он, как бы, при помощи EVM.
7058780	7058960	Вот.
7059020	7060840	Я так понимаю, в эфире
7060840	7062380	используется только EVM?
7062700	7064840	Да, в эфире только
7064840	7066800	EVM. Ну, в смысле, как?
7066920	7069040	Есть история,
7069040	7070440	есть, как бы, предложение
7070440	7073080	компилировать, солить, ну, чтобы
7073080	7074780	EVM умел еще, как бы, и
7074780	7076360	в WebAssembly байт-код.
7077340	7078940	Ну, значит, будут контракты, как бы,
7078980	7080760	здесь, которые
7080760	7083160	на WebAssembly, как бы, написаны. Здесь будут инструкции
7083160	7084100	в WebAssembly идти.
7085060	7085220	Вот.
7085240	7086360	А, то есть это просто
7086360	7089240	для общего развития. Да, да, да.
7089280	7090980	А так-то, на самом деле, да, как бы,
7091020	7093180	в эфире это в основном EVM. Но, и
7093180	7095440	как я уже говорил, она, в общем, по сути
7095440	7096880	является победителем
7096880	7099160	в гонке, как бы, смарт-контрактов,
7099220	7101060	потому что даже тот же самый
7101060	7103160	WebAssembly, который, казалось бы, ну, блин, ну,
7103180	7105260	как, это же стандарт, там, у Mozilla, там,
7105340	7107180	Google использует этот WebAssembly,
7107340	7109180	там, значит, все, там, поддержка, там,
7109240	7110240	машины виртуальные.
7110900	7113140	Но все равно его приходится допиливать
7113140	7115080	для блокчейнов. Как бы, лучше оказалось,
7115240	7117180	как бы, проверенное уже, там,
7117220	7119500	сколько, 7 лет, как бы, этой EVM,
7120280	7121020	которая кучей
7121020	7123220	детских болезней переболела.
7123340	7124920	То есть огромное количество изменений
7124920	7127500	в security, там, во всем, там, были сделаны.
7129080	7131200	Я обещал поговорить, как бы, про
7131200	7133440	стоимость газа.
7133540	7135080	Вот. И вот, собственно, как раз
7135080	7136500	и поговорим
7136500	7139440	сейчас, да, просто для, как бы,
7139480	7141440	примера. Ну, вот, например, там,
7141440	7143760	Push, да, это... Можно вопрос, пока я не забыл?
7144020	7144860	Да, да, да.
7144860	7146920	Вот. Вы скинете потом презентацию
7146920	7148820	в чат? Да, да, да.
7148920	7150660	Будет вместе с записями, как бы, да.
7150800	7152160	Будет все рядом лежать.
7152360	7153500	Не волнуйтесь.
7154760	7155120	Значит,
7155440	7158620	ну, просто так, по стоимости, да, как бы,
7158740	7160580	то есть мы просто взяли из головы
7160580	7162300	какие-то, там, не знаю, очки, как бы,
7162360	7164360	какие-то, там, не знаю, execution costs
7164360	7166480	и так далее. Придумали свою
7166480	7168420	собственную виртуальную машину. У нас вот такая
7168420	7169620	вот, как бы, куча инструкций.
7170240	7172000	И давай им, значит, цену назначать.
7172520	7174740	Но операции со стеком у нас должны быть дешевые.
7174860	7176520	Да, там, три, как бы, там,
7176720	7178480	запушить, как бы, значение на стек.
7178580	7180420	Ну, сложение, понятно, как бы, что там,
7180660	7182920	прочитали пару значений, процессор
7182920	7183400	сложил.
7185460	7186320	Значит, там,
7186580	7188480	здесь я что-то прям,
7188640	7190880	ну, наверное, не очень,
7191040	7192580	как бы, точно указал, как бы, обратились
7192580	7194480	к оперативной памяти, и эта штука уже, как бы,
7194540	7196500	сильно потяжелее. Потому что неизвестно,
7196620	7198680	сколько я хочу сохранить. Если я хочу сохранить
7198680	7200780	килобайт, как бы, и, там, мегабайт,
7201480	7202860	то у меня должна быть разница
7202860	7204680	в тысячу, как бы, по цене.
7204860	7206600	То есть, поэтому написано, там, перслот.
7207100	7209000	То есть, оценивается по количеству
7209000	7210820	выделяемых слотов эта история, там,
7211040	7212840	наверное, трешка, я, наверное, прям написал.
7214500	7214860	Там,
7214940	7216360	jump, условный переход.
7216720	7218820	Ну, это, собственно, как у нас везде,
7218940	7220840	как бы, ну, везде есть,
7220840	7222880	как бы, условный переход. Без него компьютер
7222880	7224720	невозможен, как бы, и тюринг полный,
7224800	7226900	как бы, вообще, хоть какие-то языки.
7227380	7228940	Поэтому, вот, если у нас условный переход,
7229080	7230460	проверка условий стоит 10.
7231520	7232980	И вот, мега-дорогие
7232980	7233620	операции.
7234860	7236760	Очень сильные, короче. Это загрузка
7236760	7238860	из сториджа и сохранение
7238860	7240840	в сторидж. Почему самая
7240840	7242840	дорогая, ну, сохранение в сторидж,
7242900	7245020	ну, потому что вы сохраняете свою переменную
7245020	7247000	в сторидж, вот в эту k-value баз данных,
7247020	7248660	и она будет скопирована на тысячи
7248660	7250660	компьютеров в эфире, как бы. Поэтому, да,
7250660	7252200	за это, как бы, придется заплатить.
7253040	7254680	Заметьте, сохранить одно значение
7254680	7256780	стоит, ну, прямо с нуля, как бы, у вас
7256780	7258720	пустой контракт, вы просто какое-то значение
7258720	7260660	сохраните в сторидж, стоит 20 тысяч газа.
7261800	7262760	При этом перевод
7262760	7264780	эфира стоит 21 тысячу
7264780	7266700	газа. То есть, вот, просто, как бы, послать
7266700	7268440	кому-то эфир будет стоить, как бы, там,
7268520	7270760	есть у нее, там, base cost, как бы, основная
7270760	7272300	цена 21 тысяча эфира.
7273300	7273700	Вот.
7274720	7276160	Сохранение одного значения, там,
7276360	7278680	20 тысяч. Вызов
7280020	7280860	другого контракта.
7281260	7282720	Понятно, что штука, как бы, сложная,
7282840	7284820	как бы, ну, на сам кол, как бы, надо, за него
7284820	7286580	надо заплатить, потому что нам надо
7286580	7288420	для этого, там, глобальные перемены
7288420	7290780	подтянуть, там, контекст вызовов подготовить,
7291380	7292500	и так далее, как бы.
7293060	7294480	Но, по-хорошему, когда я
7294780	7296680	иду из одного контракта в другой, да, то
7296680	7299100	у меня, как бы, газ с этим вызовом передается.
7299580	7300960	То есть, я сейчас, там, не знаю,
7301060	7302720	там, бегу по первому
7302720	7304720	контракту, потратил 50
7304720	7306640	тысяч газа, потом у меня происходит
7306640	7308980	вызов, я иду в другой, в другой контракт,
7309460	7310860	там продолжается исполнение,
7310980	7312720	здесь тоже, как бы, газ суммируется,
7312820	7314860	я потратил, там, еще, еще плюс 22
7314860	7316820	тысячи газа, как бы, вернулся
7316820	7318560	обратно, и у меня уже здесь 72,
7318740	7320600	ну, и продолжу дальше.
7320780	7322920	То есть, там, там тоже, как бы, механизмы
7322920	7324620	довольно, там,
7324780	7326420	разные есть, можно с вызовом послать, там,
7326500	7328280	любое количество газа, какое вам нравится,
7328400	7329260	то есть, все это делается.
7330600	7332660	Ну, и то, что я говорил про лог, это про
7332660	7334160	вот эти, вот, ивенты,
7334560	7336920	которые в контракте
7336920	7337840	происходят.
7339400	7340440	То есть, вот эти, вот, которые
7340440	7341940	депозит выбрал,
7342200	7343140	господи ты боже,
7344280	7345900	сори, намотал.
7346940	7348800	Вот он. Вот эти, вот,
7348840	7350820	то, что в момент трансфера происходит
7350820	7352560	ивент трансфер, в момент депозита
7352560	7354480	происходит ивент депозит, вот,
7354780	7364020	они стоят соответственно довольно дешево вот 375 плюс ну плюс цена короче говоря ну за размер
7364020	7371220	данных то есть ни одного байта еще раз напоминаю как бы ни одни 1 байт бесплатно как бы не процессе
7371220	7378120	если говорить о наборе инструкции здесь есть соответственно обходы мы видим по сути в общем
7378120	7383300	то то же самое описание там виртуальной машины как ассемблера да вот там сложение на стеки
7383300	7390440	должно быть два числа на выходе на стыке будет как бы в сумму умножение деление все как бы
7390440	7399820	понятные истории сравнения сравнение двух чисел да там на стыке будет результатом труды фолз тоже
7399820	7407660	все как бы известно там сравнению с нулем там и так далее так далее сдвиги первое наверное
7407660	7412400	интересная инструкция на котором мы натыкаемся от инструкции сша 3 который нету как был в
7412400	7413000	современных процессах
7413300	7420880	микроконтроллеров крайне важный который считает хэш от данных в оперативной памяти то есть вы
7420880	7426320	говорите как бы там где оперативной памяти лежат данные сколько байт прочитать и от них надо
7426320	7433340	посчитать хэш вот он стоит соответственно но он считает как раз хэш вот этот алгоритм хэширование
7433340	7439760	кетчуп 256 который еще называют не называют официальное название сша 3 то что это третий
7439760	7443280	международный стандарт хэширования который всем миром принято
7443300	7449960	алгоритм хэширования 256 бит и вот он как бы ключевой в эфире весь эфир построен вот на этом
7449960	7458240	как бы кичаки мы его дизайн будем рассматривать на симметричных микрографии обход который получает
7458240	7465500	адрес текущего контракта на стыке обход который получает баланс эфира данного адреса пожалуйста
7465500	7473280	как бы там ну там всякие там типа кто вызвал кто вызвал этот контракт сколько он эфира послал вместе с эфиром
7473300	7479360	то есть мы сейчас выполняем как бы транзакцию и у нас есть по сути глобальные перемены когда мы
7479360	7486200	процессе наш контракт этот код как бы бежим к нему а нам еще вдобавок как бы сюда передаются глобальные
7486200	7492680	перемены это то есть кто отправил транзакцию сколько предложил ему денег вот инструкция
7492680	7501260	которая позволяет параметры загрузить связанные с этим вызовом колдата это как бы называется вот еще
7503300	7509200	такая как бы интересно инструкция код сайдс размер кода то есть она довольно тупая как бы
7509200	7515960	из того что я вам рисовал у васи как бы но у него там баланс как бы у него кода никакого
7515960	7522080	нету а вот у нашего контракта как бы код есть вот эта инструкция она просто выдает размер
7522080	7527960	как бы кода то есть можно при помощи ее узнать как бы на этот адрес является контрактом или
7527960	7533120	просто адресом с эфиром вот с этим тоже там много связано безопасности тоже как бы поговорим
7533300	7537360	Вот там всякие, и так далее.
7538000	7541060	Значит, Coinbase — это довольно интересная штука.
7542120	7549360	Когда майнер будет исполнять смарт-контракт, вот в этой переменной, блок Coinbase,
7549880	7554780	то есть можно в смарт-контракте обратиться, получить адрес майнера, который этот блок произвел.
7556040	7561280	То есть вы можете в текущем блоке получить адрес того, кто этот блок произвел.
7561280	7563440	Когда отправлять транзакцию, вы этого не знаете.
7563620	7570200	Но когда транзакция будет исполняться, понятно, что майнер подставляет сам адрес того,
7570740	7577540	адрес того, кто произвел блок, и вы получите, соответственно, его можете в контракте использовать.
7578500	7582740	Мега важная штука — блок timestamp, по сути, получение текущего времени.
7583160	7587780	Как я говорил, у всех транзакций в одном блоке одно и то же время текущее.
7587780	7589360	Это время вот этого блока.
7589720	7590780	И без всяких там...
7591280	7593020	Без всяких расхождений.
7594280	7596700	Ну, там номера блока, difficulty.
7598280	7600160	Важная довольно штука — газ-лимит.
7600600	7606780	То есть сколько в этом блоке максимально может быть потрачено газа, причем как бы на все транзакции.
7608040	7614220	Ну, то есть сколько как бы в данном блоке всего, как бы вот этих попугаев на все транзакции будет.
7614220	7619080	То ли всего, а может быть и на данную транзакцию какой-то там hard-limit, честно говоря.
7621280	7625160	Уж как бы наизусть о спецификации, конечно, не знаю.
7625960	7627500	Важный параметр — chain ID.
7628380	7630700	То есть это как бы идентификатор сети.
7631500	7635020	Видите, здесь там MyNet, Robsten, Girly и так далее.
7635140	7641800	То есть каждый форк эфира, ну, такая как бы копия эфира, которая хочет как бы у себя реализовать EVM,
7642680	7647620	и чтобы все контракты были совместимы, как бы чтобы они правильно возвращали как бы идентификатор цепочки,
7647620	7651260	то в разных блокчейнах chain ID разный.
7651280	7657740	Например, если я вот здесь вот там выбираю как бы между там Girly, Ethereum, MyNet,
7657740	7664380	по сути у меня будет в транзакциях меняться вот этот вот chain ID, а контракты могут это дело проверять.
7664380	7669880	То есть там твоя транзакция как бы для этого chain ID как бы предназначена, вот.
7669880	7676500	Затем как бы баланс самого контракта, там, короче, там базовые фичи, сейчас чуть-чуть тоже о них поговорим.
7676500	7680660	Загрузка память — mLoad, mStore.
7680660	7681160	mStore.
7681160	7685540	mStore там одного байта, как бы это операция с оперативной памятью.
7685540	7689920	То же самое с mLoad и mStore, такие же операции, но со стороджем.
7689920	7695160	Здесь уже видите, как k-value, здесь уже никакие не обсеты, вот.
7695160	7703440	Jump — условный jump, вот, ну и дальше как бы много разных видов пушей, которые нам нужны.
7703440	7710540	Ну а dupe — это как бы дуплицирование значения на стеке, ну это очень часто нужно как бы,
7710540	7720620	вы там получили результат из функции, как бы вы ее используете в следующей функции и хотите предыдущий результат тоже сохранить на стеке, вот.
7720620	7731500	Ну и куча всяких разных штук, как бы связанных с операциями на стеке, свапы, как бы это все для того, чтобы более эффективно все получалось, вот.
7731500	7736480	Запись событий, ивентов, вот этот вот log и так далее.
7736480	7739700	Здесь есть как бы log для разного количества аргументов.
7739700	7740200	Вот.
7740540	7745700	Сам call — вызов другого контракта.
7745700	7752000	Вот обкод очень важный, как бы create, который создает новый контракт.
7752000	7758100	Он говорит там типа «забери байткод этого контракта и создай как бы новый контракт по определенному адресу».
7758100	7764060	То есть контракт может не только обращаться к другим контрактам, он может еще и deploy другие контракты.
7764060	7767020	И эта штука тоже используется, тоже посмотрим.
7767020	7768620	Вот.
7768620	7770340	Затем там различные вызовы.
7770340	7773500	Call, call code, delegate call — тут много.
7773500	7779260	Вторая версия, create2, тоже про нее поговорим, то есть еще один способ deploy контракта.
7779260	7788100	Static call — это когда мы обращаемся к библиотеке и говорим, в течение этого вызова как бы ничего в сторидже поменяться не должно быть.
7788100	7793300	Ни в коем случае мы не будем трогать вообще сторидж как бы ни в каком виде.
7793300	7798740	Такой вызов подешевле, вот, и нужен для обращения к библиотекам.
7798740	7800120	Ну, есть еще revert.
7800340	7805500	И еще мега интересная инструкция, которая называется self-destruct.
7805500	7807120	Значит, что делает self-destruct?
7807120	7814140	Self-destruct удаляет полностью весь код контракта, то есть он становится как бы нулевым.
7814140	7825820	Затем берет, короче говоря, весь баланс эфира, который есть, ну, есть у этого контракта и отправляет его тому, кто этот self-destruct вызвал.
7825820	7829500	Ну, то есть, по сути, вычеркивает отсюда полностью, как бы вот такой контракт.
7829500	7834900	полностью вот эту строку, весь эфир возвращает тому,
7834900	7839180	кто этот селл-дистракт, не тому, кто вызвал, а на самом деле,
7839400	7842520	то есть вызывающий селл-дистракт должен позаботиться о том,
7842600	7845580	кому отправить эфир, если он здесь есть, конечно.
7848500	7853100	По поводу селл-дистракта идут очень жаркие споры,
7853240	7855080	и, скорее всего, его скоро выпилят.
7855480	7857840	То есть его просто не будет, его просто не будет.
7857840	7860140	Конечно, хотелось бы экономить место в блокчейне,
7860260	7862360	вот такие вот контракты выпиливать,
7863220	7867840	но это создает очень серьезные проблемы для работы нод,
7868240	7871800	потому что нода качает новые блоки, качает новые блоки,
7871860	7874640	она тратит свои силы на поддержание стейта,
7875100	7877000	здесь контракт жив, здесь контракт жив,
7877580	7880860	а пользователь говорит, какой там мой баланс в этом контракте,
7881400	7883660	а нода еще не догнала до нового блока,
7883660	7887820	и она не знает, вдруг здесь будет селл-дистракт этого контракта,
7887900	7891300	может, я ему вообще должна ошибку или ноль выдать,
7891780	7895640	а я еще не знаю, возможно, в следующем блоке будет селл-дистракт,
7895780	7899180	и она тратит свои силы на то, чтобы индексировать эту всю штуку.
7899820	7903900	Гораздо проще было бы вообще не иметь возможности удалять,
7904220	7908480	пускай все там живет, и ничего не меняется.
7909120	7913920	Вообще, опять же, в базах данных сама инструкция делит,
7913920	7917380	она довольно коварная, то есть кажется, что там все просто,
7917380	7920280	как бы, удалить данные, но, на самом деле, если вы начнете думать о том,
7920280	7927480	как работают всякие сложные выборки, которые там работают с тысячами строк и так далее,
7927480	7933380	то, на самом деле, окажется, что делит операция крайне сложная.
7933760	7937760	И, как ни странно, внутри многих движков она реализуется при помощи инсертов.
7938760	7943560	То есть строка заменяется на новую версию, как бы пустую,
7943960	7947320	то есть которой там нету, ну, в общем, много всяких,
7947320	7952320	тонкостей, как бы, в общем, удаление штука такая довольно коварная.
7952320	7956320	Как можно выпилить self-destruct? Это же нарушится обратная совместимость.
7957320	7961080	Ну, да, там для некоторых проектов обратная совместимость нарушится.
7961080	7964560	Да, есть такое дело, вот, но, как бы, эфир хочет на это пойти,
7964560	7973320	потому что без self-destruct невозможны дальнейшие, как бы, улучшения работы нод, вот.
7973320	7977220	Ну, потому что из-за того, что, как бы, возможно, что контракт вдруг к какому-то блоке
7977320	7984320	неожиданно исчезнет, создает очень много, как бы, проблем и там всяких ифов именно в коде,
7984320	7986320	именно в коде нод.
7986320	7993320	Потом старается, держит его state, короче говоря, там, ну, там, следит за его, там, состоянием, как бы,
7993320	7997320	а потом он взял, короче говоря, и, как бы, сделал self-destruct.
7997320	8003320	И, начиная с определенного блока, один и тот же запрос по адресу контракта, который, там, например,
8003320	8006320	там, его код запрашивает или его какое-нибудь состояние, как бы,
8007320	8014320	может работать, и ноде, как бы, непонятно, чего отвечать, как бы, то ли это, как бы, то ли это, вот.
8014320	8017320	В общем, это довольно сильно, как бы, мешает.
8017320	8022320	Вот, если бы его не было, как бы, то, если бы все контракты навеки, как бы, всегда прибиты, как бы,
8022320	8025320	гвоздями в блокчейне, то было бы проще.
8025320	8028320	С обычными адресами, которые не смысл контракта, так и происходит, да?
8028320	8030320	Их нельзя удалить.
8030320	8037320	Да, да, да, их нельзя удалить, они так, ну, здесь вообще все, как бы, остается, остается навсегда, вот.
8037320	8044320	Просто так, как бы, обойти это нельзя, как бы, но можно при помощи криптографических протоколов разработать софт,
8044320	8052320	там, типа ноды, которые ведут только часть, ну, по сути, как бы, которые ведут только контрольные суммы всего этого.
8052320	8056320	То есть у них, по сути, есть доказательство, что действительно байткод по такому-то адресу,
8056320	8065320	оно имеет вот такой вот хэш криптографический, что действительно баланс, короче, этого пользователя, вот, там, скажем, как бы, такой,
8065320	8067320	но при этом сами данные они не держат.
8067320	8068320	Вот.
8068320	8077320	И, по сути, вот эта часть нод будет обеспечивать безопасность сети, а те, кому, как бы, нужен конкретно, там, сам код в процессе транзакции и так далее,
8077320	8084320	это будут уже, там, дополнительные сервисы, дополнительные типы нод, там, в общем, это долго еще рассказать.
8084320	8092320	Если прям очень интересно, то читайте, как выглядит эфир 2.0, там, все его, как бы, основные, как бы, механизмы.
8092320	8096320	На самом деле, там, очень много сделано и очень хорошо.
8097320	8098320	Вот.
8098320	8100320	Они очень внимательные.
8100320	8101320	Вот.
8101320	8102320	Так.
8102320	8103320	Окей.
8103320	8104320	Поехали дальше.
8104320	8107320	Значит, про цену чуть-чуть поговорили.
8107320	8118320	Соответственно, про, тоже, если дальше, как бы, говорить, там, про цены, то у нас есть у Hard Limit блока.
8118320	8125320	И, как я говорил, когда мы у нас сильно, ну, сильно забитые, сильно забитые цены.
8125320	8126320	Да.
8126320	8136320	Сильно забитый блокчейн, прям, вот, прям, не знаю, на 100%, как бы, все, все там забито, то вверх идут комиссии.
8136320	8144320	Они теперь, они теперь, по сути, как бы, используются чуть-чуть похитрее, чем раньше.
8144320	8155320	То есть, есть, ну, случился Е1559 Hard Fork, это было в августе 21 года, после которого было запрещено.
8155320	8158320	Ну, то есть, например, ставить, как бы, цену газа ноль.
8158320	8165320	То есть, раньше вы, в принципе, могли в теории, как бы, создать, как бы, транзакцию и сказать, цена газа ноль, стоит она ноль, как бы, пожалуйста, как бы.
8165320	8167320	Ну, то есть, никто не запрещал.
8167320	8176320	Понятно, что никто вашу транзакцию майнить не будет, она никому не нужна, но, тем не менее, в блоках таких транзакций было дофига с нулевой ценой.
8176320	8177320	Что это было?
8177320	8183320	Это были майнеры, которые одновременно трейдеры, и они, чтобы не запариваться, как бы, просто вставляли, как бы, транзакции с нулевым газом.
8183320	8184320	Да.
8184320	8186320	Транзакции с нулевым газ-прайсом свои собственные.
8186320	8192320	То есть, могу ставить, могу, как бы, беру, доставляю, как бы, и все, и не волнуюсь газ-прайсом.
8192320	8201320	Вот, про это тоже будет достаточно богатый разговор, про майнер extractable value, как раз про который докладывал я недавно.
8201320	8207320	Вот, там все очень интересно, вот с тем, как борются за включение транзакций в блок.
8207320	8213320	Там все гораздо интереснее, нежели в white paper написано, типа, поставил больше денег, тебя быстрее замайнят.
8213320	8214320	Вот это вот.
8214320	8215320	Не всегда так работает.
8215320	8219320	Значит, запретили вот этот вот нулевой газ-прайс.
8219320	8229320	Сказали, что есть специальная такая base fee, то есть минимальная цена за газ, которая зависит от вот этой заполняемости блока.
8229320	8234320	То есть, блоки забиты на 100%, base fee растет вверх.
8234320	8240320	Типа, ребята, sorry, блок-чейн весь забит, как бы, к черту, как бы, давайте, как бы, больше платите, больше денег.
8240320	8241320	Вот.
8241320	8243320	Потом, как бы, деньги растут вверх.
8243320	8248320	Блок перестает заполняться, например, там, на 50%, как бы, он заполнен.
8248320	8250320	Он, как бы, идет вниз.
8250320	8254320	Вот это вот то, что я говорю, заполнен, измеряется, как вы думаете, в чем?
8254320	8257320	Ну, в чем удобно измерять заполняемость блока?
8261320	8263320	В мегабайтах?
8263320	8266320	Ну, в долях, в количествах чего-то.
8266320	8268320	Не-не-не, неудобно.
8268320	8270320	Удобнее всего измерять в газе.
8270320	8272320	У нас есть...
8272320	8277320	У нас есть уже, как бы, универсальный, универсальный, по сути, счетчик.
8277320	8281320	Счетчик, считающий, как бы, кванты, как бы, исполнения.
8281320	8287320	Чтобы мы не перегрузили, как бы, майнеров, не вставляли в блок, там, какое-то безумное количество транзакций.
8287320	8289320	Не замедляли процессинг и так далее.
8289320	8292320	У нас есть, по сути, универсальный измеритель, газ.
8292320	8297320	Мы взяли первую транзакцию, вторую транзакцию, третью транзакцию.
8297320	8301320	У нас есть вот этот большой, так называемый, ну, там, hard limit.
8301320	8303320	Его по-разному используют.
8303320	8312320	Говорят, что hard limit — это константы, которые в одной транзакции не позволяют потратить, там, ну, скажем, там, больше десяти, там, не знаю, миллионов, короче, газа.
8312320	8314320	Но и, как бы, для блока тоже говорят.
8314320	8321320	То есть есть hard limit, там, не знаю, там, две тысячи, две тысячи транзакций умножить на текущий hard limit.
8321320	8326320	Вот столько газа, как бы, максимум, как бы, может быть, может находиться в блоке.
8326320	8328320	Вот этот hard limit, он тоже тюнится.
8328320	8329320	Тоже динамический.
8329320	8330320	В зависимости от заполняемости.
8331320	8332320	В зависимости от заполняемости блока.
8332320	8333320	Вот.
8333320	8336320	То есть, там, где-то здесь, там, может уменьшается, здесь, там, он увеличивается.
8336320	8339320	То есть, там, целая, как бы, модель такая большая.
8339320	8343320	На нее, в общем, можно, на нее можно посмотреть.
8343320	8344320	Вот.
8344320	8351320	То есть здесь вопрос с комиссиями, он здесь, как бы, такой очень глубокий, там, умный.
8351320	8354320	За ним, там, много всякой экономики, как бы, построено.
8354320	8360320	Раньше эфир просто за каждый блок печатал, там, сколько-то, как бы, эфира майнеру.
8360320	8368320	Плюс, как бы, ему, там, назначал, ну, плюс он плюсовал, как бы, фи, то есть, комиссии
8368320	8369320	с транзакцией.
8369320	8372320	Сейчас все сделано, как бы, по-другому.
8372320	8376320	То есть, теперь у него есть, там, базовая штука, у него есть комиссии с транзакцией.
8376320	8379320	Плюс еще часть эфира сжигается.
8379320	8384320	И сжигается она, как раз, по-моему, в том случае, если есть какой-то недобор в блоке.
8384320	8389320	То есть, как бы, народ перестает пользоваться эфиром.
8389320	8391320	Значит, он какой-то, там, менее ценный, как бы.
8391320	8395320	Значит, надо общее количество эфира уменьшить.
8395320	8397320	То есть, просто начать его сжигать.
8397320	8399320	Его будет становиться меньше.
8399320	8403320	Это будет дефляция, и, как бы, цена эфира поэтому пойдет вверх, как бы.
8403320	8410320	Они, там, ну, в общем, тут, чтобы просто не дезинформировать вас именно, как бы, фактами.
8410320	8412320	Но самое главное, что эта модель, она, прям, динамическая.
8412320	8415320	И там, конечно, обоснованы все эти, все эти истории.
8415320	8418320	Можно почитать в ЯИПах, почему так было предложено.
8418320	8420320	И это довольно грамотно сделано.
8420320	8425320	То есть, сейчас эфир, как бы, такая очень развитая финансовая система.
8425320	8428320	Вот.
8428320	8434320	Дальше, ну, дальше уже, в принципе, такой, как бы, халявный, достаточно, как бы, кусок.
8434320	8437320	Мы с вами на Etherscan, как бы, посидели.
8437320	8441320	Сейчас еще чуть-чуть посидим, посмотрим, как бы, как смотреть всякие транзакции.
8441320	8443320	Что у них есть.
8443320	8447320	Затем я покажу, как примерно выглядит, как бы, там, не знаю.
8447320	8449320	Там, разработка.
8449320	8451320	Мы будем использовать HardHat.
8451320	8454320	Есть такой фреймворк, очень удобный для разработки.
8454320	8459320	На самом деле, подсолидить их, прям, несколько штук, там, три, четыре, пять.
8459320	8461320	Здесь очень много, как бы, всего.
8461320	8464320	Чуть-чуть полазим по разному, там, коду.
8464320	8465320	Вот.
8465320	8466320	Там, про Flow поговорим.
8466320	8471320	То есть, сейчас уже, такой, более, более обзорная часть лекции.
8471320	8475320	Etherscan'ом пользуются, наверное, как бы, все, практически, как бы, постоянно.
8475320	8482320	Как вы понимаете, это, по сути, как бы, архивная, ну, сервис, который, как бы, бегает в архивные ноды.
8482320	8486320	Собирает огромное количество разной информации.
8486320	8488320	Размечает адреса.
8488320	8490320	То есть, например, он там.
8490320	8495320	Вот здесь мы видим, что вот этот адрес называется в RapidEther.
8495320	8497320	То есть, что это его, что он является токеном.
8497320	8500320	Что это, как бы, контракт токена.
8500320	8504320	При этом Etherscan, как бы, понимает, как читать этот контракт, как писать этот контракт.
8505320	8512320	Отдельного слова, наверное, как бы, заслуживает вот эта вот штука, что я вам показываю исходник.
8512320	8515320	Исходник этого смарт-контракта.
8515320	8517320	Откуда исходник взялся?
8517320	8525320	Ну, то есть, вроде бы, как чувак задеплоил этот, значит, в RapidEther вот его там адрес.
8525320	8527320	Вот его код.
8527320	8528320	Это машинные инструкции.
8528320	8533320	То есть, если вы просто сюда заглянете, там будет, по сути, его байт-код.
8533320	8534320	Вот он.
8534320	8535320	Так, creation-код.
8535320	8538320	Вот так вот он выглядит в машинных инструкциях.
8538320	8542320	Вот там, там, вот так вот.
8542320	8546320	Откуда взялся у нас исходный код?
8546320	8550320	Для этого, как бы, используется, так называемая, верификация смарт-контракта.
8550320	8556320	Вы можете прийти на вот этот адрес, на котором не будет вот этого исходного кода.
8556320	8560320	И сказать, я знаю такой исходник.
8560320	8562320	Я знаю такой исходник, как бы, который...
8562320	8564320	Получается...
8564320	8567320	Ну, из которого скомпилирован вот этот вот байт-код.
8567320	8570320	Это уже чисто централизованный, как бы, сервис.
8570320	8572320	Вы заходите на Etherscan.
8572320	8574320	Заливаете туда прямо вот этот текст.
8574320	8575320	Вот.
8575320	8576320	Видите?
8576320	8578320	Даже с этим самым, с лицензионным соглашением.
8578320	8582320	Которое понятно и никаким образом в байт-коде, как бы, вот здесь вот не представлено.
8582320	8585320	Вы заливаете туда этот текст.
8585320	8587320	Что делает Etherscan?
8587320	8588320	Он его компилирует.
8588320	8590320	Ваш вот этот текст.
8590320	8591320	А...
8591320	8593320	На самом деле убирает, как бы, еще там конструктор.
8593320	8596320	Потому что конструктор не включается, как бы, в байт-код.
8596320	8599320	И сравнивает с тем, что находится в блокчейне.
8599320	8602320	Вот там вот, собственно, вот с этой вот штукой.
8602320	8605320	Там где-то вот здесь вот, там, типа, код конструктора.
8605320	8608320	Вначале заканчивается, как бы, и начинается сам код контракта.
8608320	8613320	Вот он сравнивает, действительно ли из вашего исходника получился в точности вот этот вот байт-код.
8613320	8616320	И если он получился, как бы, то...
8616320	8618320	Ну, это все хорошо.
8618320	8619320	Вот.
8619320	8620320	А...
8620320	8622320	Еще вторая, как бы, важная штуковина контракта.
8622320	8625320	Это так называемая ABI.
8625320	8627320	То есть смарт-контракты в эфире.
8627320	8632320	Они ходят, по сути, для того, чтобы вы могли построить DAP.
8632320	8633320	Который...
8633320	8635320	Приложение, которое работает со смарт-контрактом.
8635320	8638320	Вам же нужно знать вот эти все интерфейсы, функции.
8638320	8640320	Что принимает депозит?
8640320	8641320	Что принимает withdraw?
8641320	8643320	Какой тип аргументов?
8643320	8644320	Какие из них пишущие?
8644320	8645320	Какие из них читающие?
8645320	8647320	Там и так далее.
8647320	8649320	И эта информация, этот интерфейс, как бы...
8649320	8652320	Он представляется в формате ABI.
8652320	8654320	Application Binary Interface.
8654320	8655320	Вот.
8655320	8658320	И здесь, в общем-то, описаны все функции.
8658320	8663320	Ну, то есть там написано, там, не знаю, там...
8663320	8667320	Где там функция какая-нибудь.
8667320	8669320	Ну, короче...
8669320	8672320	Я хотел найти какой-нибудь там депозит.
8672320	8673320	Депозит.
8673320	8676320	Name.
8676320	8677320	Payable.
8677320	8678320	Ну, в общем...
8678320	8687320	Вот здесь вот как бы прописаны все функции данного контракта и типы их параметров.
8687320	8691320	То есть здесь внутри где-то как бы зашита функция transfer.
8691320	8695320	И мы знаем, что для того, чтобы перевести эти токены к кому-то другому,
8695320	8702320	мы должны передать адрес назначения и количество токенов, которые мы должны передать.
8702320	8703320	Вот.
8703320	8705320	И это описывается вот в этом ABI.
8705320	8707320	Ты его подключаешь к JavaScript.
8707320	8713320	Это ABI, как бы ты его засовываешь, как бы, там, не знаю, там, в свой скрипт на Python, который общается с контрактом.
8713320	8718320	И у тебя появляется, по сути, такой объектный интерфейс к твоему контракту.
8718320	8719320	Вот.
8719320	8728320	То есть как он там преобразуется в вызовы тоже будет рассказано, когда там низкоуровневые всякие будут смотреть штуки по обращению к контракту.
8728320	8729320	Вот.
8729320	8732320	Это значит то, что касается ABI.
8732320	8735320	Затем, если посмотреть на этот...
8735320	8736320	Ну, опять же, как бы...
8736320	8739320	На общение с контрактом в RapidEther.
8739320	8743320	Это токен такой, как бы, не знаю, там...
8743320	8748320	То есть вы можете на своем балансе иметь там сколько-то в RapidEther.
8748320	8758320	То здесь есть, например, передача, вкладка, короче, ERC-20 Token Transfers.
8758320	8765320	То есть которая покажет, как бы, все транзакции, в которых кто-то кому-то какое-то количество вот этого в RapidEther передал.
8766320	8774320	То есть там вот этот парень, как бы, передал там один эфир и, короче говоря...
8774320	8781320	А, передал там, не знаю, там один токен Uniswap там кому-нибудь там вот этому в RapidEther.
8781320	8783320	Да, непонятно почему.
8783320	8785320	Или...
8785320	8787320	А, ну это я сейчас...
8787320	8789320	Это я с контрактом.
8789320	8791320	Значит, как вот эти вот штуки сделаны?
8791320	8794320	ERC-721, ERC-1155, короче говоря.
8794320	8795320	Как вот эти трансферы сделаны?
8795320	8803320	Как вы думаете, что парсит EtherScan для того, чтобы показать, как бы, что токены были переданы?
8803320	8807320	Какие данные контракта?
8807320	8810320	Вот он показывает все операции в RapidEther.
8810320	8816320	Ну, там, все оперирования, как бы, в RapidEther.
8816320	8818320	Либо транзакции, либо его лог.
8818320	8822320	Ну, правильный ответ именно лог.
8822320	8824320	То есть, на самом деле, как бы, не транзакции.
8824320	8831320	А вот то, что мы с вами как раз говорили вот про вот эти вот ивенты.
8831320	8836320	В стандарте токена записано, что после того, как токены были переданы,
8836320	8841320	в случае успеха обязательно в логе должно появляться вот такое событие определенного вида,
8841320	8847320	которое называется трансфер с параметрами от кого, кому и какое количество.
8847320	8848320	Вот.
8848320	8851320	EtherScan, по сути, как бы, висит постоянно на блокчейне,
8851320	8853320	постоянно слушает вот эти вот события трансфера.
8853320	8855320	Из разных токенов.
8855320	8858320	И как только такое событие встречает,
8858320	8862320	он, соответственно, у нас вот здесь вот эту транзакцию показывает.
8862320	8866320	Там сохраняет, индексирует, там, и так далее, и так далее.
8866320	8869320	Все для этого, как бы, нужны ивенты.
8869320	8871320	Вот.
8871320	8873320	Ну, какой там еще, может, там...
8873320	8875320	Еще может какой-нибудь токен показать.
8875320	8877320	Ну, точнее, если... Давайте вот так вот.
8877320	8882320	Авиа V2, лендинг пулк.
8882320	8885320	Ну, это такой, как бы, большой очень...
8885320	8889320	Очень большой контракт здоровый.
8891320	8895320	Вот так, сейчас я найду implementation.
8895320	8897320	Implementation должно быть здесь.
8897320	8899320	Прокси.
8899320	8901320	Не, ладно, посмотрим.
8904320	8906320	Так, не авиа...
8906320	8908320	Под словом токен, что имеется в виду?
8908320	8909320	А?
8909320	8911320	Под словом токен, что имеется в виду?
8912320	8916320	Мы с вами активно это разберем.
8916320	8919320	Прям контракт токена будем здорово разбирать.
8919320	8923320	По сути, под словом токеном подразумевается контракт,
8923320	8926320	в котором есть функция transfer,
8926320	8929320	в котором есть функция balance.
8929320	8930320	Balance...
8930320	8932320	Balance of.
8932320	8935320	Есть стандарт, который говорит, какие функции должны быть там.
8935320	8937320	Transfer from.
8937320	8938320	Там есть несколько функций.
8938320	8941320	Есть прям стандарт, который называется ERC20.
8941320	8944320	Вот прям, по сути, как бы стандарт, который говорит,
8944320	8947320	что контракт токена должен иметь вот эти функции,
8947320	8949320	а работает он следующим образом.
8949320	8952320	Он, по сути, изображает из себя, как бы, криптовалюту.
8952320	8953320	В точности, как эфир.
8953320	8956320	То есть, токен это такой минимальный, как бы, контракт,
8956320	8960320	который говорит, что у Васи там 100 токенов,
8960320	8964320	а у Пети там 200 токенов.
8964320	8966320	В своем сторидже.
8966320	8968320	Вот это вот очень важно, как бы.
8968320	8970320	То, что он, как бы, эти балансы держит.
8971320	8973320	В своем сторидже.
8973320	8976320	И когда делается трансфер, соответственно, там,
8976320	8979320	у Васи там списали 20, этому добавили 20.
8979320	8982320	Пишет этот токен программист.
8982320	8983320	Вот.
8983320	8986320	Но зато все, как бы, могут зайти в этот контракт
8986320	8988320	и убедиться, что у него здесь в трансфере нету, там,
8988320	8992320	какого-нибудь трояна, который позволит ему взять, короче,
8992320	8995320	и у кого угодно, там, не знаю, токены на свой адрес перевести,
8995320	8996320	утащить, как бы.
8996320	8998320	Есть, как бы, и такие затроянные токены.
8998320	9001320	То есть, это контракт, который удовлетворяет вот этим,
9001320	9004320	как бы, стандартам и ведет себя, как криптовалюта.
9004320	9007320	Ну, то есть, у него есть балансы, как бы, представляет собой,
9007320	9009320	там, что-то типа, там, денег и так далее.
9009320	9013320	Вот на этих токенах строится практически вся, как бы,
9013320	9014320	экосистема.
9014320	9017320	Такой, как бы, базовый кирпичик, из которого это строится.
9017320	9018320	Вот.
9018320	9021320	Мы будем, будем очень подробно, как бы, про это смотреть.
9021320	9023320	Вот.
9023320	9029320	Это, по сути, ну, как бы, когда, как бы, эфир появился,
9029320	9036320	начались же вот это, началась эпоха, как бы, ICO, краудфандинга.
9036320	9040320	И ICO-шный контракт, он обычно работал следующим образом.
9040320	9045320	То есть, есть какая-то цена, например, ну, например,
9045320	9051320	я говорю, я делаю специальную криптовалюту, токен, значит,
9051320	9054320	у кого есть один токен, то, значит, один час, как бы,
9054320	9057320	может на моих, там, самокатах кататься.
9057320	9058320	Вот.
9058320	9060320	Токен равно один час, как бы, на моих самокатах.
9060320	9063320	И пытаюсь убедить людей накидать мне на это денег.
9063320	9068320	Я создаю цену, там, цена, которая делает, как бы,
9068320	9071320	эфир на мой, там, какой-нибудь самокат-токен.
9071320	9072320	Вот.
9072320	9076320	Приходит чувак, кидает, как бы, десять эфира, хочет
9076320	9080320	очень кататься на самокате, и в ответ, и мой вот этот
9080320	9083320	вот смарт-контракт, то есть он там вызывает функцию
9083320	9086320	депозит, короче говоря, или там функцию, там, какую-нибудь,
9086320	9087320	или просто, там, отправляет, как бы, эфир.
9087320	9090320	Это тоже, как бы, программируется.
9090320	9094320	И когда он, соответственно, эту функцию вызывает, в
9094320	9097320	ответ я ему в сторидже создаю запись.
9097320	9101320	Там, это опять Вася у нас, как бы, тебе, Вася, значит,
9101320	9103320	дорогой друг, двадцать токенов.
9103320	9104320	Сам.
9104320	9107320	Как бы, и Вася у себя, как бы, видит в метамаске,
9107320	9110320	что у меня двадцать токенов сам теперь.
9110320	9113320	А десять эфира, как бы, ушли, легли на баланс, как бы,
9113320	9116320	вот этого, на баланс этого проекта.
9116320	9118320	В принципе, Вася может и обратно сказать, так,
9118320	9120320	все, я передумал, хочу withdraw.
9120320	9123320	Я тебе отправляю, как бы, двадцать токенов сам,
9123320	9125320	а ты мне возвращай мои десять эфира.
9125320	9127320	И там до определенного момента это возможно.
9127320	9134320	А потом VCO, как бы, появил, ну, то есть сам контракт
9134320	9135320	является токеном.
9135320	9138320	То есть кто угодно может прийти, как бы, и спросить,
9138320	9143320	какой баланс, какой балансов у Васи.
9143320	9144320	И он ответит.
9144320	9145320	Вот.
9145320	9146320	И он ответит.
9146320	9148320	У Васи двадцать токенов.
9148320	9152320	Могу, кстати говоря, это даже продемонстрировать.
9152320	9156320	У меня в метамаске есть какие-то активы.
9156320	9158320	В тестовой сети.
9158320	9160320	Нет, по-моему, в тестовой нету.
9160320	9162320	Может, в Ринкебе есть.
9162320	9163320	Вот.
9163320	9165320	У меня тут много разных токенов.
9165320	9167320	Каких-то там многих.
9167320	9169320	Вот есть Юни.
9169320	9172320	Токен, сейчас посмотрим на него.
9172320	9174320	Вот он, контракт этого Юни.
9175320	9176320	Токена.
9176320	9180320	То есть вот он прям с его там трансфер, депозит.
9180320	9182320	Вот они все его там эти функции.
9182320	9187320	И я могу спросить, а сколько вот у этого чувака, возьму
9187320	9192320	свой адрес, вот у этого парня, 0FD, короче говоря,
9192320	9195320	сколько у него токенов, балансов.
9195320	9196320	Вот я ввожу.
9196320	9199320	Это как раз вот эти самые view функции читающие.
9199320	9201320	Спрашиваю, он мне возвращает.
9201320	9202320	У него шестнадцать токенов.
9202320	9203320	Вот.
9203320	9206320	Здесь видит шестнадцать и еще вот семнадцать знаков
9206320	9207320	после запятой.
9207320	9208320	Decimals.
9208320	9209320	Вот.
9209320	9212320	Я правильно понимаю, что дробные числа в блокчейне
9212320	9215320	представляются как числа с фиксированной точкой?
9215320	9216320	Да.
9216320	9219320	Я как раз про это на прошлой лекции говорил.
9219320	9223320	То есть нету никаких дробных чисел в блокчейне вообще.
9223320	9227320	Даже там проценты, они все равно как бы представляются
9227320	9231320	как бы, как вот такие вот целые, целые там по большей
9231320	9232320	части беззнаковые числа.
9232320	9233320	Вот.
9233320	9234320	Это все как бы из-за детерминизма.
9234320	9235320	То есть вы не можете операции нативные с FPU, но с плавающей
9235320	9236320	точкой проводить как бы на разных процессорах
9236320	9237320	с одними и теми же результатами.
9237320	9238320	Вот он.
9238320	9239320	Поэтому под это есть специальный библиотек.
9239320	9240320	Поэтому все токены, все криптовалюты, биткоины,
9240320	9241320	эфиры, короче говоря, какие не возьмете, как бы они
9241320	9242320	все вот так выглядят под капотом.
9242320	9243320	Как целые, которые вы делите, как бы вы делите.
9243320	9244320	Вот.
9244320	9245320	Вот.
9245320	9246320	Вот.
9246320	9247320	Вот.
9247320	9248320	Вот.
9248320	9249320	Вот.
9249320	9250320	Вот.
9250320	9251320	Вот.
9251320	9252320	Вот.
9252320	9253320	Вот.
9253320	9254320	Вот.
9254320	9255320	Вот.
9255320	9256320	Вот.
9256320	9257320	Вот.
9257320	9258320	Вот.
9258320	9259320	Вот.
9259320	9260320	Вот.
9260320	9261320	Вот.
9261320	9262320	Вот.
9262320	9263320	Вот.
9263320	9264320	Вот.
9264320	9265320	Вот.
9265320	9266320	Вот.
9266320	9267320	Вот.
9267320	9268320	Вот.
9268320	9269320	Вот.
9269320	9270320	Вот.
9270320	9271320	Вот.
9271320	9272320	Вот.
9272320	9273320	Вот.
9273320	9274320	Вот.
9274320	9275320	Вот.
9275320	9276320	Вот.
9276320	9277320	Вот.
9277320	9278320	Вот.
9278320	9279320	Вот.
9279320	9280320	Вот.
9280320	9281320	Вот.
9281320	9282320	Вот.
9282320	9283320	Вот.
9283320	9284320	Вот.
9284320	9285320	Вот.
9285320	9286320	Вот.
9286320	9287320	Вот.
9287320	9288320	Вот.
9288320	9289320	Вот.
9289320	9296400	то есть насколько минимально он делится вот соответственно этого да что касается как бы
9296400	9302860	контракта токина ну а дальше вася была просто функция как бы которая говорит
9302860	9312240	там типа забрать все деньги ты потом там три колма не и которая выводила весь эфир
9312240	9318700	который выкидали там куча вас как бы это куча этого эфира они отдавали как бы владельцу тому
9318700	9323060	кто-то контракт создал и вообще решил там самокатами заниматься но при этом в этой
9323060	9328780	функции прям публично можно было представить смарт-контракте написано типа если время как
9328780	9337940	бы меньше чем там декабрь короче 2018 года идите нафиг как бы эфир до этого времени я забыл забрать
9337940	9344800	если баланс короче говоря меньше чем 1000 эфира то есть если как бы мне накидали денег меньше чем
9344800	9348680	1000 эфира как бы все идите нафиг как бы то есть можете забрать свои деньги как
9348680	9354620	бы и выйти из если они не наберу на свой проект 1000 эфира на запах самокатов то как бы извините
9354620	9362740	вот такой как бы как этот kickstarter по сути как бы просто аналог kickstarter и как бы но
9362740	9369500	написанный в виде по 1 смарт-контракта при этом у тех кто как бы участвует у них остаются вот эти
9369500	9375740	вот токены баланса как бы они ими могут дальше пользоваться там как угодно и там уже миллион
9375740	9378480	идей там типа этими токи нами расплачиваться там за
9378680	9387060	не знаю там еще там смотреть там кино короче говоря собирать краудфандинг на создание фильма здесь
9387060	9393060	можно тоже конечно куча всяких идей там всякие там и scroll какие-нибудь там знаменитые люди которые
9393060	9398360	будут ставить галочки типа прошел ли проект на следующую стадию на следующей стадии можно ли
9398360	9404920	ему там достать следующий кусок из этих фамилий то есть очень много всего было сделано и сама идея как
9408680	9415340	ничего можно просто краудфандинг заниматься не выходя вообще никуда из эфира вот очень просто
9415340	9421580	как бы и проекта на этом многие там миллиард собрали понятно что трэша там было очень много
9421580	9430240	то что такое такая свобода просто конечно не дается вот это значит что касается там токенов
9430240	9438660	и а из рассказа давайте посмотрим теперь собственно как наверное уже немножечко прям зацепим как бы
9438680	9447900	разработку в которой вам придется довольно много работать я в общем-то показываю такой движок такой
9447900	9454920	фреймворк который называется hard head это для тех кто любит больше java script чем питон вот
9454920	9462980	для тех кто любит больше питон как бы есть очень похожий фреймворк называется брауни вот у меня есть
9462980	9465800	hard head потому что там есть там демонстрации некоторых всяких штук
9468680	9474560	по сути представьте что я просто решил как бы создать свой контракт не знаю там токина который
9474560	9480860	просто чуть-чуть поумнее там у него там не знаю что он берет комиссии там еще что-нибудь у меня
9480860	9489020	есть вот этот oversight hard head этоisiónет желестный короче там этот package Zlojko это
9489020	9492900	качество называется значит он позволит вам на вашем компьютере вам на вашем компьютере
9493580	9496320	хорошо свет сатру
9498680	9504320	он на вашем компьютере поднимает но до такую как бы девелоперскую свою собственную которая
9504320	9513980	вроде бы как как бы манит блоки вы пишете как бы смарт-контракт этот смарт-контракт затем
9513980	9520820	выполняете как бы java скриптовый тест в этом java скриптовом тесте есть диплой этого контракта
9520820	9528620	вы это диплой как бы дипло из вот это вот как бы в игрушечный эфир в этом же как бы внутреннем
9528620	9534800	в этом скрипте как бы вы станете владельцем адреса на котором есть много много эфира 100 миллионов
9534800	9542600	там такой там эфира вы можете здесь же притвориться любым другим адресом в обчине то есть стать как
9542600	9546940	бы им там полезно не знаю изменить старич контракты так далее там возможности очень
9546940	9550820	много вот на по сути вы можете сделать диплой какой как вот в этом
9550820	9556040	виртуальную ноду а потом начать соответственно делать различные вызовы там тесты как бы и так
9556040	9560780	далее то есть работать ровно так как он будет работать в блокчейне ваш контракт то есть
9560780	9567620	проводить тесты в такой локальный девелопер ноде вот штука крайне удобно ее как бы легко
9567620	9574460	запускать как бы и легко программировать сидишь в двух файлах один файл пишешь на солидите второй
9574460	9579380	как бы тест на джейсе и в общем то никуда как бы из этой штуки не выходишь как бы тебе ни эфир
9579380	9580800	не нужен никакой там не будет
9580800	9586560	блокчейн как бы не криптовалюта просидишься в локальном окружении она достаточно удобно и
9586560	9593760	а сам hard head как бы и брауни и последние фреймворки чем они круты тем что вот вместо
9593760	9602840	вот этого вместо вот этого я могу прицепить майнет начиная с любого блока то есть я могу
9602840	9610560	сказать внутри вот этого своего теста джества я хочу сказать я могу сказать так возьми пожалуйста
9610800	9618180	как бы ford не сделай прям копию боевого эфира начиная с блока там такого-то такого-то прям вот
9618180	9626400	в точности вот прям полностью его состоянии после этого я хочу стать васей вот прям причем реальным
9626400	9634440	васи вот прям вот отсюда то есть реальным васи который вот здесь вот там славки это транзакции
9634440	9639120	там так далее хочу стать вот этим вот адресом что у меня на балансе был эфир как бы вот такие вот
9640800	9647560	то есть ты становишься как вот этим вот адресом он тебя имперсонирует и после этого ты делаешь
9647560	9653160	там любые вызовы делаешь либо чего хочешь там эмулируешь работу там с любым протоколом и он
9653160	9659100	тебе исполняет это в таком как бы в блокчейне который от почковывается от майонета то есть
9659100	9665400	там никого кроме тебя нету как бы и ты там делаешь что хочешь именно в этом кроется как раз причина
9670800	9676440	то есть почему как бы здесь хаки такие частые как бы почему хаки такие как бы там большие почему
9676440	9681300	как бы хакерам здесь так фривольно потому что у них есть именно вот это вот возможность они
9681300	9688320	могут сказать взять в прям в текущем виде как бы прям протокол где лежит там не знаю там 100
9688320	9693800	миллионов долларов на разных и в депозитах прикинуться там таким-то как бы участникам
9693800	9699540	или просто взойти как бы новым участникам и полностью про эмулировать как бы все атаку там
9700800	9707380	со практически со стопроцентной вероятность то есть все данные готовы как бы все состояние
9707380	9712680	контракта все будет воспроизведено со стопроцентной точностью не считая конечно то что здесь
9712680	9718200	пользователем могут видеть как бы транзакции за это время helping этого не увидит но для так это
9718200	9723360	как вне суть то есть вы можете воспроизвести любой контракт в майонете прямо вот в его
9723360	9729300	пол к чистом в виде со стопроцентной точностью без особых проблем как это позволяет сделать
9729300	9730700	там тоже несколько строчек и то
9730800	9734100	Это мега удобно для тестирования.
9735160	9738060	У меня здесь есть контракт, их там несколько.
9738380	9740040	У меня есть там контракт токена.
9741040	9743040	Вот, он такой достаточно как бы тупой.
9743040	9745580	Так, давайте я лучше с подсветочкой как-нибудь.
9747780	9749980	Так, это тест, это тест.
9750360	9753040	Давайте контракт с токеном.
9756240	9757680	Так, промахнулся.
9757680	9760660	У меня тут много их.
9760920	9765940	Ну, соответственно, там солидити указывается версия, как бы солидити.
9766360	9769000	Там импорт это относится только к хардкату,
9769000	9774140	который дает суперскую возможность писать в консоль из контрактов,
9774280	9777720	потому что так-то, когда вы там тестите контракты в блокчейне,
9777780	9781420	конечно, там ни консоли нет, ничего, никакого вывода, ничего такого.
9782900	9785160	Я писал название своего токена.
9786680	9787000	Вот этот мой...
9787680	9790200	Public name, по сути, превратился в getter,
9790460	9791800	то есть такую функцию name,
9792000	9794080	которая возвращает как бы вот такое название,
9794300	9795280	my hard hat token.
9795420	9796660	Мы уже такой getter видели,
9797020	9799320	когда смотрели с вами в rapid эфир.
9801120	9802060	Так, где он там?
9803760	9806520	Вот, в rapid эфир, как бы, когда мы его смотрели с вами,
9806620	9808920	у него тоже можно спросить, как бы, какой у тебя name,
9809040	9811140	как бы он возвращает имя в rapid ether.
9812280	9813520	Вот такое неявное.
9814020	9815640	Очень похоже все-все на OOP.
9815840	9817520	Значит, описали, кто владелец данного контракта,
9817680	9820680	это, в общем, владельцем будет тот, кто его задеплоил,
9820780	9823080	то есть тот, кто отправил транзакцию создать токен,
9823180	9824980	как бы он станет олднером.
9825080	9830580	И у меня есть просто ассоциативный массив, там dict, как в питоне,
9830680	9834780	который эфириумный адрес отображает uint-256.
9834880	9838980	uint-256, привыкайте, как бы это будет вообще любимый тип данных ваших.
9839080	9844460	Вот, который говорит, у вас есть 100 токенов, у Пети 200 токенов и так далее.
9844560	9847460	Вот прям вот примитивно совершенно.
9847680	9849680	Затем у меня есть конструктор.
9849780	9852680	Когда я буду деплоить этот контракт, у меня пропишется,
9852780	9855680	что у того, кто создал данный контракт,
9855780	9860680	у него будет вот столько-то токенов, total supply,
9860780	9862680	вот сколько у него будет здесь соответственно,
9862780	9865680	один миллион токенов, я его сделал, как будто переменную.
9865780	9868680	То есть все вот эти токены будут на моем балансе,
9868780	9870680	когда я это задеплою.
9870780	9872680	То есть я буду их владельцем.
9872780	9874680	И я же буду владельцем данного контракта.
9874780	9876680	Если у меня будут какие-то админские функции,
9876780	9877680	которые будут,
9877780	9878680	которые только для Овнер,
9878780	9880680	я могу в них делать проверку,
9880780	9884680	типа что транзакцию отправил только вот этот чувак Овнер.
9884780	9887680	Вот эти вещи, опять же, в Solidity,
9887780	9892680	то есть почему похоже на JavaScript,
9892780	9894680	но на самом деле совсем не то программирование,
9894780	9896680	потому что на самом деле вот это не явно,
9896780	9898680	это запись storage.
9898780	9900680	То есть то, что я здесь присваиваю переменные,
9900780	9901680	это просто для удобства,
9901780	9906680	а на самом деле здесь происходит именно запись в переменной storage,
9906780	9912680	потому что описанные вот здесь переменные глобальные для всего этого класса контракта,
9912780	9917680	они в общем по дефолту отправляются в storage.
9917780	9919680	То есть это не временные какие-то переменные.
9919780	9921680	Стоит мне изменить total supply,
9921780	9926680	и с меня спишут там сколько-то тысяч газа за запись в storage,
9926780	9930680	и это изменится в блокчейне, если транзакция пройдет.
9930780	9933680	Затем функция transfer.
9933780	9935680	Я же хочу, чтобы у меня был токен,
9935680	9936680	совместимый с кошельками,
9936780	9938680	чтобы они знали, какую функцию дергать,
9938780	9940680	поэтому у меня функция такая, как и у других.
9940780	9943680	Принимает адрес, называется transfer.
9943780	9947680	Сначала она проверяет, что у меня достаточно токенов,
9947780	9949680	чтобы сделать этот перевод.
9949780	9951680	А что означает external?
9951780	9954680	External то же самое, что public.
9954780	9958680	Тоже будем разбирать.
9958780	9961680	Посчитайте, что это как бы то же самое, что и public,
9961780	9963680	как бы просто чуть лучше работает,
9963780	9965580	если эта функция...
9965680	9968680	Вызывается только снаружи исключительно,
9968780	9970680	то есть как бы только в транзакциях.
9970780	9975680	Public работает лучше, если она еще и вызывается из других контрактов.
9975780	9978680	Газа потребляет меньше.
9978780	9982680	Значит, require это типа ассерта.
9982780	9986680	Здесь есть, кстати, и ассерт, но типовая как бы это require.
9986780	9990680	История такая же, как и в программировании,
9990780	9993680	там на C, на C++.
9993680	9996680	Если у вас вообще там логика в хламину как бы разломалась,
9996780	9998680	и все там автум.
9998780	10001680	А require это типа не хватает баланса.
10001780	10004680	Все как бы, иди отсюда, произойдет реверт.
10004780	10008680	То есть если не выполнится эта штука, то будет реверт.
10008780	10015680	Затем консоль лог, которая кроме hardhat у вас не сработает.
10015780	10020580	То есть вы, конечно, такой как бы не скомпилите ничем кроме hardhat.
10020680	10023580	Вот такую как бы штуку в эфире.
10023680	10025680	Потому что там нет никакой консоли как бы.
10025780	10028680	Но это позволит нам подебажить как бы это дело.
10028780	10031680	Ну и дальше прям все просто как бы.
10031780	10035680	У sender удалили, сняли 100 токенов как бы,
10035780	10037680	а recipient добавили.
10037780	10041680	Еще тоже довольно важная как бы штука в смарт-контрактах,
10041780	10045680	что в смарт-контрактах все, что не определено, то ноль.
10045780	10049680	Вот все, что неизвестно что, короче говоря, вот оно ноль.
10049780	10051680	Вот мы посылаем, короче, Пете,
10051680	10054680	а у Пети как бы у него и адресы,
10054780	10058680	он адрес там от балды какой-нибудь там рандомный назвал там.
10058780	10062680	И вообще как бы у него там ни баланса, ничего нету.
10062780	10064680	Что здесь будет как бы?
10064780	10068680	На самом деле как бы по дефолту вот эта баланса 100 как бы будет равно нулю.
10068780	10071680	К нулю прибавится имаунт как бы.
10071780	10075680	И будет создана как бы запись в ассоциативном массиве как бы вот с этим вот имаунтом.
10075780	10079680	То есть в этом плане как бы solidity как бы здесь достаточно все просто.
10079680	10081680	Если что-то нету, то это ноль.
10081780	10083680	Если что-то не вышло, как бы это ноль.
10083780	10087680	Вы можете обратиться там к любому там адресу в памяти, куда угодно.
10087780	10089680	Как бы никто вам по рукам бить не будет.
10089780	10092680	Просто как бы отдадут вам ноль и все как бы.
10092780	10095680	Это тоже сделано из-за детерминизма.
10095780	10097680	У меня там тоже любимая фраза.
10097780	10100680	Да, смарт-контракты должны исполняться детерминированно.
10100780	10104680	То есть результаты как бы работы смарт-контракта должны быть детерминированы.
10104780	10106680	Но они и ломаться даже должны быть детерминированно.
10106780	10109580	То есть одна и та же ошибка на всех компьютерах,
10109680	10113580	должна приводить ровно к одному и тому же результату.
10113680	10116580	Это тоже достаточно важно.
10116680	10118580	Ну и вот у меня функция balance of balance,
10118680	10121580	которая просто возвращает баланс у аккаунта.
10121680	10126580	Такой прям самый-самый дубовый-дубовый прям вообще в никакую как бы токен.
10126680	10129580	Как я его, соответственно, тестирую?
10129680	10134580	Здесь там фреймворк какой-то JavaScript для тестов.
10134680	10137580	Chai там очень модный с каким-то describe'ами и так далее.
10137680	10139580	С асинхронщиной с различными.
10139680	10144580	Вот здесь уже можете упражняться, как вам нравится, как бы в этих тестах.
10144680	10148580	Есть, соответственно, модификатор, что перед каждым тестом,
10148680	10151580	который я буду запускать, должны выполниться следующие функции.
10151680	10155580	И вот они нам достаточно интересны.
10155680	10159580	То есть первое, как бы здесь используется библиотека ethers,
10159680	10164580	которая позволяет работать с эфиром, там деплоить контракты, вызывать их там и так далее.
10164680	10167580	Таких библиотек на самом деле в JS несколько.
10167680	10169580	Есть web3.js.
10169680	10170580	Есть ethers.
10170680	10172580	Есть еще какие-то.
10172680	10174580	Вот здесь используется ethers.
10174680	10180580	Я делаю, так называемую, фабрику контрактов.
10180680	10186580	То есть он возьмет мой токен .sol, вот этот мой как бы с алиэйти, скомпилит его
10186680	10191580	и инициализирует такой как бы код, который сможет его в блокчейн как бы деплоить.
10191680	10198580	Затем я возьму и вот этим вот переменным назначу значение getSigners.
10198580	10203480	То есть это по сути там такой десяток синтетических аккаунтов, которые у меня будут созданы.
10203580	10208480	То есть мне будет создан owner, у которого будет там 100 тысяч эфира на балансе,
10208580	10212480	адрес 1 со 100 тысячами эфира на балансе, адрес 2,
10212580	10216480	чтобы я мог изображать из себя как бы пользователя моего протокола.
10216580	10219480	То есть у меня в тестах же, наверное, много участников.
10219580	10222480	И поэтому как бы таким образом я это все инициализирую.
10222580	10226480	Затем вызываю функцию deploy.
10226480	10228380	Здесь все как бы асинхронное.
10228480	10234380	То есть если я не сделаю как бы это wait, я получу promise на как бы на транзакцию,
10234480	10237380	которую мне придется подождать.
10237480	10244380	Вот тут я дождался, короче говоря, и теперь у меня, ну, соответственно,
10244480	10249380	вот этот hardhat токен как бы будет задеплоен таким вот образом.
10249480	10255380	Теперь как бы у меня перед каждым, перед каждым моим тестом будет выполняться
10255380	10257280	вот эта вот штука.
10257380	10260280	То есть я каждый раз перед каждым тестом буду заново деплоить свой токен.
10260380	10264280	У меня вот в этой переменной будет лежать вот этот контракт.
10264380	10269280	За меня будет сгенерирован вот это ABI, интерфейс к нему.
10269380	10274280	То есть я теперь к этому токену смогу обращаться просто как в объектно-ориентированной штуке.
10274380	10280280	То есть есть у него переменная owner публичная, вот она, она public.
10280380	10284280	Значит, существует как бы getter публичный, вот такая вот функция как бы,
10284280	10287180	которая будет возвращать значение вот этой переменной.
10287280	10294180	И я, соответственно, могу как бы проверить то, что овнером стал как бы тот овнер,
10294280	10297180	который деплоил этот контракт.
10297280	10303180	Ну, там, ну, по дефолту вот здесь вот как бы он от адреса овнера и задеплоил.
10303280	10306180	А теперь там протестируем там транзакции.
10306280	10312180	То есть я беру как бы hardhat токен своего адреса овнера по дефолту,
10312180	10317080	у которого там миллион этих токенов, на адрес 1 перевожу как бы 50 токенов.
10317180	10326080	Затем как бы вызываю функцию balanceof и проверяю то, что баланс получателя стал равен 50.
10326180	10330080	Вот, там, я по-моему, где-то тест запущен.
10330180	10336080	Вот, можно, соответственно, посмотреть как бы то, что в трансфер вот этот мой консоль,
10336180	10340080	консоль лог написал, что я перевожу вот с этого адреса на этот 50 токенов,
10340080	10342980	и с этого на этот 50 токенов.
10343080	10344980	Вот, ну и тесты там проходят.
10345080	10348980	Понятно, что я могу здесь все вывести, там, все попечатать.
10349080	10353980	Вот, затем точно так же теперь я как бы становлюсь адресом 1,
10354080	10358980	то есть у которого 50 токенов, и пытаюсь их перевести на адрес 2.
10359080	10365980	Вот, и, ну, ожидаю как бы, что на адресе 2 как бы теперь тоже будет 50 токенов.
10366080	10369980	То есть там уже как бы пользователи начинают это делать.
10370080	10373980	Дальше, соответственно, проверки как бы, что там все должно падать,
10374080	10375980	если не хватает токенов.
10376080	10379980	Да, там, адрес 1 теперь как бы токенов ноль как бы,
10380080	10381980	а он кому-то пытается один токен перевести,
10382080	10384980	и как бы тоже как бы все должно упасть.
10385080	10388980	По сути это, да, такой как бы, не знаю, template как бы,
10389080	10391980	если захотите как бы начать там разрабатывать.
10392080	10394980	Здесь это, как видите, довольно несложно.
10395080	10398980	При этом все, что мы здесь делаем, вообще не знаем, где там какой адрес,
10398980	10401880	не знаем, где там какой-то там эфир, короче, какие-то блоки,
10401980	10403880	что-то там майнится как бы и так далее.
10403980	10407880	То есть пока вы не начнете тестировать какие-то более сложные паттерны,
10407980	10412880	то есть когда там типа надо задепозитить, подождать пока пройдет там, не знаю, 30 дней,
10412980	10416880	чтобы потом пришел как бы второй там какой-нибудь чувак, там третий,
10416980	10419880	что будет, если несколько транзакций в один блок как бы затолкать,
10419980	10423880	как бы как это все сделать, как бы, то здесь все достаточно просто.
10423980	10428880	Вот, и учитывая небольшое, ну, там, например,
10428980	10432880	там, да, что балансы должны все правильно апдейтиться, там, и так далее, и так далее.
10432980	10435880	То есть здесь там куча всяких разных тестов.
10435980	10438880	И если вы будете делать как бы курсовой проект,
10438980	10441880	это именно как бы разработка смарт-контрактов на Solidity,
10441980	10447880	то вот такой вот репозиторий, это, по сути, как раз то, что вы будете,
10447980	10449880	то, что вы будете задавать.
10449980	10453880	То есть вы мне будете как бы задавать линк на GitHub-репозиторий,
10453980	10458880	там у вас в ритме будет описано, как его там поставить, запустить,
10458980	10461880	короче, и что это вообще за проект, что он делает, вот.
10461980	10465880	Возможно, как бы там во многих местах как бы очень мне хочется,
10465980	10470880	чтобы прям в ритме был вот этот вот вывод в консоли,
10470980	10476880	и чтобы там хоть какая-то, короче, вот такая вот инфа в консоли выводилась.
10476980	10479880	А вот здесь, короче говоря, у нас там человек пришел,
10479980	10481880	там, не знаю, зарегистрировал диплом.
10481980	10485880	А вот здесь пришел там верифайер, короче, и подтвердил как бы этот диплом.
10485980	10488880	А вот он его, значит, принес как бы проверяющим,
10488980	10493880	как бы ему там вот это вот, у него вот это проверяют и так далее, и так далее.
10493980	10497880	То есть чтобы вот эту вот трассу можно было более-менее так нормально
10497980	10500880	как бы посмотреть в домашнем задании, вот.
10500980	10504880	Ну, чтобы я мог заглянуть там, не знаю, там буквально там в тесты,
10504980	10508880	посмотреть, насколько они полные, заглянуть в сам контракт,
10508980	10511880	посмотреть, как бы насколько он полный.
10511980	10516880	И желательно, если я как бы залипну с какими-нибудь версиями там Node.js там
10516980	10518880	или там Brownie и так далее,
10518980	10522880	я не могу запустить, что я хотя бы мог увидеть в ритме вашу трассу
10522980	10526880	и исполнение как бы вашего теста.
10526980	10531880	Этого, в принципе, уже как бы по большей части достаточно, вот,
10531980	10534880	для того, чтобы сделать именно протокол работающий.
10534980	10538880	Значит, я, мы там не будем особо сильно смотреть на то,
10538980	10541880	насколько вы там красивые как бы интерфейсы нарисовали,
10541980	10546880	но, конечно, если вы прям хотите делать там, не знаю, там NFT, там еще что-то, IPFS использовать,
10546980	10548880	то, конечно, какие-то базовые вещи.
10548980	10552880	Вы должны как бы показать, да, если у вас там JPEG заливаются как бы какие-то,
10552980	10556880	ну, как бы их надо все-таки в браузере отобразить, вот.
10556980	10562880	Но как бы на дизайн смотреть они будут точно как бы, скорее всего, именно на тесты.
10562980	10564880	Вот, поэтому разработка довольно комфортная.
10564980	10568880	Здесь сидишь себе как бы в нескольких, в нескольких файликах в Solidity как бы в тестах,
10568980	10571880	гоняешь их как бы туда-сюда, вот.
10571980	10578880	Особо это как бы не сильно требовательная штука, и можешь легко вот эту же историю,
10578980	10582880	как бы попробовать прямо задеплоить в MyNet.
10582980	10589880	То есть ты, ну, хардхед, как бы, так как вот эти вот функции, которые я здесь сделал, короче,
10589980	10596880	вот этот вот деплой, по-хорошему, израилу своему неважно, куда как бы этот деплой делать.
10596980	10600880	То есть вот эти все вот эти сложные как бы функции, выкладки,
10600980	10604880	вы можете точно так же хардхед подключить прямо к реальному кошельку,
10604980	10608880	ну, точнее, к не реальному кошельку, а как бы указать,
10608980	10614880	что действуй вот с этого адреса, вот тебе публичный, вот тебе секретный ключ от этого адреса,
10614980	10620880	на нем есть там сколько-то там боевого эфира, переключись на боевую сеть и иди как бы туда деплой.
10620980	10623880	И, в общем-то, проекты так и деплоятся.
10623980	10627880	То есть они выкладываются как раз вот при помощи хардхеда,
10627980	10630880	здесь есть там специальный как бы JavaScript-овый сценарий,
10630980	10635880	если вам надо там задеплоить там 3-4 контракта, правильно их инициализировать,
10635980	10638880	то есть вы сделали как бы первый контракт, потом создали второй,
10638980	10643880	во втором указали адрес первого, сказали он будет мной управлять, потом создали третий,
10643980	10647880	то есть все вот это как бы удобно не в голове держать, да,
10647980	10651880	а именно весь этот деплоймент как бы иметь вот здесь вот в тестах.
10651980	10653880	Эта штука как бы крайне, крайне удобная.
10653980	10657880	И можете это проделать на форке майнета,
10657980	10661880	то есть попробовать просто весь сценарий боевой своего деплоя проверить
10661980	10666880	прямо со 100% гарантией прямо на копии как бы текущего эфира,
10666980	10668880	что все у вас сработает как бы,
10668980	10670880	что у вас получится.
10670980	10673880	Вот в этом плане разработка крайне удобная.
10673980	10680880	Так, ну и, соответственно, там по поводу как бы общих тасков,
10680980	10687880	мы много очень будем смотреть всяких разных проектов с вами там пересматривать, вот,
10687980	10691880	но, конечно, хотелось бы, чтобы вы как бы почитали сами, что пишется.
10691980	10696880	Скорее всего, вы прям сразу закопаетесь в тонны как бы проектов, посвященных финансам,
10696880	10702780	там, положил, вынул деньги туда-сюда, у нас под это будут отдельные лекции,
10702880	10705780	значит, как я сказал, финансы крайне популярные,
10705880	10708780	потому что не надо выходить из эфира никуда.
10708880	10712780	Все, как бы, у тебя есть DAB, у тебя, у пользователей есть метамаски,
10712880	10714780	у тебя есть смарт-контракты, все.
10714880	10717780	Все остальное как бы это уже такая аналитическая обстройка,
10717880	10721780	как бы она может там существовать по сути как бы самостоятельно, вот.
10721880	10725780	Это мега удобно, работа с финансами, как бы.
10725780	10729680	Поэтому они и победили как бы сейчас, пока что, вот.
10729780	10736680	А так-то как бы среди тем, которые там, я считаю, как бы крайне перспективными,
10736780	10741680	это вообще как бы создание DAO, то есть создание как бы на смарт-контрактах
10741780	10746680	таких организаций, ну, по сути, смарт-контракты, управляющие конкретными бизнесами, вот.
10746780	10750680	Потому что у каждого бизнеса есть своя собственная там специфика, там, DAO для,
10750780	10755680	там, не знаю, для доставки дронами, как бы, DAO для, там, не знаю,
10755780	10760680	аудита кода, DAO для выполнения, там, не знаю, там, заказов, не знаю, там,
10760780	10763680	подписки на услуги, там, фитнес-тренера, как бы.
10763780	10765680	Ну, то есть неважно, у них у всех есть свои нюансы.
10765780	10770680	Где-то там надо деньги списывать вестингом, где-то нужны какие-то, там,
10770780	10774680	экспертные сообщества, которые голосуют, как бы, там, за что-то и так далее.
10774780	10778680	То есть здесь фантазия может как угодно, как бы, работать.
10778780	10784680	И, как бы, DAO тема такая, как бы, очень интересная, организация бизнесов на блокчейне.
10784680	10788580	Еще тема – это вот эти self-serving identity, verified credentials,
10788680	10793580	то есть когда у нас эфир используется просто как публичная база данных,
10793680	10798580	в которой можно хранить публичные ключи, адреса, как бы, и вот, ну, адреса,
10798680	10802580	которые, по сути, есть как публичные ключи, и доказывать, что ты, там, находишься
10802680	10807580	в каком-то там реестре, имеешь какой-то документ, имеешь какой-то пропуск, билет на мероприятие,
10807680	10813580	там, или еще что-то. Тоже делается очень красиво, как бы, на контрактах, минималистично, как бы,
10813580	10820480	и закончено, вот. Ну, NFT, как бы, это сами, как бы, разберетесь, там, не знаю, там, игры,
10820580	10824480	представленные NFT, там, это тоже инфы, как бы, очень много.
10824580	10832480	Вот, в общем, есть здесь, что поделать, вот, думайте. Вот, на сегодня, наверное, все
10832580	10839480	в качестве post-reader к этой лекции. Ну, значит, что, как бы, важно почитать?
10839580	10843480	Ethereum Official Docs – это, по сути,
10843580	10847480	вообще, как бы, просто рекомендую, у них хорошая очень документация.
10847580	10853480	Есть очень хорошая статья, типа, что происходит, когда вы отправляете один DAI.
10853580	10858480	DAI – это токен такой, как бы, ERC-20, там, одного проекта, как бы, крайне популярный,
10858580	10863480	который к доллару привязан. Вот, вот там, прям, подробно, вместе со ссылками на,
10863580	10872480	прям, вместе со ссылками на исходный код ноды, описывается все, вообще, что происходит
10872480	10878380	в момент отправки транзакции. И как она готовится, и что она делает, как бы, на ноде,
10878480	10883380	и там, трейсы всяких, как бы, транзакций, и как она обрабатывается, как газ обрабатывается,
10883480	10888380	как смарт-контракт исполняется. То есть, это такая чтива на, прям, на несколько часов.
10888480	10892380	Но, если прочтете, как бы, то предыдущая лекция по эфиру, как бы, она, в общем-то,
10892480	10897380	вам тоже не особо будет нужна. Ну, либо, прям, супер дополнит, вообще, полностью
10897480	10902380	понимание того, как эта штука функционирует. Еще раз напоминаю, что другие блокчейны,
10902480	10907380	они не сильно отличаются, на самом деле. Ну, то есть, архитектурно не сильно.
10907480	10912380	У всех одни и те же требования. У всех БФТ, у всех детерминизм, у всех газ.
10912480	10918380	У всех, как бы, execution restriction. Все похожим образом решают.
10918480	10925380	Еще одна ссылка, вот здесь вот, это про то, как вычисляется газ динамически.
10925480	10930380	То есть, здесь довольно, там, много, вроде бы, как кажется, что это сложно,
10930480	10932380	на самом деле, как врубитесь, там, не знаю, в первый, второй этап,
10932480	10936380	пункт, а остальные все очень легко, как бы, прочитать. По сути, это описание того,
10936480	10941380	как высчитывается, сколько вы должны заплатить, если вы в память записываете
10941480	10947380	x байт какой-то информации. Сколько это будет стоить, потому что здесь, там,
10947480	10952380	нулевые байты стоят дешевле, ненулевые байты стоят дороже. Все это выравнивается
10952480	10957380	слотами по 32 байта, как бы, здесь это, вот это все описано. Это тоже, как бы,
10957480	10962380	можно, там, почитать, как бы, для общего развития. Но, вот, как бы, я,
10962380	10969280	рекомендую крайне вот эту вот статью, прям она очень классная. Вот, в принципе,
10969380	10973280	все. В следующий раз все уже поедем, там, по солидите, уже будет смотреть
10973380	10977280	всякие контракты, паттерны, как бы, подразумевается, что, как работает эфир,
10977380	10979280	вы, в общем-то, знаете.
10979380	10982280	А пример кода с тестами пришлете?
10982380	10986280	Имейте в виду вот этот хардхед, да?
10986380	10987280	Да.
10987380	10992280	А, да-да-да-да, закинул. Да, хорошо. Там, пингонетики,
10992380	10997280	ну, это открытая репа. Все тогда. Ладно, тогда мы сегодня завершаем.
10997380	10999280	Всем хорошего дня.
10999380	11001280	До свидания.
11001380	11003280	До свидания.
11003380	11005280	До свидания.
