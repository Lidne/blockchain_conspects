WEBVTT

00:00.000 --> 00:12.960
всем привет начинаем лекцию сегодня можно нашу самую первую лекцию немножко как бы почему эта

00:12.960 --> 00:19.200
лекция такая в общем то это было обсуждение со студентами то есть прошлый раз мы проходили по

00:19.200 --> 00:26.080
программе проходили там сначала криптографию пиринговой сети там не знаю консенсус и так

00:26.080 --> 00:32.280
далее и так далее и только потом соответственно уже на всем на всей этой базе как бы врывались

00:32.280 --> 00:39.040
там смарт-контракты вот но и оказывалось так что в конце семестра ну то есть самый такой как бы

00:39.040 --> 00:45.840
важный код как бы студенты щупали в конце семестра только уже уже когда уже там сессии на носу вот и

00:45.840 --> 00:52.420
поэтому было решено сначала сделать пару лекций вы такие как бы входные мы прям верхний уровень

00:52.420 --> 00:56.020
его пробежимся как бы что это такое уже посмотрим

00:56.080 --> 01:01.840
на код смарт-контрактов как бы научимся их там запускать а потом уже в течение всего курса

01:01.840 --> 01:12.600
будем все глубже и глубже погружаться вот то есть там не знаю верхний уровень обсудим верхний уровень

01:12.600 --> 01:18.460
обсудим там например там не знаю криптографию потом на лекции и более глубоко рассмотрим вот

01:18.460 --> 01:24.400
ну и то же самое касается там не знаю консенсусов различных там в общем

01:26.080 --> 01:32.980
ну что всего поехали еще это за я немножко рассказал на входной лекции как выглядит

01:32.980 --> 01:40.480
разработка здесь а теперь собственно что собой представляют именно публичные блокчейна вот на

01:40.480 --> 01:48.480
каких собственно основных примитивах они строятся значит такое самое простое объяснение это такое

01:48.480 --> 01:53.500
если вы хотите как бы человеку кому-то объяснить как бы может сказать типа ты торрентами пользуешься

01:56.080 --> 02:01.660
может поrie там понимать какой будет бог чей у нас есть какой-то там пользователь не знаю там вася

02:01.660 --> 02:09.580
который отправляет транзакцию гуда там в неизвестно кому как бы то есть отправляет первым попавшимися

02:09.580 --> 02:16.400
компьютеру который следует протоколу чейна который будет делать как бы то что и этот

02:16.400 --> 02:21.520
компьютер рассказывает с остальным компьютером про транзакцию пользователя а потом не знаю

02:21.520 --> 02:25.360
там может там это деньги в этой транзакции лежат может быть и нет

02:26.080 --> 02:31.320
И вдобавок еще получает информацию о соседях других компьютеров,

02:31.440 --> 02:34.340
то есть они меняются постоянно, информация о конфигурации сети,

02:35.060 --> 02:40.620
кто-то включается, кто-то выключается, часть этой сети можно отрубить,

02:40.700 --> 02:43.800
но она продолжит все равно распространять информацию,

02:43.900 --> 02:48.600
потому что по дефолту, то есть все вот эти, мы их будем называть блокчейн-ноды,

02:49.500 --> 02:53.260
они по дефолту обмениваются друг с другом всей информацией,

02:53.260 --> 02:57.300
которая соответствует формату, то есть пришла, не знаю, транзакция,

02:58.100 --> 02:59.560
она это распространяет.

02:59.700 --> 03:03.860
Здесь ничего сложного особо нет, здесь обычный JSON, RPC,

03:04.200 --> 03:07.880
если кто занимался веб-программированием, интерфейс,

03:08.340 --> 03:12.580
просто в JSON делает какой-то метод send transaction,

03:12.820 --> 03:15.900
отправляется как бы там в пейтабайтики,

03:16.520 --> 03:19.240
и дальше нода начинает про эту транзакцию рассказывать всем остальным

03:19.240 --> 03:21.560
и получать из сети блоки.

03:22.400 --> 03:23.040
Вот.

03:23.260 --> 03:29.700
Значит, в чем фишка вот этого, ну вот всех вот этих вот блокчейн-технологий

03:29.700 --> 03:33.040
от существующих решений?

03:33.620 --> 03:35.360
То есть здесь никакого лучшего места здесь нету,

03:35.420 --> 03:39.080
это блокчейн, это просто по сути как бы такой отдельный вид софта,

03:39.520 --> 03:44.420
немножко как бы, который обладает одним очень-очень важным свойством.

03:44.560 --> 03:48.200
Смотрите, если у нас есть какое-нибудь там банковское приложение,

03:48.200 --> 03:52.000
там какое-нибудь, не знаю, ну, проще всего вообще показывать на финансах,

03:52.120 --> 03:53.200
и это, кстати, один из примеров.

03:53.260 --> 03:57.160
Почему как бы крипта – это именно типа крипта, именно деньги?

03:57.800 --> 04:00.900
Да просто потому, что как бы деньги – это всего лишь на всю информацию.

04:01.320 --> 04:01.520
Вот.

04:01.640 --> 04:02.260
Вам не...

04:04.860 --> 04:10.480
О, господи, я не транслирую экран.

04:10.800 --> 04:11.700
Все, понял.

04:12.420 --> 04:15.120
Так, надо было меня оттянуть.

04:15.500 --> 04:16.700
Так, давайте вот так вот.

04:17.040 --> 04:18.700
Все, вот теперь я транслирую экран.

04:20.700 --> 04:21.280
Так, да.

04:21.280 --> 04:23.220
Я, собственно, да, рисую здесь.

04:23.260 --> 04:24.260
Такую штуку.

04:24.900 --> 04:27.220
У нас Вася, да, отправляет транзакцию в какую-то сеть,

04:27.300 --> 04:30.760
и вот здесь вот как бы ноды меняются друг с другом информацией.

04:32.380 --> 04:36.560
Значит, если мы работаем с каким-нибудь банк-клиентом,

04:36.680 --> 04:38.600
не знаю, там, со Сбером, как бы Тиньковым,

04:38.640 --> 04:41.220
мы говорим, там, отправь там 100 долларов,

04:41.640 --> 04:43.040
там, к тому-то, к тому-то, как бы,

04:43.460 --> 04:46.380
и в банке есть табличка,

04:46.380 --> 04:48.800
где написано, что у Васи было там 200 долларов,

04:48.960 --> 04:50.820
как бы, и стало у него как бы 100 долларов,

04:50.960 --> 04:53.000
а у Пети как бы стало плюс 100 долларов,

04:53.000 --> 04:53.780
как на балансе.

04:53.840 --> 04:55.440
То есть, по сути,

04:56.380 --> 04:59.180
финансовые приложения, они оперируют только информацией,

04:59.240 --> 05:00.940
поэтому они такие довольно простые.

05:01.520 --> 05:03.460
Ну, то есть, с точки зрения надежности,

05:03.540 --> 05:05.820
как бы, там, и требования к ним.

05:06.740 --> 05:07.080
Вот.

05:08.120 --> 05:12.820
И, предположим, этот банк расположен на нескольких континентах,

05:12.820 --> 05:17.300
и, как бы, вот это вот расстояние между компьютерами,

05:17.440 --> 05:19.700
между этими базами, оно достаточно существенное.

05:19.920 --> 05:22.040
А вам нужно поддерживать консистентную базу.

05:22.160 --> 05:22.980
У вас и здесь у Васи,

05:23.000 --> 05:24.440
должно стать 100 долларов,

05:24.500 --> 05:26.280
а у Пети, как бы, там, соответственно,

05:26.320 --> 05:27.700
добавится 100 долларов на баланс.

05:27.800 --> 05:31.460
И здесь вам надо как-то распространить эту информацию.

05:31.520 --> 05:32.800
Здесь достаточно целостно.

05:33.040 --> 05:37.000
И здесь есть прям, как бы, ключевая проблема безопасности.

05:37.740 --> 05:39.680
Она в блокчейнах называется double spend,

05:41.100 --> 05:42.080
ну, двойная трата.

05:42.260 --> 05:43.980
Но относится она, конечно же,

05:44.120 --> 05:45.260
ну, не только к блокчейну,

05:45.300 --> 05:47.180
а вообще к распределенным системам.

05:47.720 --> 05:49.120
То есть, если Вася вот здесь, вот, как бы,

05:49.180 --> 05:50.600
потратит свои 100 долларов,

05:50.600 --> 05:52.960
и одновременно вот здесь,

05:53.000 --> 05:54.500
вот, потратит свои 100 долларов,

05:54.580 --> 05:56.840
а у него на балансе всего, как бы, 100 долларов,

05:57.980 --> 05:59.500
то, соответственно, возникнет конфликт.

05:59.580 --> 06:00.960
Надо будет что-то делать там.

06:01.000 --> 06:02.280
Соответственно, надо будет выяснить,

06:02.320 --> 06:04.200
какая здесь транзакция была первая.

06:04.280 --> 06:06.520
Здесь они могли, как бы, пока они там встретятся,

06:06.540 --> 06:07.500
эти два сервера,

06:08.000 --> 06:10.220
может, там, не знаю, интернет пропал в этот момент.

06:10.240 --> 06:13.800
То есть проблем довольно много, как бы, существует.

06:14.180 --> 06:17.280
И для этого в базах данных существуют механизмы,

06:17.320 --> 06:18.920
которые называются репликация.

06:19.760 --> 06:22.260
То есть реплики,

06:22.260 --> 06:24.840
а вот эти вот, как бы, компьютеры,

06:24.880 --> 06:27.020
которые принимают транзакции от пользователя,

06:27.060 --> 06:29.440
причем, как бы, именно пишущие транзакции.

06:29.480 --> 06:33.700
Пишущие – это инсерты, апдейты, делиты.

06:34.160 --> 06:37.380
Кстати, базы данных, наверное, как бы, у многих, да, были, как бы, там,

06:38.480 --> 06:42.140
более-менее, как бы, может быть, там, знаете, как бы, там, SQL.

06:42.180 --> 06:49.100
В общем, все транзакции, которые записывают информацию в базу данных,

06:49.140 --> 06:52.220
как бы, пишущие, там, вставка, апдейт и удаление,

06:52.240 --> 06:54.080
информации, как бы, в базе данных,

06:54.120 --> 06:56.600
они попадают в так называемые мастер-реплики.

06:56.640 --> 06:59.260
То есть мастер – тот, кто пишет базу данных.

06:59.300 --> 07:04.120
Потому что у сервисов может быть, там, не знаю, там, тысячи слейв-реплик,

07:04.140 --> 07:06.660
то есть которые только отдают информацию только на чтение,

07:06.680 --> 07:08.740
то есть они не записывают.

07:08.760 --> 07:12.420
И вот эти вот алгоритмы называются алгоритмы репликации.

07:12.440 --> 07:16.820
И в распределенных базах данных, как бы, в таких больших, там,

07:16.840 --> 07:20.120
соответственно, они есть, если вам интересно про эти алгоритмы почитать,

07:20.140 --> 07:22.060
это алгоритм известный Raft.

07:22.060 --> 07:24.060
И второй, как бы, Paxos.

07:24.080 --> 07:28.260
То есть он, ну, говорит о том, что, там, Noda, там, пошла сюда,

07:28.280 --> 07:31.020
предложила, там, закоммитить какой-то блок транзакций,

07:31.040 --> 07:34.880
это ей говорит «да, я согласна», значит, это все, там, за это голосуются,

07:34.900 --> 07:37.540
собираются, там, голоса с других, как бы, реплик.

07:37.560 --> 07:41.900
И там, если какой-то порог перевален, то, соответственно,

07:41.920 --> 07:43.560
транзакция считается закоммитченной.

07:43.580 --> 07:46.880
И есть, там, формальные доказательства, что, как бы, это надежно.

07:46.900 --> 07:51.700
Вот. Но у всех этих алгоритмов,

07:51.700 --> 07:57.560
которые используются в банках, они устойчивы только к падениям вот этих вот нод.

07:57.580 --> 08:01.720
То есть к тому, что, там, где-то вырубится интернет или какой-то мусор будет отдан

08:01.740 --> 08:06.640
в данном случае, они не защищены от, так называемого, византийского поведения.

08:06.660 --> 08:12.640
Византин, там, ключевое слово «византин», Fault Tolerance.

08:13.860 --> 08:16.840
То есть устойчивость к византийскому поведению.

08:16.860 --> 08:20.760
У них этот парадигма называется Crush Fault Tolerance.

08:20.780 --> 08:21.680
То есть, если что, они не могут, они не могут, они не могут, они не могут, они не могут, они не могут, они не могут.

08:21.680 --> 08:26.380
Если что-то упадет и сломается, как бы, то, как бы, систему сдюжат, как бы, да.

08:26.400 --> 08:32.020
Там, если осталось достаточное количество серверов, то потом DevOps включит новую реплику,

08:32.040 --> 08:37.180
и она автоматически других догонится, как бы, и заполнится валидными данными.

08:37.200 --> 08:40.860
Но если в этой сети появляется византийский участник,

08:40.880 --> 08:46.940
а византийский имеется в виду такой, как бы, предатель, то есть, который намеренно действует зло,

08:46.960 --> 08:51.680
то есть он не просто, как бы, выключает компьютер, хотя может, конечно, и просто выключить,

08:51.700 --> 08:54.520
а он начинает дезинформировать другие ноды.

08:54.540 --> 08:57.880
То есть он, у него захвачен вот этот компьютер, как бы, и он говорит, там,

08:57.900 --> 09:02.400
Вася потратил здесь 30 долларов, этому, говорит, потратил 50 долларов.

09:02.420 --> 09:06.360
То есть он вносит, как бы, хаос в работу, и система перестает работать.

09:06.380 --> 09:10.540
Вот эта вот консистентность вот этих баз данных, как бы, она нарушается.

09:10.560 --> 09:15.460
То есть они могут, ну, прийти, как бы, в состояние, что там на разных репликах разные данные.

09:15.480 --> 09:17.080
Это можно эксплуатить.

09:17.100 --> 09:21.320
Вот блокчейны, они являются, ну, то есть, как бы, истинным, там,

09:21.320 --> 09:24.080
настоящим, они являются Byzantine Fault Tolerance.

09:24.100 --> 09:29.700
То есть они устойчивы к тому, что в них находятся, прям, намеренно злые участники,

09:29.720 --> 09:34.320
которые прям хотят, как бы, атаковать сеть, которые хотят, как бы, всех, там, завалить, как бы,

09:34.340 --> 09:39.420
я не знаю, там, найти какой-то баг и заставить всю сеть остановиться.

09:39.440 --> 09:45.760
Вот, поэтому, как бы, в блокчейнах требования к безопасности вот этих протоколов, они сильно выше.

09:45.780 --> 09:50.940
Вот, ну, и эту безопасность обеспечивают они за счет экономики.

09:50.940 --> 09:56.440
Там есть часть, как бы, именно, которая, по сути, как бы, является экономической безопасностью, вот.

09:56.460 --> 10:00.100
То есть, там, будешь действовать, как бы, плохо, будешь, там, что-то не то делать,

10:00.120 --> 10:05.180
будешь либо терять ресурсы вычислительные, как бы, если, там, нечестный майнер,

10:05.200 --> 10:07.540
либо тебя будут наказывать, там, деньгами и так далее.

10:07.560 --> 10:09.740
Обо всем этом мы очень подробно с вами поговорим.

10:09.760 --> 10:13.440
То есть вот это вот самое, наверное, важное, как бы, свойство блокчейнов.

10:13.460 --> 10:19.380
BFT, то есть, как бы, Byzantine Fault Tolerance, устойчивость к византийскому поведению.

10:19.400 --> 10:20.760
При этом надо не забывать, что...

10:20.760 --> 10:28.760
Требования, вот, к этому византийскому поведению, они, у них есть специальные численные параметры,

10:28.780 --> 10:33.880
то есть соглашения, то есть, например, если взять современные алгоритмы консенсуса,

10:33.900 --> 10:38.440
которые, там, типа, не майнинг, а такие детерминированные, то есть,

10:38.460 --> 10:45.040
то там есть прям жесткое требование, что больше двух третей участников, вот этих, вот, как бы, нод,

10:45.060 --> 10:49.820
которые протокол, которые производят блоки, которые обрабатывают транзакции,

10:49.820 --> 10:54.460
они являются честными, то есть, честными имеется в виду, просто следуют протоколу,

10:54.480 --> 11:01.480
то есть, скачали код с гитхаба и, как бы, в ключевых местах ничего не меняли, как бы, запустили ноду,

11:01.500 --> 11:05.860
вот она работает, вот, в точности, как бы, так, как предписано протоколом.

11:06.440 --> 11:12.500
Вот в случае, если вот это требование выполняется, то есть, если больше двух третей, как бы, являются честными,

11:13.300 --> 11:19.560
то есть, по сути, формальное доказательство того, что сам блокчейн является византийско устойчивым.

11:19.820 --> 11:27.000
Вот это вот оставшиеся меньше одной трети, как бы, участников, они могут быть сколь угодно, как бы, злыми,

11:27.560 --> 11:33.280
там, любые действия предпринимать, как бы, пытаться, там, не знаю, там, что угодно сетью сделать, как бы, у них ничего не получится.

11:33.760 --> 11:38.840
А вот если кто-то захватил больше двух третей, как бы, тогда, да, он, там, контролирует эту сеть.

11:39.700 --> 11:46.720
Вот, если, как бы, злоумышленники захватили одну треть, прям ровно, если у вас, там, 99 нод, как бы, у злоумышленников есть 33,

11:47.420 --> 11:49.680
то они в современных системах, они могут...

11:49.820 --> 11:56.320
остановить блокчейн, то есть, они не могут, как бы, подсунуть, там, неверные данные, не могут, там, изменить, соответственно, там, код,

11:56.400 --> 12:02.740
но они могут, по сути, просто остановить процессинг, вот, ну, просто вырубив свою одну треть, как бы, выключив ее,

12:03.340 --> 12:05.100
и сеть, как бы, дальше не пойдет.

12:06.380 --> 12:12.840
Вот, в общем, про все это поговорим, то есть, нам сегодня с вами, как бы, не важно, как они вот здесь вот договорились,

12:13.380 --> 12:19.560
то есть, у них есть вот эти протоколы консенсуса, мы их будем рассматривать, там, proof of work, proof of stake, там,

12:19.820 --> 12:28.840
и так далее, но нам для... с вами, как бы, важнее гораздо сегодня, как бы, процесс распространения транзакции в блокчейне,

12:28.840 --> 12:32.600
то есть, и вообще для чего, ну, и как все внутри происходит.

12:33.940 --> 12:42.680
Значит, сами блокчейны, их основная задача, вот у нас есть, там, не знаю, там, куча компьютеров, которые согласились следовать протоколу,

12:42.840 --> 12:48.780
вы скачали с гитхаба, там, не знаю, ноду блокчейн, запустили ее, и вы, типа, согласились, типа,

12:49.820 --> 12:55.900
сети, там, себя, там, честно вести, как бы, будут там, будут там что-то делать, значит, соответственно,

12:56.540 --> 12:58.600
ради чего они все это делают.

12:59.880 --> 13:05.460
На самом деле, во всех, все, биткоин, эфир, там, не знаю, там, полк и дот,

13:05.860 --> 13:13.120
для нас с вами, как пользователей, мы заходим с вас, там, не знаю, там, на сайт на какой-нибудь крипту,

13:13.120 --> 13:17.420
там, спрашиваем, там, какие там балансы, что там, какие там, не знаю, проценты, какие есть проекты,

13:17.860 --> 13:19.780
регистрируем что-то в смарт-контрактах.

13:20.360 --> 13:24.340
Мы общаемся с какой-то из вот этих нод, и откуда она берет информацию?

13:24.440 --> 13:31.500
У нее есть на борту своя собственная база данных, вот, мы ее будем называть state database,

13:32.540 --> 13:38.380
вот, state db, как бы, или даже просто там state, как бы, можно сказать, как бы, состояние блокчейна.

13:38.960 --> 13:45.980
И вот эта вот база в блокчейнах, она ровно одна и та же с точностью до последнего бита,

13:45.980 --> 13:49.620
то есть там нету, ну, если это рассматривать как табличку,

13:50.380 --> 13:54.980
там, не знаю, там, у Васи, там, не знаю, 100 долларов, там, у Пети, там, 200 долларов,

13:55.120 --> 13:57.940
ну, там, понятно, что там куча, может, разной инфы, как бы, хранится,

13:58.580 --> 14:05.840
но вот эта вот база, она одна и только одна на всех абсолютных компьютерах сети,

14:05.960 --> 14:09.480
которые следуют протоколу, вот, которые, как бы, честные, вот эти вот,

14:09.700 --> 14:13.500
то есть если они все правильно сделали, как бы, с самого начала до самого конца,

14:13.500 --> 14:18.440
у них будет ровно одна и та же версия вот этой базы, причем без лишних ключей,

14:18.460 --> 14:19.500
то есть ничего.

14:19.820 --> 14:25.700
Не часть базы будет верна, там, там, не, там, не с точностью, там, до каких-то копеек,

14:25.820 --> 14:31.240
а вот просто чисто прямо в бинарном виде, то есть вот само битовое, как бы, представление,

14:31.340 --> 14:35.420
если взять там все ключи значения, как бы, разложить их в один файл,

14:35.800 --> 14:36.840
то он будет один и тот же.

14:37.840 --> 14:46.400
И все это, вся вот эта вот база, как бы, она одна и та же при условии наличия на ноде,

14:46.400 --> 14:49.060
вот на этой, одного и того же набора блоков.

14:49.820 --> 14:53.120
И теперь уже переходим, как бы, к тому, как бы, что такое блоки.

14:55.400 --> 15:02.120
Значит, пользователи отправляют свои транзакции сюда, там, не знаю, в какую-то ноду,

15:02.440 --> 15:09.260
они там, как-то там, здесь распространяются по сети, и транзакция, ну, там, не знаю, там, Вася,

15:10.120 --> 15:17.460
с адреса Васи на адрес Пети, как бы, переводит 10 эфира, подписывает это все электронной подписью,

15:17.460 --> 15:19.220
сейчас про нее, как бы, тоже поговорим.

15:19.820 --> 15:21.060
Отправляет куда-то в сеть.

15:21.760 --> 15:23.380
Значит, что происходит в сети?

15:24.320 --> 15:30.680
Эта транзакция распространяется по куче других компьютеров, пока не добирается до компьютера,

15:30.760 --> 15:32.740
который будет производить следующий блок.

15:33.680 --> 15:39.900
К этому моменту на всех этих машинах уже, как бы, какое-то количество блоков есть, там, не знаю, там, есть, там,

15:40.320 --> 15:42.660
все, там, до какого-то этапа, как бы, дошли.

15:43.420 --> 15:46.860
Блоки точно так же по вот этой пиринговой сети распространяются,

15:46.860 --> 15:49.060
то есть, как только какая-то нода видит блок,

15:49.820 --> 15:55.160
она его проверяет, говорит, что он валит, ну, и если он хороший, как бы, то она его передает всем остальным.

15:55.720 --> 15:59.060
Она говорит, я увидела, как бы, новый блок, вот этот, ну, вот здесь вот по два,

15:59.320 --> 16:04.480
там, не знаю, там, 47, 48 блок номера, а вот у этой появился 49.

16:04.480 --> 16:09.420
Она говорит, о, ребята, у меня есть 49, как бы, вот, забирайте, как бы, он хороший, я его проверил.

16:10.420 --> 16:19.720
Вот. Соответственно, если блок, как бы, корявый, то нода, конечно, его просто не пересылает, как бы, поэтому, по сути, как бы, ну, то есть, если кто-то произвел,

16:19.720 --> 16:27.020
какой-то, там, поддельный, как бы, блок, ну, такой, или блок с ошибкой, или блок, который, там, не следует протоколу, короче.

16:27.020 --> 16:38.320
В общем, хотя бы, там, на шаг отступил, как бы, от процедуры, вот, этой проверки блока, то, как бы, его софт, как бы, он даже передавать не будет дальше этот блок, то есть, он так и будет, как бы, там, сидеть.

16:38.320 --> 16:49.020
Ну, он, конечно, может насильно его передать другим нодам, но, как бы, он его запихал в другую ноду, она тоже его проверила, она честно, она говорит, а я дальше не буду распространять, вот.

16:49.720 --> 17:00.660
Соответственно, в блоках находятся пачки транзакций от пользователей, тоже это все, прям, отдельная, большая, как бы, песня, как они процессятся, значит, что там происходит.

17:01.820 --> 17:13.280
И вот эти транзакции, когда нода получает хороший валидный блок, они накатываются на вот эту state database последовательно, причем на каждой из вот этих вот машин.

17:13.280 --> 17:19.120
То есть, любой компьютер в сети, как бы, он скачал блок, берет оттуда транзакции, конечно, проверяет их.

17:19.120 --> 17:21.020
И накатывает на эту базу данных.

17:21.140 --> 17:30.020
Вот здесь где-нибудь наша вот эта транзакция, Вася, который переводит Петя, 10 эфира, и у Васи, соответственно, списывается 10 эфира, а Пете добавляется 10 эфира.

17:30.560 --> 17:39.520
То есть, это одна транзакция, потом вторая, потом третья, где-то здесь, там, добавляются еще, там, какие-то, там, операции, там, в балансе с данными и так далее.

17:40.040 --> 17:43.180
То есть, все это вот так вот, как бы, накатывается на базу данных.

17:44.640 --> 17:49.080
Далее, как бы, в блокчейнах есть процедура отката блока, и это не...

17:49.120 --> 17:52.980
Ну, не что-то такое прям страшное, как бы, это совершенно штатная процедура.

17:52.980 --> 17:58.200
Потому что все компьютеры в этой сети видят друг друга в разное время.

17:59.040 --> 18:04.680
И вот у нас один произвел блок, номер там, ну, давайте, 50-й блок он произвел.

18:07.160 --> 18:17.620
Давайте я, собственно, как в обычных там лекциях, да, как бы, я, в общем, говорю, что пиринговую сеть с транзакцией можно рассматривать просто как доску объявлений.

18:18.240 --> 18:18.980
Публичную совершенно.

18:19.120 --> 18:22.540
То есть, везде, как бы, все видят абсолютно, как бы, все транзакции.

18:23.400 --> 18:29.180
Вот. Ну, через какое-то время, понятно, разные в разное время, как бы, видят разных версий, но, тем не менее, как бы, все.

18:30.420 --> 18:35.560
Транзакция, как бы, она улетела в P2P, она там полностью доступна, как бы, кто угодно ее может скачать.

18:36.020 --> 18:38.320
И точно такой же у нас блок с пул.

18:38.920 --> 18:46.200
То есть, такой же, как бы, пиринговый, по сути, как бы, пул, в котором те, кто хотят произвести блок, они его публикуют.

18:46.200 --> 18:48.200
Вот мы дошли там до блока...

18:49.120 --> 18:49.880
Блок номер 49.

18:50.280 --> 18:55.440
Вот наша, как бы, транзакция, вот эта Васина, как бы, она, вроде бы, должна попасть в блок номер 49.

18:56.120 --> 19:06.660
У нас есть, появился майнер, который пошел в транзакцион-пул, набрал себе в нем, там, сколько-то транзакций, не знаю, там, тысячу, две, как бы, как протоколом определено.

19:07.160 --> 19:11.340
Наберет себе 10 тысяч транзакций, как бы, все остальные, как бы, его блок выкинут.

19:11.580 --> 19:19.100
Скажет, типа, чувак, по правилам, по спецификации, по коду, как бы, в блоке должно быть не больше, там, двух тысяч транзакций.

19:19.120 --> 19:22.320
Как бы, так что, твой блок невалидный, как бы, сам дурак.

19:23.000 --> 19:26.940
Вот, поэтому он берет, там, не знаю, там, две тысячи транзакций и создает блок номер 50.

19:28.340 --> 19:30.800
Там все эти транзакции перечислены, там, и так далее.

19:32.980 --> 19:46.660
Собственно, само слово, как бы, блокчейн, как бы, цепочка блоков, она построена на том, что хэш предыдущего блока включается в хэш следующего блока.

19:46.660 --> 19:48.840
То есть, например, в 50-м блоке.

19:49.120 --> 19:52.180
Вот здесь, вот, как бы, там, давайте его покрупнее нарисуем.

19:53.140 --> 19:53.500
Вот.

19:54.120 --> 19:56.280
Здесь находится хэш 49-го блока.

19:56.400 --> 19:59.440
А у 49-го, как бы, 48-го, 47-го.

20:00.000 --> 20:04.620
Из природы хэширования, сейчас тоже про нее даже чуть-чуть поговорим.

20:05.460 --> 20:11.720
Понятно, что, испортив хотя бы один бит вот в этом вот блоке, мы испортим очень сильный его хэш.

20:12.080 --> 20:15.620
Соответственно, испортили бит и в этом блоке, испортили бит и в этом блоке.

20:15.620 --> 20:18.520
И так вот, как бы, по цепочке вся эта штука прошла.

20:19.120 --> 20:24.500
А валидировать блокчейн мы можем, начиная с самого первого блока, с нулевого.

20:24.620 --> 20:27.660
У него есть название, специальное, Genesis называется.

20:29.320 --> 20:29.840
Genesis.

20:30.780 --> 20:32.080
Вот, нулевой блок.

20:32.620 --> 20:41.900
И, начиная с него, можно перепроиграть весь блокчейн, вот, прямо все транзакции, начиная, как бы, с первого блока и вот до текущего.

20:42.500 --> 20:49.000
Когда вы ставите, как бы, ноду эфира или ноду биткоина, она, ну, понятно, там.

20:49.120 --> 21:11.100
Есть куча всяких технических ухищрений, как ускорить этот процесс, но, как бы, в теории, самый, как бы, такой, самый секьюрный и надежный из этих процессов, это прямо берем первый блок, накатываем все транзакции из него, берем первый блок, накатываем все транзакции, второй, третий, миллионный, миллиардный блок и, наконец, доходим до того, который, вот, прямо вот сейчас, как бы, создается.

21:11.100 --> 21:19.020
И у нас консистентная StateDB, точно такая же, как у остальных, как бы, все остальные, как бы, видят в этой StateDB ровно то же самое, что и вы.

21:19.120 --> 21:25.920
Вот, ну и проверяется, да, вот это наследование блоков проверяется за счет включения хэша предыдущего блока.

21:26.900 --> 21:49.100
Вот, значит, вот у нас, как бы, вот этот вот, я его назвал M-Miner, но уже можете отучаться, как бы, от этого слова, вот, уже это так не так уж особо, как бы, популярный эфир, буквально несколько дней было огромное событие в эфире, прям очень серьезное, как бы, это он перешел на Proof of Stake, поэтому никого майнинга не было.

21:49.120 --> 21:58.880
И теперь, как бы, в эфире на видеокартах, ну, радостная новость, как бы, да, видеокарты теперь сильно подешевеют, вот, потому что майнить эфир уже будет не нужно.

22:01.440 --> 22:18.900
Называются вот эти вот ноды, которые производят блоки, там, не знаю, валидаторы, Validators, там, в эфире во многих сетях, как бы, называются валидаторы, как бы, ну, и еще самое, наверное, точное название было Block Producers, то есть, в одной из сетей, как бы, это было.

22:18.900 --> 22:46.760
И, по мне, самое точное название, то есть, это ноды, которые хотят произвести блок в блокчейнах, так как это большая публичная пилинговая система, вы можете, кто угодно может произвести блок, там, ну, при наличии, там, у него определенных ресурсов, если это майнинг, у него должна быть, там, огромная вышлитная мощность, если это Proof of Stake, у него должны быть, там, замороженные, там, деньги на балансе, там, и так далее, и так далее.

22:47.360 --> 22:47.960
Вот.

22:48.900 --> 22:51.880
Производит вот этот наш майнер 50-й блок.

22:51.880 --> 23:14.880
В этот момент второй майнер, глядя тоже на блокчейн вот в этом состоянии, то есть, он тоже докачал пока до 49-го, он тоже производит 50-й блок, он берет другие, как бы, транзакции, ему они, не знаю, больше понравились, и более того, он видит, как бы, этот транзакцион-пул со своего ракурса, то есть, он там, не знаю, в Китае, как бы, а первый майнер в Америке, они видят разные наборы транзакций.

23:15.560 --> 23:18.880
Он создал, короче говоря, свой собственный 50-й блок.

23:18.900 --> 23:27.840
И в блокчейне, ну, то есть, те, кто следует протоколу, еще раз повторяю, как бы, ноды, они качают этот блок тоже, номер 50-й.

23:28.320 --> 23:35.620
И в этот момент как раз начинает работать алгоритм консенсуса, который выбирает из этой цепочки одну и только одну истину.

23:36.680 --> 23:45.160
То есть, ну, в разных алгоритмах сделано по-разному, вот, но все вот эти блоки, они все сохраняются.

23:45.160 --> 23:48.880
То есть, ну, приходится за безопасность, как бы, да, так платить, как бы, блокчейн.

23:48.900 --> 23:53.800
И даже вот эти вот ошметки боковые сохраняют, тем не менее.

23:54.460 --> 23:55.300
Значит, почему?

23:56.780 --> 24:03.480
Представьте ситуацию, значит, сначала 50-й наш, как бы, ну, сначала первый майнер, как бы, создал блок номер 50.

24:04.340 --> 24:05.200
Сеть его приняла.

24:05.820 --> 24:08.680
Вот, в этом 50-м блоке была Васина транзакция.

24:09.220 --> 24:14.340
Вот она, как бы, Вася доволен, значит, он отправил там кому-то там 10 эфира или недоволен.

24:15.060 --> 24:15.420
Вот.

24:15.420 --> 24:18.740
А потом пришел второй майнер, и он Васину транзакцию не...

24:18.900 --> 24:19.220
Не видел.

24:19.960 --> 24:22.600
Он создал 50-й блок без этой транзакции.

24:23.260 --> 24:27.460
Но алгоритм консенсуса выбрал его блок как правильный.

24:28.620 --> 24:31.580
То есть, в этот момент происходит откат.

24:31.900 --> 24:36.780
То есть, если кто в базах данных, то там это называется rollback, откат транзакции.

24:37.240 --> 24:39.640
Там, не знаю, в смарт-контракте называется revert.

24:40.280 --> 24:44.620
Значит, все эффекты вот этого блока полностью удаляются.

24:44.620 --> 24:48.820
То есть, база данных откатывается к предыдущему состоянию, которое было.

24:48.900 --> 24:50.100
На 49-й блок.

24:50.200 --> 24:53.480
И накатывается, как бы, то, что было в 50-м.

24:54.020 --> 24:56.580
То есть, теперь в этом state db состояние новое.

24:57.520 --> 25:02.120
Понятно, что не все успели, не все увидели, как бы, вот этот вот 50-й блок.

25:02.580 --> 25:02.780
Вот.

25:02.880 --> 25:07.620
Но все равно при одном и том же наборе блоков, когда все скачают вот это вот все,

25:08.020 --> 25:12.300
у них все равно, как бы, будет вот этот вот state db в одном и только одном состоянии.

25:13.980 --> 25:17.800
Возможна ситуация, когда, значит, первый наш майнер не сдается,

25:18.900 --> 25:25.600
создает блок номер 51, указывая в качестве родителя, родительского блока, блок 50.

25:26.040 --> 25:27.640
Вот этот, кстати, блок называется uncle.

25:29.400 --> 25:32.720
Uncle blocks, как бы, они называются, как бы, то есть, дяди.

25:33.480 --> 25:35.120
Там, типа, братья-папы.

25:35.660 --> 25:36.100
Вот.

25:36.300 --> 25:37.060
Или там, мама.

25:38.360 --> 25:45.920
Соответственно, он продолжает, короче, майнить и, как бы, создает 51-й блок на основе 50-го блока.

25:46.320 --> 25:48.880
И консенсус может спокойно выбрать.

25:49.240 --> 25:54.400
Что вот теперь, когда появился 50-й блок, мне уже вот эта цепочка не нравится,

25:54.660 --> 25:56.400
а нравится вот эта цепочка.

25:56.900 --> 26:01.900
И тогда тоже вот здесь происходит откат, как бы, и накатываются транзакции вот из этой подцепочки.

26:02.800 --> 26:03.300
Вот.

26:03.400 --> 26:05.700
То есть, такая ситуация здесь тоже возможна.

26:05.800 --> 26:09.000
То есть, блокчейн на конце, он такой, как бы, разлохмаченный.

26:09.700 --> 26:10.200
Вот.

26:10.300 --> 26:15.400
И производители блоков, они соревнуются между собой, чей блок будет принят.

26:16.500 --> 26:16.800
Вот.

26:16.900 --> 26:18.300
Понятно, что там...

26:18.900 --> 26:27.060
В каком-то прошлом, может, не очень, как бы, далеком, уже, как бы, смысла, там, пытаться намайнить такую, как бы, здоровую цепочку.

26:27.760 --> 26:32.760
А это, может, и технически вычислительно невозможно, как бы, или там нереально, там, по другим причинам.

26:32.800 --> 26:34.600
Это мы с вами в консенсусах посмотрим.

26:35.320 --> 26:35.500
Вот.

26:35.540 --> 26:40.500
Но важно понимать, во-первых, что блокчейн, что блоки – это вот такая вот структура.

26:40.500 --> 26:47.940
Она правильно называется DAG – Direct Acyclic Graph, то есть направленный ациклический граф.

26:48.900 --> 27:01.040
У которого все связи направлены в одну сторону, поэтому он направленный, и нету кольцевых связей, то есть нету замкнутых конкурсов, поэтому он ациклический.

27:01.880 --> 27:02.160
Вот.

27:02.200 --> 27:05.800
Такой, как, не знаю, как канат, разлохмаченный, как бы, на конце.

27:05.800 --> 27:12.200
Ну, вот здесь есть, да, какие-то старые ответвления, как бы, там, может, там, где-то здесь, там, не знаю, какие-то старые, как бы, цепочки.

27:13.160 --> 27:13.560
Вот.

27:13.720 --> 27:17.520
Ну, вот такого вида, как бы, блокчейн собой представляет.

27:17.880 --> 27:18.800
То есть любой момент имеет...

27:18.900 --> 27:28.260
Как бы, какой-то набор блоков, вы всегда можете по нему пройти, и пройти по одной и только одной цепочке.

27:28.760 --> 27:32.900
Причем, опять же, что важно, никакие внешние данные здесь не работают.

27:33.780 --> 27:36.840
То есть никаких внешних сервисов, никто ничего не опрашивает.

27:36.960 --> 27:40.900
То есть все решения принимаются строго на тех данных, которые есть в блоках.

27:42.360 --> 27:45.080
То есть алгоритм по-другому не работает.

27:45.080 --> 27:48.260
То есть блокчейн опирается строго на то, что есть только в блокчейне.

27:48.360 --> 27:48.460
Все.

27:48.900 --> 27:51.080
И это с внешним миром никак не связано.

27:51.740 --> 27:56.340
Данные из внешнего мира, там, специальным искусственным способом, там, добавляются в блоки,

27:56.800 --> 28:02.020
но решения о консенсусе, о том, какой блок следующий, какие транзакции валидные, какие нет,

28:02.080 --> 28:08.960
как бы, принимаются только на основании протокола блокчейна и данных, которые есть в блоках.

28:10.100 --> 28:10.460
Вот.

28:10.460 --> 28:16.360
Соответственно, транзакции с этих блоков, как я сказал, как бы, накатываются на этот, как бы, state db,

28:16.940 --> 28:18.460
и в конце концов появляется...

28:18.900 --> 28:23.960
Кто-то, уж не важно, кто там, 50-ый блок, там, или вот этот 51-ый победил,

28:24.380 --> 28:33.340
в конце концов, 51-ый блок доезжает, таки, как бы, уже возвращается обратно из пилинговой сети в тот компьютер,

28:33.340 --> 28:36.440
к которому обращался Вася, когда отправлял твою транзакцию.

28:36.760 --> 28:43.960
Этот компьютер получает блок номер 51, вот, ну, предположим, вот здесь, в 51-ом блоке его транзакция была.

28:44.340 --> 28:48.480
Ну или там, мы в 50-ом договорились, как бы, вот здесь, что была транзакция.

28:48.900 --> 28:52.300
Ну, соответственно, победила вот эта вот цепочка, вот.

28:52.300 --> 28:58.900
И Вася, соответственно, обращается сюда и видит, так, все, 51-ый блок был накачан на state db,

28:59.340 --> 29:04.740
и он просто спрашивает баланс, как бы, у этой базы данных, как бы, и она ему говорит, Вася, у тебя теперь 90,

29:04.900 --> 29:09.600
а у Пети теперь, там, не знаю, 110, там, эфира, например.

29:10.340 --> 29:10.840
Вот.

29:11.340 --> 29:17.140
Это вот такая, как бы, общая схема процессинга транзакций в блокчейнах.

29:18.900 --> 29:29.760
Она стоит на трех таких китах криптографических, там, ну, вот, если, там, пример, короче говоря, там, транзакции,

29:31.040 --> 29:37.360
ну, это мы с вами еще, как бы, посмотрим, как бы, тут, наверное, интересно, как бы, там, индекс транзакции,

29:37.580 --> 29:46.720
то есть, кому она отправлена, вот, то, что есть хэш-блока, которому она принадлежит, как бы, от кого она отправлена, там, и так далее.

29:46.720 --> 29:47.980
Номер блока тоже.

29:48.900 --> 29:55.960
То, что я вам пишу 4950, у этого есть название в блокчейне «высота», то есть, это, как бы, высота блока, хэй.

29:56.940 --> 29:59.980
И, может быть, много блоков, как бы, с одной и той же высотой.

30:00.700 --> 30:01.080
Вот.

30:01.400 --> 30:03.280
Значит, поехали дальше.

30:03.440 --> 30:06.100
Значит, как вот эта вот вся история организована?

30:06.400 --> 30:10.280
То есть, на чем вообще вся безопасность этой штуки зиждется?

30:11.860 --> 30:16.060
Первый слон, на котором это все стоит, это хэширование.

30:18.900 --> 30:26.500
У нас будет лекция по симметричной криптографии, мы обязательно глубоко посмотрим, как строятся, как бы, эти правильные протоколы,

30:26.500 --> 30:33.140
но, как бы, что такое криптографический хэш, вы должны, прям, знать, прям, ну, на зубок.

30:34.080 --> 30:44.580
То есть, изначально эта история пришла из симметричных криптосистем, где у нас было какое-то открытое сообщение, значит, Алиса Боб,

30:44.580 --> 30:48.580
они знают какое-то секретное слово или, там, паролька.

30:48.900 --> 30:50.320
Которое мы будем называть ключом.

30:51.020 --> 31:01.460
Алиса зашифровывает свое сообщение секретное, точнее, зашифровывает вот это M, открытый месседж, секретным ключом.

31:02.520 --> 31:06.740
Получает шифротекст, вот этот вот C, отправляет его Бобу.

31:06.820 --> 31:08.580
Боб, соответственно, делает декрипшн.

31:08.580 --> 31:16.420
И тем же самым секретным ключом расшифровывает шифротекст и получает открытые сообщения обратно.

31:17.320 --> 31:18.580
Такая, как бы...

31:18.900 --> 31:19.980
Ну, общая схема.

31:20.800 --> 31:25.340
И вот эти все алгоритмы, они очень широко используются.

31:25.580 --> 31:32.960
Сейчас там любой там трафик, как бы, шифруется, как бы, все эти, все вы, как бы, эти, наверное, как бы, уже многие, как бы, про эти алгоритмы слышали.

31:33.820 --> 31:43.320
Но очень важно, как бы, понимание математических свойств, которые называются рассеивание и перемешивание.

31:43.320 --> 31:47.320
Мы еще раз на них, как бы, остановимся, чтобы у вас не было никогда...

31:48.900 --> 31:49.900
Каких-то иллюзий.

31:50.300 --> 31:53.140
Но смотрите, я смотрю на EtherScan.

31:55.160 --> 31:56.060
Вот здесь вот.

31:56.540 --> 31:58.820
Вижу, короче, какой-нибудь хэш-транзакция.

31:59.120 --> 32:01.900
Вот у меня есть транзакция, а вот ее криптографический хэш.

32:03.300 --> 32:16.940
Вот как думаете, можно найти где-нибудь в эфире или в мире, как бы, хэш, который расположен там в радиусе, там, не знаю, там, ну, в диапазоне, там, хотя бы, там, не знаю, там, 100 миллиардов, как бы, от этого хэша?

32:18.900 --> 32:36.020
Ну, я, как бы, к тому, что криптографические это такие, как бы, штуки, что вы не найдете два даже близко похожих хэша, которые отличаются там на 10, на 100, на миллион, на миллиард, на 100 тысяч миллиардов.

32:36.020 --> 32:46.000
То есть числа слишком большие, и сделано это так, чтобы хэши были уникальными цифровыми идентификаторами любой информации.

32:46.000 --> 32:55.340
То есть взяли букву А, получили от нее хэш, взяли букву Б, взяли от нее хэш, они вообще не похожи, как бы, вот эти хэши криптографические.

32:55.840 --> 32:59.040
Сделано это за счет вот этого рассеивания и перемешивания информации.

32:59.540 --> 33:08.080
Это вот то, над чем работал Тюринг, Шеннон и так далее, собственно, криптографы-математики, которые сделали аппарат математический для шифрования.

33:08.580 --> 33:10.280
В чем суть этих штук?

33:10.280 --> 33:15.760
Смотрите, у нас есть открытые сообщения, какая-то цепочка бит, ну, прям уже симметричные.

33:16.220 --> 33:19.020
Криптографии работают исключительно с битами.

33:19.900 --> 33:25.180
У нас есть какой-то ключ секретный, там, 0, 1, 1, 1, там, 0, 0, 0, неважно.

33:25.740 --> 33:35.320
Затем мы делаем наше какое-то там зашифрование, расшифрование, то есть какой-то хитрый алгоритм придумали и получили шифротекст.

33:36.060 --> 33:40.880
Он тоже там 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, там, 1.

33:41.520 --> 33:45.060
Вот, значит, что такое рассеивание и перемешивание?

33:46.000 --> 33:54.540
Это свойство хорошего шифра, то есть в чем суть вот этого аппарата, который разработал Тюринг и Шеннер?

33:54.580 --> 34:01.600
Вы придумали хитрый способ шифрования, хотите проверить, он хороший или плохой, или вы где-то накосячили, у вас в математике есть какие-то перекосы.

34:02.000 --> 34:03.920
Как понять, хороший шифр или плохой?

34:04.060 --> 34:08.840
И вот как бы хороший шифр обеспечивает вот это вот рассеивание и перемешивание.

34:08.840 --> 34:11.320
Значит, что такое рассеивание?

34:11.380 --> 34:15.840
Рассеивание говорит о том, что если я изменю 1 бит...

34:16.000 --> 34:28.380
Даже 1 бит в исходном тексте и проведу вот эту вот операцию, этот бит повлияет на все биты очень сильно шифротекста.

34:28.620 --> 34:31.380
То есть он должен так типа рассеяться как бы по ним.

34:32.000 --> 34:33.820
Значит, что значит очень сильно повлияет?

34:33.820 --> 34:44.480
Очень сильно повлияет, это означает то, что каждый бит вот этого сообщения поменяет свое значение, инвертируется с вероятностью 1, 2.

34:44.840 --> 34:45.820
То есть это тоже, в принципе...

34:46.000 --> 34:48.020
Очень как бы легко на пальцах понять.

34:48.740 --> 34:59.500
То есть я изменил здесь буквально 1 бит, и где-то примерно 50% битов шифротекста должны измениться, должны измениться в свое значение.

34:59.600 --> 35:00.740
Не знаю, какие как бы.

35:01.220 --> 35:04.500
Понятно, что детерминированные, ведь мне же надо обратно восстановить, да?

35:04.500 --> 35:10.980
То есть алгоритм должен уметь обратно как бы это дело восстанавливать, а не просто там взять рандомные биты, как бы поменять.

35:11.060 --> 35:15.880
Он должен специальным как бы способом сделать так, чтобы изменение одного бита повлияло...

35:16.000 --> 35:18.360
Вот на вот эти вот все, максимально.

35:18.940 --> 35:21.260
Причем именно как бы с вероятностью 1, 2.

35:21.820 --> 35:28.880
Потому что если будут какие-то перекосы, например, там только последние биты изменятся, или только первый бит изменится,

35:29.320 --> 35:33.640
это все позволит как бы проводить такой как бы частотный криптоанализ,

35:33.820 --> 35:39.560
очень там, соответственно, хотя бы примерно угадывать, что там находится как бы за шифротекстом.

35:40.340 --> 35:40.540
Вот.

35:41.360 --> 35:43.240
А этого не должно быть.

35:44.600 --> 35:45.080
Поэтому...

35:45.080 --> 35:45.980
Это рассеивается.

35:46.000 --> 35:49.020
Рассеивание, перемешивание, это тоже свойство, но оно касается ключа.

35:49.140 --> 35:55.340
То есть я не трогаю вообще как бы исходное сообщение, я как бы меняю в нем один бит,

35:55.520 --> 36:00.140
и точно так же это делает это сильнейшее влияние как бы на весь шифротекст.

36:00.360 --> 36:05.960
То есть неважно как бы, если я букву А как бы зашифровал как бы одним ключом,

36:06.320 --> 36:11.140
и получил как бы какой-то шифротекст, и такую же букву А зашифровал ключом,

36:11.140 --> 36:15.980
который на один бит отличается от этого, у меня будут совершенно разные шифротексты.

36:16.000 --> 36:19.540
Вот они прямо-прямо-прямо-прямо совсем никак не сравнимы.

36:19.640 --> 36:21.960
Хотя как бы ключи на один бит всего отличаются.

36:22.540 --> 36:25.040
Ну и то же самое касается как бы и открытых текстов.

36:25.520 --> 36:31.260
Вот это два таких очень мощных свойства, из которых еще можно довольно интересную штуку углядеть.

36:31.660 --> 36:36.940
Если вы будете смотреть на зашифрованные данные современными хорошими криптопротоколами

36:36.940 --> 36:41.720
и начнете в них как бы мерить количество единичек и ноликов,

36:42.260 --> 36:44.000
то вы увидите, что их примерно поровну.

36:44.000 --> 36:45.000
Ну вот из того, что...

36:46.000 --> 36:49.980
Я сказал, да, что типа примерно с вероятностью одна-вторая должны поменять значение,

36:50.520 --> 36:56.840
выглядят эти шифротексты так, как будто кто-то монетку сидит и подбрасывает.

36:56.940 --> 37:02.740
Орел-решка, орел-решка, орел-решка в разных комбинациях,

37:02.780 --> 37:06.680
но никакой статистики отсюда вы вывести не можете.

37:06.880 --> 37:10.000
То есть малейший перепост там куда-нибудь, там не знаю,

37:10.000 --> 37:14.180
если здесь больше ноликов, то вот и здесь как бы больше ноликов.

37:14.400 --> 37:16.000
Это уже дыра в криптопротоколах.

37:16.000 --> 37:21.460
То есть это уже как бы позволяет криптоаналитикам уже что-то там,

37:22.020 --> 37:28.580
какие-то предположения как бы о внутреннем документе шифровальному иметь.

37:29.500 --> 37:35.000
И вот это вот свойство как раз хэширования построено как раз на вот этих вот алгоритмах.

37:36.400 --> 37:41.200
Ну по большей части там очень-очень похожая история.

37:41.200 --> 37:44.600
Значит для того, чтобы достичь вот такой штуки,

37:46.000 --> 37:50.080
в мире битов, знаете, не так много хороших операций обратимых.

37:50.540 --> 37:54.700
Там есть ксор какой-нибудь, есть там циклический сдвиг,

37:54.980 --> 37:57.760
то есть можно там циклически сдвигать там вправо-влево,

37:58.200 --> 38:02.020
можно поделить на куски как бы и снова собрать одну половину,

38:02.100 --> 38:04.480
там не знаю, поксорить как бы, а другую сдвинуть.

38:04.800 --> 38:08.080
То есть на самом деле операций, которые можно сделать бинарных,

38:08.080 --> 38:09.380
их не так уж и много.

38:10.740 --> 38:14.960
Вот, потому что да, когда у вас есть как бы вся вселенная из двух чисел состоит,

38:15.040 --> 38:15.780
вы не так много.

38:16.000 --> 38:17.120
Вы с ними можете делать.

38:18.720 --> 38:21.920
И поэтому как бы все вот эти вот алгоритмы современного шифрования,

38:21.920 --> 38:25.040
они вот берут исходный текст, там что-то его разделяют на куски,

38:25.040 --> 38:29.040
там ксорят с ключом, потом сдвигают там на три позиции влево,

38:29.040 --> 38:32.040
потом опять ксор, потом на пять позиций вправо,

38:32.540 --> 38:34.160
потом там что-то замены и так далее.

38:34.160 --> 38:36.000
Все это как раз с вами как бы обсудим.

38:36.400 --> 38:39.160
Но получается вот такая вот каша как бы из битов.

38:40.640 --> 38:45.080
И если мы, например, возьмем с вами какой-нибудь алгоритм шифрования,

38:46.000 --> 38:49.360
скажем, современный, и начнем им шифровать один,

38:49.720 --> 38:54.380
потом двойку зашифруем, тройку зашифруем, четверку, пятерку и так далее,

38:54.580 --> 38:56.400
с одним и тем же как бы ключом,

38:57.200 --> 39:00.560
то у нас будет получаться вот такая последовательность чисел,

39:01.560 --> 39:03.500
которая называется псевдослучайная.

39:04.840 --> 39:08.240
То есть она снаружи, если вы начнете статистику мерить этих чисел,

39:08.240 --> 39:12.000
она будет как будто выбрасывать случайные числа, как в лотерею как бы играете.

39:12.900 --> 39:15.120
Вот, они будут с равными вероятностями.

39:16.000 --> 39:19.300
То есть абсолютно ровно размазанные по числовой кривой.

39:22.240 --> 39:26.100
Это следует как раз из свойства как бы хорошего криптоалгоритма.

39:26.300 --> 39:32.440
И на основе как бы вот этих вот симметричных шифрований построены генераторы случайных чисел,

39:32.520 --> 39:35.560
которые вы используете в своих программах на всякие ранды и так далее.

39:35.680 --> 39:38.000
То есть они все как бы вот эти механизмы используют.

39:39.080 --> 39:46.000
А хэширование, ну смотрите, хэширование, оно тоже строится на вот этих симметричных,

39:46.080 --> 39:50.580
алгоритмах, оно говорит, но это алгоритм полностью публичный.

39:50.720 --> 39:56.000
То есть он вообще открытый, то есть ключ все знают, например, ключ равен 1, 2, 3, 4, 5.

39:56.820 --> 39:59.040
И алгоритм хэширования может выглядеть так.

39:59.460 --> 40:04.360
Берем файл произвольной длины или файл в строчку бит, как бы неважно,

40:04.360 --> 40:09.360
там 1 петабайт, 1 мегабайт, 1 килобайт, неважно, как бы огромной длины.

40:10.140 --> 40:15.620
Берем как бы его поблочно, берем первый блок, зашифровываем его,

40:16.000 --> 40:21.240
этим вот нашим как бы ключиком, получаем какой-то зашифрованный текст,

40:21.840 --> 40:26.560
сцепляем его со следующим блоком, проводим еще одно там шифрование,

40:27.660 --> 40:30.520
сцепляем его со следующим блоком, вот.

40:30.520 --> 40:33.460
И у нас получается такой последний как бы блочок,

40:34.040 --> 40:37.620
вот, ну пускай длина будет, ну современные как бы алгоритмы шифрования,

40:37.780 --> 40:41.400
хорошие там AES, как бы они работают с блоками длиной 256 бит.

40:41.960 --> 40:45.340
То есть такая как бы сейчас считается как бы секьюрная битность,

40:45.340 --> 40:47.500
в современных криптоалгоритмах.

40:47.860 --> 40:56.980
Размер ключа 256 бит, размер блока там 256 бит, и так далее, это вам обсудим.

40:56.980 --> 40:59.400
И вот у нас получился вот такой вот последний блок.

40:59.800 --> 41:03.240
И смотрите, какой он интересный, он зависит от всех битов вот этого файла.

41:03.380 --> 41:06.100
Причем неважно, даже если этот файл петабайт занимает,

41:06.200 --> 41:07.980
то есть если он просто немеренно огромный,

41:08.960 --> 41:11.500
стоит вам тронуть один бит в любом из этих блоков,

41:11.540 --> 41:15.320
у вас разломается вот этот вот, разломается вот этот вот, разломается.

41:15.340 --> 41:18.860
Вот этот вот, и вы получите совершенно другой хэш, абсолютно.

41:19.480 --> 41:22.080
То есть прям, который будет отличаться очень сильно.

41:22.820 --> 41:26.240
Отличаться очень сильно, вы уже тоже знаете, как бы, что значит очень сильно.

41:26.300 --> 41:30.980
Очень сильная в криптографии, это означает, что примерно половина битов,

41:31.020 --> 41:33.760
как бы, поменяла свое значение.

41:33.860 --> 41:38.620
Вот, и вот эта вот штука является таким прекрасным цифровым отпечатком,

41:39.160 --> 41:40.780
таким идентификатором данных.

41:41.400 --> 41:44.660
Используется вообще повсеместно, как бы, хэширование где угодно,

41:44.660 --> 41:45.200
там, не знаю.

41:45.340 --> 41:49.880
В файловых системах, в телекоммуникациях, там, ой, ну, как бы,

41:49.960 --> 41:52.980
очень широко используемые алгоритмы, вот.

41:53.380 --> 41:57.280
Ну, и, конечно же, как бы, как раз вот эти вот в крипте,

41:57.420 --> 42:00.360
это хэши блоков, это хэши транзакций.

42:00.840 --> 42:03.420
То есть, если вы видите, как бы, хэш-транзакции,

42:03.500 --> 42:05.500
вы можете, как бы, самостоятельно проверить,

42:05.920 --> 42:09.220
что вот тело этой транзакции, вот оно там с точностью до бита,

42:09.600 --> 42:12.420
там, ну, прям вот ее, типа, RAW-образ,

42:12.420 --> 42:14.660
который, как бы, там, не знаю, там, пачка,

42:14.660 --> 42:19.060
это байт, что она, ну, не была, там, не знаю, подделана,

42:19.160 --> 42:21.080
что она была, как бы, представлена и так далее.

42:21.200 --> 42:23.300
И, в принципе, когда кто-то кому-то криптой платит,

42:23.340 --> 42:27.000
он обычно кидает, как бы, вот я тебе заплатил, как бы, не знаю,

42:27.100 --> 42:29.900
вот хэш-транзакции, иди, как бы, посмотри по нему.

42:30.560 --> 42:33.480
Я могу сходить на сайт, но могу, в общем-то, и сам обратиться

42:33.480 --> 42:35.720
к своей собственной ноде блокчейна и сказать,

42:35.900 --> 42:37.720
типа, найди мне по хэшу эту транзакцию.

42:38.420 --> 42:42.440
В торрентах файлы ищутся по хэшам, вот.

42:42.440 --> 42:44.640
Во всех, там, не знаю, там, облаках и так далее.

42:44.660 --> 42:48.660
Для исключения дубликатов тоже, как бы, файлы обязательно хэшируют,

42:49.340 --> 42:52.240
сохранятся, как бы, их хэши цифровые, в первую очередь.

42:52.720 --> 42:56.080
Это, вот, собственно, такой первый, как бы, такой криптографический слон,

42:56.180 --> 42:57.420
на котором все это строится.

42:58.380 --> 43:00.240
Второй слон – это цифровая подпись.

43:00.460 --> 43:05.140
Тоже мы, тоже бежим, как бы, галопом по Европам в данном случае.

43:05.320 --> 43:07.340
Это концепция асимметричной криптографии.

43:07.500 --> 43:09.740
Появилась она, там, в 70-х годах.

43:11.080 --> 43:14.440
Значит, там, мы с вами посмотрим, как бы, и Диффи Хелм,

43:14.520 --> 43:14.640
и так далее.

43:14.660 --> 43:16.740
Используется тоже крайне широко.

43:17.900 --> 43:21.440
Там кто-то любит приводить, не знаю, сдачу бухгалтерской отчетности,

43:21.560 --> 43:24.660
там, ЭЦП, которые получают, как бы, в центрах.

43:25.960 --> 43:29.020
Но, на самом деле, самое широкое применение вот здесь, вот.

43:29.340 --> 43:30.600
Вот в этом замочке, как бы.

43:30.680 --> 43:34.660
Когда вы соединяетесь с сайтом по протоколу HTTPS,

43:36.440 --> 43:39.480
то есть, когда вы, как бы, я захожу на Google.com,

43:39.900 --> 43:43.200
мой браузер просит Google.com доказать, как бы,

43:43.200 --> 43:44.640
что это он мне сейчас отдает.

43:44.660 --> 43:45.520
Вот веб-страницу.

43:46.320 --> 43:52.640
То есть, он его просит подписать данные, которые подготовил мой браузер.

43:52.820 --> 43:55.200
Ну, грубо говоря, мой браузер кидает в Google рандом и говорит,

43:55.280 --> 43:57.160
а подпиши-ка своим публичным ключом.

43:58.000 --> 43:58.340
Вот.

43:58.420 --> 44:02.160
И, соответственно, Google подписывает, и тогда мой браузер уверен,

44:02.200 --> 44:03.400
что попал туда, куда надо.

44:03.980 --> 44:07.520
Значит, сама концепция вот этих вот публичных, приватных ключей.

44:09.380 --> 44:13.160
Там под капотом, на самом деле, ну, значит, представьте,

44:13.160 --> 44:14.480
у меня есть там у нас, опять же,

44:14.660 --> 44:19.200
Алиса и Боб, они могут при помощи некого математического алгоритма

44:19.280 --> 44:23.200
создать пару чисел, значит, одну из них назовем публичный ключ,

44:23.280 --> 44:24.840
а другую назовем секретный ключ.

44:25.480 --> 44:29.360
Публичный ключ, типа, можно шарить, можно там куда угодно, там, не знаю,

44:29.420 --> 44:34.060
показывать как угодно, а секретный ключ всегда лежит приватный,

44:34.240 --> 44:37.540
сохраненный, как бы, никогда не покидает там устройство, там,

44:39.360 --> 44:41.160
то есть его Алиса хранит в секрете.

44:41.620 --> 44:44.420
Вот, значит, строятся они.

44:44.420 --> 44:49.400
Ну, на самом деле, пара этих чисел, как бы, строится на основании так называемых

44:49.460 --> 44:50.600
односторонних функций.

44:52.100 --> 44:57.100
Например, как бы, зная секретный ключ, получить публичный ключ легко вычислить,

44:57.180 --> 45:01.240
а зная публичный ключ, вычислить секретный ключ вычислить невозможно.

45:01.980 --> 45:07.060
Ну, можно привести в качестве примера вот такую функцию g степени x по модулю p.

45:07.660 --> 45:12.240
Это криптсистема RCA строится на основе такой вот, как бы, функции.

45:14.420 --> 45:21.940
Значит, предположим, y – это у нас публичный ключ, а вот это у нас секретный ключ x.

45:22.860 --> 45:28.520
Значит, зная x, ну, это публичные параметры, просто огромные числа, там, не знаю,

45:28.600 --> 45:32.860
типа вот такие 2 в 2048, ну, то есть прям огроменные.

45:33.720 --> 45:39.860
Зная x, ой, зная x, да, получить y очень просто, потому что возведение в степень,

45:39.860 --> 45:43.920
если кто-то там с логарифмами дело имел, да, то возведение в степень, оно такое,

45:43.920 --> 45:45.300
очень здорово оптимизировано.

45:45.800 --> 45:50.360
То есть там берутся, возводятся степени, там, близкие к степени двойки, вот, в общем,

45:50.460 --> 45:52.160
там этот логарифм работает реально быстро.

45:52.880 --> 45:58.980
А вот обратно посчитать так называемый дискретный логарифм, а пупайка, нельзя.

45:59.360 --> 46:04.720
Для таких чисел, как бы, это безумное вычисление, как бы, и сейчас это сделать невозможно.

46:05.620 --> 46:11.160
Есть там алгоритм Шора, который на квантум-компьютере в теории, как бы, позволяет,

46:11.220 --> 46:12.880
как бы, вот это дело, как бы, крэкать.

46:13.920 --> 46:19.120
Вот ломать, там, считать эти дискретные логарифмы, но, как бы, пока еще до этого далеко.

46:19.920 --> 46:22.740
Вот, в общем, это такая, как бы, пример односторонней функции.

46:23.180 --> 46:24.920
Вот у нас есть вот такая вот пара чисел.

46:25.500 --> 46:30.860
А теперь представьте, что мы их приспособили для того, чтобы зашифровывать и расшифровывать информацию.

46:30.860 --> 46:37.620
То есть, как бы, спрятали информацию, получили какой-то шифротекст, раскрыли ее.

46:38.320 --> 46:43.060
Значит, в этих криптосистемах, так они и так и называются, асимметричные,

46:43.720 --> 46:43.860
публикация.

46:43.920 --> 46:47.280
Вот личный ключ, если что-то мы зашифровываем публичным ключом,

46:47.320 --> 46:49.980
то мы его можем расшифровать при помощи секретного.

46:51.120 --> 46:51.940
И наоборот.

46:52.520 --> 46:58.460
То есть, если мы что-то зашифровали при помощи секретного, мы можем разшифровать при помощи

46:58.460 --> 46:58.920
публичного.

46:58.920 --> 47:05.400
Ну, такой, как бы, сделали, ребята такой математический аппарат, который позволяет

47:06.060 --> 47:10.480
сгенерировать два числа, которые обладают такими свойствами и описали, как при помощи

47:11.080 --> 47:13.720
публичного ключа расшифровать, а секретного расшифровать.

47:13.720 --> 47:25.440
Соответственно, то, что зашифровано публичным ключом, расшифровать может только тот, кто знает секретный ключ.

47:26.300 --> 47:27.460
Остальные не могут.

47:28.100 --> 47:33.840
Первая схема, которая здесь напрашивается, эта схема называется секретной передачей информации.

47:33.960 --> 47:37.160
Это когда Алиса говорит, Боб, вот тебе мой публичный ключ.

47:37.160 --> 47:40.040
Здесь у нас будет Алиса и секретный ключ Алиса.

47:40.040 --> 47:47.000
Давай зашифровывай для меня данные при помощи моего публичного ключа.

47:47.360 --> 47:49.480
И Боб, собственно, вот это и делает.

47:50.860 --> 47:56.160
То есть, по сути, и только Алиса, соответственно, может их расшифровать.

47:59.440 --> 48:01.660
Чем эта схема удобна?

48:01.660 --> 48:08.400
Еще с точки зрения телекома, это тем, что Алиса может рассказать свой публичный ключ вообще всем, всему миру.

48:09.000 --> 48:09.760
Алиса, например.

48:09.760 --> 48:10.380
Алиса, например, это Google.

48:11.900 --> 48:17.820
И говорит, кто хотите, можете для меня информацию зашифровывать моим публичным ключом.

48:18.240 --> 48:19.040
Любую, как бы.

48:19.680 --> 48:23.720
И нам не нужно вот этот вот обмен ключами, там что-то там еще делать.

48:24.080 --> 48:27.300
Она позволяет такие неинтерактивные схемы строить.

48:27.960 --> 48:30.300
Но нам эта история не сильно, как бы, интересна.

48:30.340 --> 48:32.000
Нам интересно вот это вот.

48:32.240 --> 48:34.140
То есть смена ролей этой штуки.

48:34.180 --> 48:35.760
Это схема электронной подписи.

48:36.320 --> 48:39.600
Значит, вот ее тоже надо.

48:39.760 --> 48:41.760
Нам очень хорошо, как бы, понимать, как она работает.

48:42.480 --> 48:45.480
Итак, у Алисы есть публичный ключ, есть секретный ключ Алисы.

48:46.740 --> 48:51.380
Она Бобу, как бы, сообщает, каким образом, каким-то образом, свой публичный ключ.

48:51.560 --> 48:56.700
Говорит, Боб, проверяй мою электронную подпись при помощи него, при помощи моего публичного ключа.

48:57.140 --> 48:58.800
Затем у нее есть какой-то документ.

49:00.080 --> 49:05.800
Я юристам люблю вот так вот рисовать, да, какой-то, не знаю, файл, транзакция, как бы, неважно.

49:05.800 --> 49:06.920
Какой-то бинарный буфер.

49:08.000 --> 49:08.180
Вот.

49:08.600 --> 49:09.680
И она хочет.

49:09.760 --> 49:10.500
Она хочет его подписать.

49:11.620 --> 49:12.060
Подписать.

49:12.140 --> 49:19.640
То есть она хочет продемонстрировать всем, у кого есть публичный ключ Алисы, что она запроцессила вот этот файл, как бы, до последнего бита.

49:19.820 --> 49:29.000
То есть она либо документ в Варде глазами посмотрела, либо ее сервер, как бы, провалидировал вот эту транзакцию и сказал, типа, ок.

49:29.500 --> 49:30.360
Значит, что она делает?

49:30.900 --> 49:33.980
Она считает криптографический хэш от вот этой штуки.

49:34.940 --> 49:38.980
Затем она этот хэш зашифровывает своим секретным ключом.

49:39.760 --> 49:40.940
Вот этот вот хэш.

49:41.500 --> 49:46.800
И получившаяся вот эта штука, как бы, является электронной подписью этого документа.

49:46.900 --> 49:49.820
Сам документ не секретный, так как схема, как бы, подписи.

49:50.300 --> 49:52.220
Нам там прятать ничего не надо.

49:52.960 --> 49:55.960
И вот эта вот штуковина, она полностью, как бы, отправляет Бобу.

49:56.580 --> 49:58.380
Боб получает, как бы, документ.

49:58.980 --> 50:04.260
Возможно, его перехватили, там, что-нибудь поправили здесь, там, 10 тысяч на 100 тысяч, там, и так далее, и так далее.

50:05.120 --> 50:05.520
Вот.

50:05.520 --> 50:05.580
Вот.

50:06.020 --> 50:09.740
Получает ее электронную подпись и делает обратную.

50:09.760 --> 50:15.680
То есть он берет электронную подпись, берет публичный ключ Алисы, который ей тоже понадобится.

50:16.820 --> 50:21.120
Затем он расшифровывает публичным ключом Алисы вот эту подпись.

50:22.300 --> 50:26.760
И должен, по идее, получить хэш документа, если все верно.

50:27.600 --> 50:27.720
Вот.

50:27.880 --> 50:30.540
Но он его считает, конечно, и самостоятельно.

50:31.120 --> 50:31.760
И потом сравнивает.

50:32.900 --> 50:38.920
Соответственно, если они равны, то только Алиса при помощи своего секретного ключа могла поставить, как бы, вот эту электронную подпись.

50:39.760 --> 50:54.100
Ну, соответственно, если, как бы, подпись неверна, то Боб ничего не может сказать точно, потому что у него то ли здесь что-то испортилось, то ли здесь что-то испортилось, может, здесь что-то испортилось.

50:54.200 --> 50:55.800
То есть просто неверна и неверна.

50:56.600 --> 50:56.960
Вот.

50:57.060 --> 51:03.840
И, как бы, понятно, что по свойствам, как бы, шифрования, да, вот, отличия этих хэшей, они будут очень большие.

51:04.180 --> 51:07.760
То есть там какие-то прям очень серьезные, как бы, потому что есть рассеивание, перемешивание.

51:07.760 --> 51:08.200
Вот.

51:09.440 --> 51:09.760
Это электронная.

51:09.760 --> 51:10.540
Это электронная подпись.

51:11.280 --> 51:12.920
Значит, да.

51:13.380 --> 51:16.680
Не могли бы еще раз повторить про электронную подпись?

51:17.840 --> 51:19.540
С момента подписания?

51:20.120 --> 51:23.880
С момента, да, того, как, ну, после получения ее.

51:24.500 --> 51:26.220
А, еще раз, после получения.

51:26.300 --> 51:30.220
Значит, Алиса сделала как раз вот эту вот электронную подпись.

51:31.540 --> 51:32.120
Так вот.

51:32.960 --> 51:34.800
Отправила этот документ Бобу.

51:35.580 --> 51:36.000
Вот.

51:36.000 --> 51:39.320
Ну, и я там, не знаю, там, хотите, если еще.

51:39.320 --> 51:46.480
Если еще аналогию, то это какая-нибудь компания, которая сдала бухгалтерскую отчетность, сделала зип-файл.

51:47.340 --> 51:49.660
У этой компании есть секретный ключ.

51:50.140 --> 51:54.640
Она этим секретным ключом этот зип-файл подписала и отправила в налоговую.

51:54.720 --> 51:55.700
Здесь, как бы, налоговая.

51:55.760 --> 52:00.200
А в налоговой есть табличка, как бы, что ООО там такое-то, такое-то.

52:00.300 --> 52:02.140
У него вот такой-то публичный ключ.

52:03.180 --> 52:03.560
Вот.

52:03.560 --> 52:08.560
И, соответственно, значит, налоговая скачивает этот зип-файл,

52:08.560 --> 52:12.000
который ей прислали, получает электронную подпись.

52:12.680 --> 52:17.920
У нее есть публичный ключ этой компании, то есть там зарегистрированный в реестре.

52:17.960 --> 52:21.740
Она при помощи публичного ключа проверяет электронную подпись.

52:22.760 --> 52:31.060
И когда мы с вами рисовали то, что зашифровано при помощи секретного ключа

52:31.060 --> 52:33.840
может быть расшифровано при помощи публичного ключа,

52:33.840 --> 52:37.680
здесь делается декрипшн при помощи публичного ключа,

52:37.680 --> 52:40.980
расшифровывается именно сама электронная подпись, как и SIG.

52:42.220 --> 52:47.320
После этого должен получиться хэш документа криптографический,

52:47.420 --> 52:55.120
потому что до этого подпись – это зашифрованный хэш документа,

52:55.220 --> 52:57.000
который зашифрован секретным ключом.

52:58.160 --> 53:05.520
И при проверке БОП, наша налоговая, она сама считает криптографический хэш

53:05.520 --> 53:09.960
и сравнивает с тем, что получилось вот здесь при проверке подписи.

53:10.840 --> 53:14.940
Если они равны, то подпись верна, потому что только владелец секретного ключа

53:14.940 --> 53:18.420
мог бы сгенерировать вот такую вот подпись.

53:18.800 --> 53:19.580
Можно вопрос?

53:20.080 --> 53:20.280
Да.

53:21.500 --> 53:26.080
Получается, у нас смысл в том, чтобы публичный ключ и данные от А,

53:26.220 --> 53:29.000
ну, от Алисы, мы получили из разных источников.

53:29.260 --> 53:31.220
Иначе, если мы от одного и того же источника это получаем,

53:31.320 --> 53:33.300
то можно подменить и то, и другое. Разве нет?

53:34.800 --> 53:35.320
Да.

53:35.520 --> 53:35.940
Можно.

53:36.760 --> 53:40.760
Ну, именно поэтому и существует в HTTPS эта система сертификатов,

53:40.840 --> 53:46.160
которую я показал, как бы, поэтому, как бы, надо вот эта регистрация

53:46.160 --> 53:50.160
публичных ключей называется, при сдаче электронной отчетности называется

53:50.160 --> 53:54.140
на стране, типа, мне надо сходить, получить ЭЦП.

53:54.820 --> 53:55.040
Вот.

53:55.040 --> 53:59.260
Вот это вот получить ЭЦП – это, по сути, зарегистрировать публичный ключ.

54:00.000 --> 54:00.220
Вот.

54:00.260 --> 54:02.240
Поэтому, да, как бы, из разных источников.

54:02.240 --> 54:04.960
Но, как бы, в блокчейнах это не сильно важно.

54:05.520 --> 54:08.640
Я как раз сейчас перейду, как раз, как это используется в блокчейнах.

54:09.240 --> 54:09.460
Вот.

54:09.520 --> 54:11.640
В блокчейнах все на самом деле находится на борту.

54:12.620 --> 54:13.020
Транзакция.

54:14.520 --> 54:17.420
Значит, смотрите, как это работает в блокчейне.

54:17.500 --> 54:24.660
Там, я не знаю, мы уже давайте, я буду правильно уже называть, как бы, вещь своими именами,

54:24.840 --> 54:29.520
а я буду вот эти вот адреса называть, как бы, адресами в блокчейне.

54:29.520 --> 54:31.780
Вот этот вот from, как бы, to.

54:32.400 --> 54:34.700
Значит, у нас есть Вася.

54:35.520 --> 54:40.960
У Васи есть секретный ключ Вася, у него есть публичный ключ Вася, вот этот, как бы, публичный ключ.

54:41.420 --> 54:44.640
И вот из этого публичного ключа получается адрес Вася.

54:45.420 --> 54:50.260
Есть некоторая путаница, потому что в некоторых блокчейнах, как бы, адресом является прямо публичный ключ.

54:50.520 --> 54:58.800
И мне проще сильно объяснять вам, если я скажу, что в блокчейнах все пользователи адресуются, как бы, при помощи своих публичных ключей.

54:59.700 --> 55:00.200
Вот.

55:00.200 --> 55:04.440
Ну, как бы, чисто технически, как бы, там, скажем, в эфире, как бы, адрес – это…

55:05.520 --> 55:12.600
160 бит, по-моему, первых или последних от хэша, от публичного ключа.

55:13.240 --> 55:19.820
Вот так, то есть берется публичный ключ, от него берется хэш, от него берется, как бы, 160 бит, и получается такая вот строчка.

55:19.940 --> 55:23.440
Ну, там есть, там, собственно, основание, как бы, почему так сделано.

55:23.840 --> 55:28.120
В биткоине тоже, как бы, но тоже все наследуется от публичного ключа.

55:28.120 --> 55:35.500
И когда Вася хочет отправить кому-то транзакцию, он создает, там, транзакцию типа файлик.

55:35.520 --> 55:48.640
Я, Вася, это вот мой адрес, хочу на адрес Пети отправить, там, не знаю, там, 10 эфира, и вот, соответственно, моя электронная подпись от этой штуки.

55:49.220 --> 55:57.000
И подпись просто, она сделана таким образом, что из нее можно достать публичный ключ Вася из этой подписи.

55:57.000 --> 56:05.060
Ну, просто она так, как бы, организована вот здесь, вот в этих вот значениях, ВРС, вот это, собственно, подпись, как бы, транзакция.

56:05.520 --> 56:10.880
Из нее, как бы, при помощи, там, определенной операции извлекается прям публичный ключ.

56:11.460 --> 56:17.100
Вот, ну, просто так сделано для удобства, чтобы не надо было дописывать еще сюда публичный ключ Вася для проверки.

56:17.640 --> 56:17.860
Вот.

56:18.560 --> 56:27.580
То есть я под подписью теперь буду подразумевать, как бы, там, не знаю, там, в эфире в биткоине, как бы, подпись, из которой извлекается публичный ключ.

56:28.920 --> 56:29.340
Вот.

56:29.820 --> 56:32.880
Значит, почему, типа, кто угодно не может это сделать?

56:32.880 --> 56:35.500
Ну, во-первых, как бы, кто угодно не может.

56:35.520 --> 56:39.700
Подписать транзакцию от имени Вася, не зная секретного ключа Вася.

56:41.100 --> 56:41.500
Вот.

56:41.640 --> 56:53.860
А во-вторых, он не сможет забрать у него 10 эфира, потому что Вася, когда, как бы, 10 эфира тратит, там, в таблице, как бы, написано, как бы, что у Вася, как бы, есть, там, не знаю, там, 50 ЕТХ.

56:54.620 --> 56:58.760
А у, там, Пети, короче, есть 3, 3 эфира.

56:59.320 --> 57:05.500
И, конечно, там, типа, если, ну, здесь ничего не подменишь, как бы, Петя не может, как бы, взять, сказать.

57:05.520 --> 57:12.300
Я, Петя, как бы, хочу, там, не знаю, кому-нибудь, там, Миша, отправить, там, 10 эфира с адреса Вася.

57:12.920 --> 57:15.820
И поставить, как бы, подпись Вася, как бы, это не сработает.

57:17.380 --> 57:17.740
Вот.

57:18.340 --> 57:26.680
Так что, как бы, каждая транзакция в блокчейне обязательно подписывается, прям, строго подписывается электронной подписью.

57:26.840 --> 57:28.240
Это вообще повсеместно.

57:28.440 --> 57:34.960
И когда я говорю, что майнер или, там, блок-продюсер, как бы, он формирует блок и вставляет сюда транзакции.

57:35.520 --> 57:39.340
А кто-то там, типа, другой, получив новый блок, он его валидирует.

57:40.280 --> 57:43.220
То, на самом деле, это означает, что он бежит, как бы, по транзакциям.

57:43.440 --> 57:48.200
И, конечно же, обязательно, как бы, проверяет электронную подпись каждой из вот этих вот транзакций.

57:49.160 --> 57:51.240
То есть, ему, прям, надо, короче говоря, проверить.

57:51.740 --> 57:57.260
Опять же, я чуть-чуть, как бы, кривлю душой, потому что я вам рассказываю, как бы, про, как бы, блокчейн,

57:57.260 --> 58:03.020
на который, как бы, сверху мне наложили еще, там, различные, там, оптимизации и так далее.

58:03.160 --> 58:05.500
Об этом мы будем отдельно говорить.

58:05.520 --> 58:11.160
А говорю о таком, как бы, об абстрактном, как бы, блокчейне, который, прям, вот, там, самый, как бы, надежный,

58:11.280 --> 58:13.180
и где задачи, прям, в лоб решаются.

58:13.920 --> 58:18.620
То есть, при формировании блока майнер, конечно, проверяет обязательно вот эти подписи,

58:19.000 --> 58:25.100
потому что сделает он, как бы, блок, в котором где-нибудь, вот здесь, вот, какая-нибудь фейковая транзакция,

58:25.660 --> 58:30.260
или Вася переводит кому-нибудь, там, миллиард эфира, как бы, а у него на балансе их просто нету.

58:30.260 --> 58:34.960
То есть, он еще, как бы, каждую транзакцию проверяет обязательно, как бы, майнер.

58:35.520 --> 58:37.080
Но этот блок просто выкинут.

58:37.560 --> 58:42.280
То есть, кто-то, ну, другие компьютеры в сети, как бы, его возьмут, начнут накатывать транзакции,

58:42.360 --> 58:48.840
обнаружат, как бы, что у Васи нет эфира, что еще что-то скажут, а, блок фигня, как бы, все откатывается, как бы, просто его откатят.

58:50.160 --> 58:50.520
Вот.

58:52.240 --> 59:01.040
И при этом, значит, почему здесь еще, ну, так, уже чуть-чуть так смещаясь еще в сторону, наверное, экономической безопасности,

59:01.040 --> 59:05.460
а почему, как бы, в блокчейнах, в эфире, как бы, выгодно производить блоки,

59:05.520 --> 59:12.380
потому что по той же, как бы, спецификации, то есть, по тому, как бы, как вот этот блок, как бы, валидируется,

59:13.000 --> 59:19.960
в блоке в конце последней транзакции должна быть обязательно, так называемая, у нее есть специальное даже название,

59:20.100 --> 59:24.720
Coinbase называется транзакция, это вот в биткоине, в эфире,

59:24.720 --> 59:35.160
которая, по сути, представляет собой транзакцию из никуда, из воздуха, на адрес майнера, точнее, просто на адрес, который укажет,

59:35.160 --> 59:40.260
тот, кто произвел этот блок, то есть, неважно, кто там произвел, как бы, он может указать любой адрес,

59:41.040 --> 59:48.480
положить, добавить, короче, не знаю, там, 6, там, 25 биткоина, что ли, сейчас наград за блок, вот.

59:49.100 --> 59:54.340
То есть, как бы, обязательно последней должна быть транзакция награды, как бы, майнеру за то, что он произвел блок.

59:54.440 --> 01:00:02.500
Поэтому майнеру выгодно, что его блок будет принят сетью, что никто, как бы, его не выкинет, что он здесь нигде не ошибся, как бы,

01:00:02.500 --> 01:00:05.140
что его будут продолжать распространять, как бы, по другим.

01:00:05.160 --> 01:00:11.020
И другие машины, как бы, будут на основе его блока уже начинать строить, как бы, следующее.

01:00:11.400 --> 01:00:15.160
Таким образом, как бы, закрепляя вот этот вот блок, как бы, в консенсусе.

01:00:16.180 --> 01:00:18.800
Вот, то есть, формируется почка поверх него.

01:00:18.960 --> 01:00:25.020
Тут много от алгоритмов, от консенсуса зависит, вот, но, тем не менее, то есть, произвести блок выгодно.

01:00:26.880 --> 01:00:30.520
Вот, в общем, это вот то, что касается, соответственно, электронной подписи.

01:00:30.520 --> 01:00:34.980
То есть, все, как бы, все строится на электронной подписи, как бы, здесь.

01:00:35.160 --> 01:00:37.660
Она постоянно используется.

01:00:38.720 --> 01:00:45.040
Более того, где она еще используется, это, опять же, если говорить о консенсусах,

01:00:45.920 --> 01:00:54.080
когда происходит, ну, когда у нас есть вот эти вот уже там наши, не знаю, валидаторы, давайте их называть,

01:00:54.180 --> 01:00:57.560
как бы, уже правильно, как бы, там, майнеры, валидаторы, блок-продюсеры,

01:00:57.560 --> 01:01:03.820
то есть, те, кто производит блоки, каждый из них периодически предлагает блок всем остальным.

01:01:04.040 --> 01:01:05.140
Он говорит, типа, ребят, я согласен.

01:01:05.160 --> 01:01:06.280
Я создал, как бы, новый блок.

01:01:06.380 --> 01:01:07.980
Как вы его там примете, не примете.

01:01:08.620 --> 01:01:22.480
В случае майнинга он прилагает к этой штуке, там, специальный хэш, как бы, который, по которому понятно, что он потратил, там, кучу, там, мегаватт, тераватт, как бы, энергии на то, чтобы такой хэш просто получить.

01:01:22.980 --> 01:01:30.320
То есть, он просто, и остальные его просто принимают, этот блок, как бы, если этот хэш достаточно сложный.

01:01:30.320 --> 01:01:35.140
А вот в алгоритмах Proof of Stake, Proof of Authority, как бы, в нормальных, как бы,

01:01:35.160 --> 01:01:43.600
в таких вот, цивилизованных, которые, считаю, там ставятся, так называемые, аттестации на блоки.

01:01:43.780 --> 01:01:53.000
То есть, валидатор предлагает блок, другой валидатор его скачивает, он его проверяет и говорит, да, чувак, твой блок правильный.

01:01:53.620 --> 01:01:57.800
Затем второй, как бы, перепроверяет, говорит, да, твой блок правильный, мне нравится.

01:01:58.420 --> 01:02:01.560
Третий, как бы, отвалился, у него интернета нету.

01:02:02.380 --> 01:02:04.800
Четвертый подключился, он говорит, да, твой блок правильный.

01:02:05.160 --> 01:02:11.840
И вот эти вот штуки, это тоже является, по сути, ну, как бы транзакциями, тоже являются электронными подписями.

01:02:11.960 --> 01:02:17.820
То есть они просто подписывают блок, то есть ставят электронную подпись на вот этом блоке.

01:02:18.180 --> 01:02:28.400
И когда этот блок набирает, как бы там, не знаю, больше там, ну, пускай там больше двух третей голосов, он считается все финализированным.

01:02:28.820 --> 01:02:32.340
То есть считается, что он все закрепляется в цепочке.

01:02:32.340 --> 01:02:40.180
В принципе, данные из этого блока можно начать оптимистично использовать и заранее, то есть пока его не приняли.

01:02:40.320 --> 01:02:48.920
То есть у нас идет цепочка, давайте уже как бы в рамках вот нашего как бы нода, то есть наш собственный блокчейн, не знаю, нода.

01:02:49.700 --> 01:02:52.760
Вот у меня здесь есть, например, там, не знаю, там, кошелек.

01:02:54.680 --> 01:02:55.480
Сейчас его.

01:02:58.280 --> 01:03:01.760
Вот он, собственно, смотрит куда-то там в какой-то компьютер.

01:03:02.340 --> 01:03:09.600
Ну, обращается к нему и спрашивает, типа, какой баланс сейчас у адреса там у такого-то?

01:03:10.380 --> 01:03:12.560
Вот там, какой баланс вот у этого адреса?

01:03:13.020 --> 01:03:18.800
Он на самом деле по JSON-RPC сейчас как бы пингует какую-то блокчейн-ноду.

01:03:19.280 --> 01:03:25.320
И как бы обращается к ней в ее K-value базу данных и говорит, а какой баланс вот у этого адреса?

01:03:25.820 --> 01:03:26.920
Она ей отвечает.

01:03:27.660 --> 01:03:30.820
Затем как бы эта нода выкачивает новый блок.

01:03:30.820 --> 01:03:33.640
И этот блок еще не финализирован.

01:03:33.720 --> 01:03:36.580
На нем еще не поставлены как бы вот эти вот аттестации.

01:03:37.240 --> 01:03:43.760
То есть она его скачала, она его сама как бы проверяет, она его сама проверяет как бы на корректность,

01:03:44.220 --> 01:03:50.160
но на самом деле ждет до тех пор, пока не будет собрано достаточное количество вот этих вот аттестаций.

01:03:50.240 --> 01:03:52.800
В этот момент блок считается финализированным.

01:03:54.860 --> 01:03:58.960
И довольно важная вещь, которую мы будем разбирать как бы в консенсусах,

01:03:59.060 --> 01:03:59.800
то, что...

01:04:00.820 --> 01:04:07.360
Сети, которые построены как старый как бы эфир, proof-of-work, майнинг в биткоине,

01:04:07.840 --> 01:04:10.840
это так называемый пробабилистический консенсус.

01:04:12.460 --> 01:04:19.460
То есть там, ну, в теории, если где-то сидит какой-то инопланетянин с огромным суперкомпьютером

01:04:19.460 --> 01:04:27.280
и подмайнивает там как бы цепочку биткоина, да, и нам ее не показывает как бы эту цепочку биткоина,

01:04:27.800 --> 01:04:30.460
но у него огромные вычислительные мощности, он там вот эти красивые...

01:04:30.820 --> 01:04:35.620
как бы хэши как бы ищет в лед, то если он опубликует эту цепочку вдруг неожиданно,

01:04:35.700 --> 01:04:40.300
то есть все в пиринговой сети ее увидят, они про текущий биткоин вообще забудут как бы.

01:04:40.420 --> 01:04:44.740
То есть они его выкинут целиком, как бы возьмут более вычислительно сложную цепочку.

01:04:45.520 --> 01:04:50.680
То есть выберут то, что как бы более вычислительно сложно.

01:04:51.360 --> 01:04:52.260
И вот эти вот...

01:04:52.260 --> 01:04:56.600
А вот если цепочка обновляется, что с транзакциями?

01:04:57.080 --> 01:04:57.720
Откатываются.

01:04:58.400 --> 01:04:59.000
Откатываются.

01:04:59.000 --> 01:04:59.060
Откатываются.

01:04:59.900 --> 01:05:00.000
А если...

01:05:00.820 --> 01:05:04.580
А деньги, если уже потрачены, переведены, то это все тоже...

01:05:04.580 --> 01:05:07.040
Они перестают существовать.

01:05:07.180 --> 01:05:15.340
То есть, ну, то есть, как бы здесь, ну, как бы блокчейны здесь как раз не надо думать как финансист, вот.

01:05:15.580 --> 01:05:18.160
Надо думать как разработчик.

01:05:18.240 --> 01:05:24.360
Вот есть табличка, там где у Васи как бы там 100, как бы, да, а у Пети 10.

01:05:24.840 --> 01:05:29.680
Вот транзакция, как бы, Вася Петя перевел 10, да, как бы у него стало 90,

01:05:29.680 --> 01:05:31.360
а у этого стало 20.

01:05:32.140 --> 01:05:37.620
Вот накатили блок, накатили блок, он добрался до финализации.

01:05:37.820 --> 01:05:42.740
То есть, как бы его там оттестовали, или прошло какое-то время в пруфо-форке после майнинга.

01:05:43.320 --> 01:05:47.680
И вот эти вот изменения, они в базе данных как бы считаются валидными, зафиксированными.

01:05:48.600 --> 01:05:52.680
Но если блок откачан, откатывается, то все обратно возвращается.

01:05:53.520 --> 01:05:57.180
То есть никакой, ну, никакой Петя ничего не получал, как бы.

01:05:57.800 --> 01:05:58.080
Вот.

01:05:58.080 --> 01:05:59.560
Все остались как бы при своих.

01:06:00.640 --> 01:06:03.720
Просто когда я рисовал еще вот эти вот блок-спул,

01:06:04.320 --> 01:06:09.280
почему мы с вами, как бы, вот этого не видим, как бы, вот этого борьбы, как бы, такой, как бы, балансов?

01:06:09.780 --> 01:06:13.020
Да потому что, когда у нас майнер производил 50-й блок,

01:06:13.700 --> 01:06:17.640
он, скорее всего, ну, точнее, два майнера, и они конкурировали, как бы, за этот блок,

01:06:17.720 --> 01:06:21.200
они, скорее всего, оба взяли нашу транзакцию, и тот, и другой.

01:06:21.760 --> 01:06:25.100
И поэтому то, что мы, как бы, откатили и накатили другую версию блока,

01:06:25.580 --> 01:06:29.320
все равно, как бы, от Васи Пети, как бы, 10 эфира перешло.

01:06:29.680 --> 01:06:32.440
Потому что майнеру выгодно включить транзакцию в блок.

01:06:32.680 --> 01:06:35.180
Он получает еще комиссии, как бы, с этих транзакций.

01:06:35.900 --> 01:06:38.480
То есть, вот.

01:06:40.680 --> 01:06:41.340
Понятно ответил?

01:06:41.340 --> 01:06:46.160
То есть, просто, а, прямо вот, чисто откатываются все транзакции в блоке.

01:06:46.200 --> 01:06:47.660
Вот так, как будто бы их не было.

01:06:48.500 --> 01:06:50.140
Да, да, да, да, да, да.

01:06:50.320 --> 01:06:54.280
Что там, кто там, куда там деньги делись, это отдельный вопрос.

01:06:54.720 --> 01:06:58.680
Это как раз отдельный, это как раз и есть атака, так называемой, двойной траты,

01:06:59.040 --> 01:06:59.620
которую там...

01:06:59.720 --> 01:07:03.220
А там еще говорят, там, атака 51%, там, и так далее, и так далее.

01:07:03.400 --> 01:07:05.860
Это все там, курс, мы все это посмотрим обязательно.

01:07:06.740 --> 01:07:09.480
То есть, на это удобно смотреть, как на базу данных,

01:07:09.540 --> 01:07:12.860
как бы, на которую накатываются последовательно, как бы, транзакции.

01:07:13.460 --> 01:07:14.960
Накатываются они вот такими вот пачками,

01:07:14.960 --> 01:07:20.640
и могут откатываться пачками, как бы, обратно, и, соответственно, накатываются дальше.

01:07:21.580 --> 01:07:23.360
С той аналогичной бутшей, можно все откатить.

01:07:24.000 --> 01:07:24.140
А?

01:07:24.640 --> 01:07:26.680
С той аналогичной бутшей, можно все откатить, спасибо.

01:07:27.140 --> 01:07:28.300
Да, да.

01:07:28.600 --> 01:07:28.980
Брончейн.

01:07:28.980 --> 01:07:30.800
можно откатить до любого блока

01:07:30.800 --> 01:07:33.240
назад, как бы, и полностью перепроиграть

01:07:33.240 --> 01:07:35.140
как бы там заново вот эту вот цепочку.

01:07:35.320 --> 01:07:36.780
И, кстати, когда мы будем пробовать,

01:07:36.880 --> 01:07:37.820
у вас будут задания

01:07:37.820 --> 01:07:41.180
по сути, типа, остановиться

01:07:41.180 --> 01:07:43.120
вот на этом блоке, прямо вот в текущем

01:07:43.120 --> 01:07:44.720
состоянии, и

01:07:44.720 --> 01:07:46.580
там что-то наменять, как бы, то есть

01:07:46.580 --> 01:07:48.720
притвориться каким-то там узлом, там еще

01:07:48.720 --> 01:07:50.200
что-нибудь там, значит, поделать.

01:07:50.560 --> 01:07:52.740
То есть здесь повторяемость и вот

01:07:52.740 --> 01:07:54.820
это replayability, она как бы

01:07:54.820 --> 01:07:56.920
полная. То есть мы можем

01:07:56.920 --> 01:07:58.960
всю историю эфира до последней

01:07:58.960 --> 01:08:00.780
транзакции, до последнего бита

01:08:00.780 --> 01:08:02.720
полностью проиграть, как бы, с нулевого

01:08:02.720 --> 01:08:04.760
блока, что биткоина,

01:08:04.880 --> 01:08:07.000
как бы, что эфира, вот, абсолютно

01:08:07.000 --> 01:08:08.940
как бы остановившись на любом блоке

01:08:08.940 --> 01:08:10.820
и всегда будем получать консистентную

01:08:10.820 --> 01:08:12.260
вот эту вот базу данных, как бы,

01:08:12.380 --> 01:08:13.220
state db.

01:08:14.540 --> 01:08:16.640
Вот. Так,

01:08:16.880 --> 01:08:18.480
значит, про genesis,

01:08:19.300 --> 01:08:19.880
значит, про

01:08:19.880 --> 01:08:22.560
такой какой-то такой базовый

01:08:22.560 --> 01:08:23.780
отбор.

01:08:24.940 --> 01:08:26.220
Про это рассказал.

01:08:27.220 --> 01:08:28.400
Так, теперь, соответственно,

01:08:28.960 --> 01:08:31.080
уже, да, еще, короче говоря,

01:08:32.120 --> 01:08:33.400
еще глубже, как бы, да,

01:08:33.480 --> 01:08:35.440
соответственно, погружаемся в эту

01:08:35.440 --> 01:08:37.480
историю. Значит, про вот эту

01:08:37.480 --> 01:08:38.760
вот валидацию блоков.

01:08:39.460 --> 01:08:41.600
То есть про создание, про создание

01:08:41.600 --> 01:08:42.760
и валидацию блоков.

01:08:43.300 --> 01:08:44.560
Что тут важно?

01:08:47.040 --> 01:08:49.400
То есть сам протокол

01:08:49.400 --> 01:08:51.380
биткоина или протокол

01:08:51.380 --> 01:08:53.420
эфира или там еще

01:08:53.420 --> 01:08:55.580
что-то, как бы, это же, это по сути,

01:08:55.980 --> 01:08:56.960
не знаю,

01:08:57.940 --> 01:08:58.940
PDF-документ.

01:08:58.960 --> 01:09:01.000
Я не знаю, там, PDF, там, или как бы

01:09:01.000 --> 01:09:03.160
MD. Потому что, по сути, это просто

01:09:03.160 --> 01:09:04.440
как бы спецификация.

01:09:05.500 --> 01:09:06.920
А эти блокчейны тоже

01:09:06.920 --> 01:09:08.880
отличаются от традиционного софта.

01:09:09.160 --> 01:09:09.680
То есть там

01:09:09.680 --> 01:09:13.000
Ethereum, грубо говоря, вот эти

01:09:13.000 --> 01:09:13.880
вот там его ноды,

01:09:14.600 --> 01:09:17.240
их штук пять или шесть разных.

01:09:17.580 --> 01:09:18.960
Из них там две на Go

01:09:18.960 --> 01:09:20.840
написаны имплементации. Там что-то

01:09:20.840 --> 01:09:22.960
одна на Rusty, как бы, одна на Java,

01:09:23.620 --> 01:09:24.720
одна на C-Sharp.

01:09:25.720 --> 01:09:27.200
Там ее какие-то куски,

01:09:27.200 --> 01:09:28.920
как бы, вот этой логики, как бы, там,

01:09:28.960 --> 01:09:30.820
написаны буквально на всех языках.

01:09:31.440 --> 01:09:33.060
То есть они все просто, по сути,

01:09:33.160 --> 01:09:35.220
следуют вот этой вот спецификации.

01:09:35.900 --> 01:09:37.260
А спецификация, она как раз

01:09:37.260 --> 01:09:39.000
и говорит о том, как

01:09:39.000 --> 01:09:40.940
валидировать блок. Значит,

01:09:41.180 --> 01:09:43.000
я производитель блоков.

01:09:43.160 --> 01:09:44.640
Значит, я хочу этот блок

01:09:44.640 --> 01:09:46.200
произвести. Что я делаю?

01:09:47.440 --> 01:09:49.200
Сейчас я уже буду, наверное, как бы

01:09:49.200 --> 01:09:51.120
говорить про майнинг,

01:09:51.220 --> 01:09:52.840
потому что, ну, это такая, как бы,

01:09:52.900 --> 01:09:55.160
классическая штука. Но если вы смотрели

01:09:55.160 --> 01:09:56.860
программу курса, то там биткоин

01:09:56.860 --> 01:09:58.940
на самом деле находится в самом конце,

01:09:59.060 --> 01:10:00.500
вот,

01:10:00.620 --> 01:10:02.980
потому что, ну, во-первых, как бы, с точки

01:10:02.980 --> 01:10:05.140
зрения кода, там, не очень, как бы,

01:10:05.640 --> 01:10:06.660
сильный, там, это

01:10:06.660 --> 01:10:09.320
интересно, вот, но тем не менее,

01:10:09.420 --> 01:10:10.700
как бы, он очень красивый, такой

01:10:10.700 --> 01:10:12.980
минималистичный, секьюрный, как бы, и

01:10:12.980 --> 01:10:15.160
такой, как бы, клевый.

01:10:15.560 --> 01:10:17.640
Вот. Но конкретно блокчейн-разработчики

01:10:17.640 --> 01:10:19.140
под биткоин особо-то

01:10:19.140 --> 01:10:20.840
не пробуют. Вот. Ну, там,

01:10:21.080 --> 01:10:23.320
ну, есть там, да, там, часть определенная.

01:10:23.800 --> 01:10:24.980
Вот. Сейчас по большей части

01:10:24.980 --> 01:10:26.780
все занимаются именно смарт-контрактами,

01:10:26.820 --> 01:10:28.940
и мы будем с вами заниматься именно смарт-контрактами.

01:10:28.960 --> 01:10:31.000
Вот. Значит,

01:10:31.200 --> 01:10:32.580
что делает, соответственно, майнер?

01:10:33.220 --> 01:10:34.820
Он пошел, соответственно, в

01:10:34.820 --> 01:10:37.100
вот этот вот пул, TX-пул,

01:10:38.220 --> 01:10:38.880
набрал, как бы,

01:10:38.920 --> 01:10:41.000
транзакций, значит,

01:10:42.120 --> 01:10:43.160
в каждой

01:10:43.160 --> 01:10:44.640
транзакции, при этом, как бы,

01:10:44.900 --> 01:10:46.820
в каждой транзакции находится

01:10:46.820 --> 01:10:48.620
комиссия для майнера,

01:10:49.240 --> 01:10:50.980
которая устанавливается чисто

01:10:50.980 --> 01:10:52.640
пользователями. То есть,

01:10:52.760 --> 01:10:54.040
вы, когда шлете

01:10:54.040 --> 01:10:56.740
куда-то там криптовалюту, вам, вы

01:10:56.740 --> 01:10:58.820
указываете, сколько вы за это готовы

01:10:58.820 --> 01:11:00.720
заплатить, и вы платите, конечно же,

01:11:00.760 --> 01:11:02.740
в этой же, как бы, родной криптовалюте.

01:11:03.340 --> 01:11:05.020
Это, на самом деле, довольно важный,

01:11:05.060 --> 01:11:06.800
как бы, поинт. То есть, вы не

01:11:06.800 --> 01:11:09.240
какие-то там деньги платите за транзакцию,

01:11:09.740 --> 01:11:10.940
а у вас строго

01:11:10.940 --> 01:11:12.740
списывается баланс нативной

01:11:12.740 --> 01:11:14.800
криптовалюты, то есть родной для

01:11:14.800 --> 01:11:16.740
данного, для данного

01:11:16.740 --> 01:11:18.540
блокчейна. Там, в эфире это эфир,

01:11:18.980 --> 01:11:21.240
в биткоине это биткоин, там, в пулько-доте

01:11:21.240 --> 01:11:23.280
это дот, там, в салане

01:11:23.280 --> 01:11:24.880
сол, и так далее. То есть, там есть

01:11:24.880 --> 01:11:26.800
в каждом из таких блокчейнов

01:11:26.800 --> 01:11:28.380
есть, как бы, своя, своя

01:11:28.380 --> 01:11:30.060
нативная криптовалюта.

01:11:31.220 --> 01:11:32.600
В общем, просто ее определить, это та,

01:11:32.640 --> 01:11:34.980
в которой платятся комиссии за транзакцию.

01:11:35.860 --> 01:11:36.900
Вот. Потому что майнерам,

01:11:36.920 --> 01:11:38.740
на самом деле, пофигу, что там, какие там

01:11:38.740 --> 01:11:41.040
токены внутри, кто кому там передает,

01:11:41.480 --> 01:11:42.740
каких проектов, им это

01:11:42.740 --> 01:11:44.920
совершенно не важно, как бы, они работают

01:11:44.920 --> 01:11:46.600
исключительно в эфире.

01:11:46.940 --> 01:11:48.960
Поэтому у каждой транзакции есть вот здесь

01:11:48.960 --> 01:11:49.400
вот

01:11:49.400 --> 01:11:52.300
размер комиссии.

01:11:52.880 --> 01:11:54.920
Это будет довольно, довольно

01:11:54.920 --> 01:11:56.700
сложная, на самом деле, штука, мы будем ее

01:11:56.700 --> 01:11:58.180
разбирать, то есть, как это

01:11:58.180 --> 01:11:58.740
сделано.

01:12:00.680 --> 01:12:02.000
Он суммирует,

01:12:02.280 --> 01:12:04.320
соответственно, все, как бы, вот эти вот комиссии,

01:12:05.460 --> 01:12:06.480
получает там

01:12:06.480 --> 01:12:07.680
сумму со всех транзакций,

01:12:08.620 --> 01:12:10.660
добавляет себе coinbase транзакцию,

01:12:11.060 --> 01:12:12.860
там, не знаю, два эфира в подарок,

01:12:13.280 --> 01:12:14.460
вот себе там за блок,

01:12:15.060 --> 01:12:16.740
плюс вот эта вот сумма,

01:12:17.480 --> 01:12:18.100
соответственно,

01:12:18.500 --> 01:12:20.160
всех вот этих вот комиссий.

01:12:20.740 --> 01:12:22.500
Затем он в блок ставит

01:12:22.500 --> 01:12:24.240
обязательно таймстэмп,

01:12:24.240 --> 01:12:26.600
значит, время данного

01:12:26.600 --> 01:12:28.040
блока, потому что у нас, когда

01:12:28.180 --> 01:12:29.340
идет с вами цепочка,

01:12:30.420 --> 01:12:32.580
у нас понятно, что, как бы,

01:12:32.580 --> 01:12:34.380
в каждом блоке есть таймстэмп,

01:12:34.800 --> 01:12:36.600
и он не может быть из

01:12:36.600 --> 01:12:38.560
прошлого, он не может быть далеко из

01:12:38.560 --> 01:12:40.700
будущего, это тоже, как бы, в спецификацию

01:12:40.700 --> 01:12:42.760
внесено. Но при этом

01:12:42.760 --> 01:12:44.440
майнер может немножко его, как бы,

01:12:44.440 --> 01:12:46.520
двигать, вот здесь вот у него уж там,

01:12:46.540 --> 01:12:47.240
как бы,

01:12:47.520 --> 01:12:50.480
разное время. Он может

01:12:50.480 --> 01:12:52.680
по-хорошему выбрать, как бы, там, текущее время,

01:12:52.800 --> 01:12:54.520
или там, минус две секунды, или там,

01:12:54.580 --> 01:12:56.620
плюс десять секунд, то есть это как ему нравится.

01:12:57.420 --> 01:12:58.080
Но самое главное,

01:12:58.180 --> 01:13:00.600
что вот этот вот таймстэмп,

01:13:00.620 --> 01:13:01.960
он зафиксирован в блоке.

01:13:03.500 --> 01:13:04.360
Затем обязательно

01:13:04.360 --> 01:13:06.240
хэш предыдущего

01:13:06.240 --> 01:13:08.560
блока в качестве, да, как бы,

01:13:08.560 --> 01:13:09.440
мета-дана.

01:13:11.080 --> 01:13:12.780
Следующая крайне, как бы,

01:13:12.820 --> 01:13:13.780
важная штуковина,

01:13:14.140 --> 01:13:16.800
это, так называемый,

01:13:16.860 --> 01:13:17.460
state root.

01:13:19.860 --> 01:13:20.660
Про это тоже,

01:13:20.720 --> 01:13:22.560
как бы, надо отдельно поговорить.

01:13:23.020 --> 01:13:24.900
Значит, когда мы с вами обсуждали

01:13:24.900 --> 01:13:26.520
вот эту вот нашу state

01:13:26.520 --> 01:13:27.800
базу данных,

01:13:28.180 --> 01:13:31.100
я там рисовал, соответственно, табличку.

01:13:35.980 --> 01:13:37.180
Я рисовал табличку

01:13:37.180 --> 01:13:38.940
с адресами,

01:13:39.300 --> 01:13:40.800
адрес Васи, как бы,

01:13:40.900 --> 01:13:42.720
баланс эфира его.

01:13:45.780 --> 01:13:46.040
Значит,

01:13:46.360 --> 01:13:49.020
вот эта вот структура

01:13:49.020 --> 01:13:50.860
внутренняя, на самом деле, там есть еще, как бы,

01:13:50.900 --> 01:13:52.600
разные там служебные поля, например,

01:13:52.740 --> 01:13:54.660
вот важное поле nonce. Это такой

01:13:54.660 --> 01:13:56.800
монотонный счетчик,

01:13:57.020 --> 01:13:58.160
который у Васи считается,

01:13:58.180 --> 01:13:59.960
с каждой транзакцией. То есть, каждый раз,

01:14:00.080 --> 01:14:01.820
когда Вася отправляет транзакцию,

01:14:02.620 --> 01:14:04.040
у него, как бы,

01:14:04.300 --> 01:14:06.200
было там единичка, потом стало

01:14:06.200 --> 01:14:07.640
двойка, потом тройка.

01:14:08.480 --> 01:14:09.440
Как думаете, зачем?

01:14:12.620 --> 01:14:14.180
Чтобы не учесть дважды одну транзакцию?

01:14:15.160 --> 01:14:16.100
Да, совершенно верно.

01:14:16.180 --> 01:14:17.880
Чтобы не было атак реплей.

01:14:18.500 --> 01:14:20.020
А то мы взяли, как бы, эту Васину

01:14:20.020 --> 01:14:22.180
транзакцию, которую 10 эфира

01:14:22.180 --> 01:14:23.820
Петя отправляет,

01:14:23.940 --> 01:14:25.980
и, как бы, еще раз отправили, еще раз

01:14:25.980 --> 01:14:28.120
отправили, еще раз отправили.

01:14:28.180 --> 01:14:29.960
И, как бы, и, соответственно, весь эфир

01:14:29.960 --> 01:14:31.840
у него высосали, весь передали Пете.

01:14:32.540 --> 01:14:34.000
Вот. Поэтому обязательно нужен

01:14:34.000 --> 01:14:35.960
nonce. И, конечно же, nonce вот сюда, как бы,

01:14:35.980 --> 01:14:37.300
в транзакцию тоже, как бы,

01:14:37.640 --> 01:14:38.960
тоже включается.

01:14:39.880 --> 01:14:41.660
То есть, для того, чтобы каждая транзакция, как бы,

01:14:41.700 --> 01:14:43.960
она была новой, чтобы электронная подпись,

01:14:44.040 --> 01:14:46.420
как бы, подписывала новую пачку данных.

01:14:47.200 --> 01:14:48.100
И вот эта вот

01:14:48.100 --> 01:14:49.880
внутренняя штуковина, она внутри

01:14:49.880 --> 01:14:51.040
представлена как

01:14:51.040 --> 01:14:54.100
k-value базы данных.

01:14:54.820 --> 01:14:55.420
k-value

01:14:55.420 --> 01:14:56.440
database.

01:14:56.440 --> 01:14:56.680
database.

01:14:58.180 --> 01:15:00.420
Ну, я не знаю, насколько много

01:15:00.420 --> 01:15:02.500
из вас, как бы, имели с ними дело. Скорее всего,

01:15:02.640 --> 01:15:04.540
прям очень много людей, как бы, из вас

01:15:04.540 --> 01:15:06.400
знают, что такое Mongo, или что

01:15:06.400 --> 01:15:08.560
такое Redis, или там

01:15:08.560 --> 01:15:10.500
что такое Tarantula. Ну, то есть,

01:15:10.840 --> 01:15:12.380
это базы данных,

01:15:12.600 --> 01:15:14.520
которые k-value.

01:15:14.920 --> 01:15:16.160
У нас есть

01:15:16.160 --> 01:15:18.300
SQL, там, базы данных,

01:15:18.400 --> 01:15:20.360
большие там, всякие там, MySQL

01:15:20.360 --> 01:15:22.320
с правильными движками, Postgres,

01:15:22.460 --> 01:15:23.200
там, и так далее.

01:15:23.960 --> 01:15:26.280
То есть, это те, у которых прям

01:15:26.280 --> 01:15:28.160
такая прям табличная организация,

01:15:28.180 --> 01:15:30.500
которая работает с кортежами,

01:15:30.820 --> 01:15:32.560
значит, там, всякие инсерты, апдейты,

01:15:32.660 --> 01:15:34.080
делиты, там есть

01:15:34.080 --> 01:15:36.200
транзакции. k-value

01:15:36.200 --> 01:15:38.540
базы данных, они, как бы, сильно проще,

01:15:38.740 --> 01:15:40.320
они сделаны сильно проще

01:15:40.320 --> 01:15:42.240
в угоду скоростям.

01:15:42.480 --> 01:15:44.080
То есть, их используют, чтобы, например,

01:15:44.260 --> 01:15:45.040
там, не знаю, там,

01:15:45.680 --> 01:15:48.480
держать ваш профиль,

01:15:48.680 --> 01:15:50.500
ну, не знаю, там, ваш юзернейм,

01:15:50.600 --> 01:15:51.340
хэш пароля,

01:15:51.920 --> 01:15:53.920
там, не знаю, там, дату рождения. То есть,

01:15:53.960 --> 01:15:56.200
такие, как бы, данные, по которым

01:15:56.200 --> 01:15:58.040
не нужно делать агрегацию. То есть,

01:15:58.180 --> 01:16:00.240
k-value базы данных, это, в первую очередь,

01:16:00.280 --> 01:16:02.040
базы данных, в которых не нужно сделать

01:16:02.040 --> 01:16:04.460
выборку, выбери мне, там,

01:16:04.540 --> 01:16:06.360
тысячу последних покупок

01:16:06.360 --> 01:16:08.080
вот у этого человека, и еще

01:16:08.080 --> 01:16:10.080
посчитай от этого, там, среднее,

01:16:10.720 --> 01:16:12.500
а потом используй это, там, не знаю,

01:16:12.600 --> 01:16:14.280
как какой-нибудь, там, рейтинг, там,

01:16:14.340 --> 01:16:16.260
для того, чтобы ему, там, скидку выписать.

01:16:16.560 --> 01:16:18.580
То есть, там, где нету, как бы, такой агрегации,

01:16:18.660 --> 01:16:20.220
а есть просто прямой запрос, типа,

01:16:20.480 --> 01:16:21.780
дай профиль быстро-быстро,

01:16:22.300 --> 01:16:24.660
обнови профиль быстро-быстро, там, еще что-то.

01:16:24.760 --> 01:16:26.560
То есть, где, там используются

01:16:26.560 --> 01:16:28.060
вот эти, вот, k-value базы данных.

01:16:29.000 --> 01:16:29.200
Значит,

01:16:30.440 --> 01:16:33.040
они в блокчейнах

01:16:33.040 --> 01:16:34.220
используются, то есть, они

01:16:34.220 --> 01:16:35.880
не просто, там, не просто как

01:16:35.880 --> 01:16:38.040
k-value базы данных, а на самом деле под

01:16:38.040 --> 01:16:39.920
всеми, как бы, нодами блокчейн,

01:16:39.980 --> 01:16:42.100
которые вы встретите, там находятся

01:16:42.100 --> 01:16:44.140
продукты, которые называются LevelDB

01:16:44.140 --> 01:16:46.020
и

01:16:46.020 --> 01:16:47.680
ROXDB.

01:16:48.280 --> 01:16:49.860
Это k-value базы данных,

01:16:50.020 --> 01:16:52.020
быстрые, как бы, которые специально

01:16:52.020 --> 01:16:53.280
созданы для таких

01:16:53.280 --> 01:16:56.200
массированных быстрых апдейтов

01:16:56.200 --> 01:16:57.900
и легкого отката.

01:16:57.900 --> 01:16:59.320
Нам же с вами, как бы, нужно

01:16:59.320 --> 01:17:01.700
еще откатывать, да, у нас идут блоки,

01:17:01.760 --> 01:17:03.640
как бы, опять появился какой-нибудь анкл,

01:17:04.120 --> 01:17:05.800
который победил. Нам нужно, значит,

01:17:05.820 --> 01:17:07.540
все это дело быстро откатить.

01:17:07.960 --> 01:17:10.100
Вот в k-value базы данных проще делать

01:17:10.100 --> 01:17:11.660
так называемые снэпшоты.

01:17:12.460 --> 01:17:13.980
То есть, как бы, кусочек, которому

01:17:13.980 --> 01:17:16.020
ты можешь очень быстро откатиться

01:17:16.020 --> 01:17:17.860
и, как бы, начать

01:17:17.860 --> 01:17:19.280
накатывать новые транзакции.

01:17:20.560 --> 01:17:22.180
То есть, все данные

01:17:22.180 --> 01:17:24.200
в блокчейнах вы можете вообще представлять

01:17:24.200 --> 01:17:25.680
как k-value базы данных.

01:17:25.680 --> 01:17:27.000
В основном, как бы.

01:17:27.000 --> 01:17:28.860
Причем ключами являются

01:17:28.860 --> 01:17:30.840
вот эти вот криптографические адреса.

01:17:31.540 --> 01:17:32.640
То есть, у Васи

01:17:32.640 --> 01:17:34.720
10 эфира и такой-то нонс.

01:17:35.060 --> 01:17:36.560
И там еще там та-та-та,

01:17:36.960 --> 01:17:38.960
та-та-та, это мы уже, когда про контракты

01:17:38.960 --> 01:17:39.960
будем с вами говорить.

01:17:40.660 --> 01:17:43.000
То есть, есть набор данных, которые привязаны

01:17:43.000 --> 01:17:44.800
к ключу, а ключами являются вот эти

01:17:44.800 --> 01:17:45.360
вот как раз

01:17:45.360 --> 01:17:48.820
адреса в блокчейне.

01:17:49.520 --> 01:17:50.880
И накатывание, по сути,

01:17:50.980 --> 01:17:53.020
накатывание транзакций

01:17:53.020 --> 01:17:54.360
из вот этого блока

01:17:54.360 --> 01:17:56.920
это изменение,

01:17:57.000 --> 01:17:59.700
ну, это всегда, как бы,

01:17:59.700 --> 01:18:01.600
набор новых ключей, которые нужно

01:18:01.600 --> 01:18:03.400
добавить. Да, там, не знаю, там, майнер

01:18:03.400 --> 01:18:05.300
первый раз в жизни, как бы, произвел блок.

01:18:06.040 --> 01:18:07.420
Вот. И у него теперь, как бы,

01:18:07.460 --> 01:18:09.680
встало там два эфира плюс комиссия.

01:18:09.980 --> 01:18:11.560
Вот. Ну, там, нонс, ноль, там,

01:18:11.660 --> 01:18:13.200
там, еще там что-то.

01:18:13.840 --> 01:18:15.620
А там, не знаю, у Васи

01:18:15.620 --> 01:18:17.840
надо изменить ему баланс.

01:18:17.960 --> 01:18:19.460
Там, не знаю, там, Пете надо изменить

01:18:19.460 --> 01:18:21.400
баланс. То есть, каждый, как бы, блок, это

01:18:21.400 --> 01:18:22.820
набор изменений,

01:18:23.500 --> 01:18:25.180
такой, как бы, атомарный, вот в этой вот

01:18:25.180 --> 01:18:26.840
стейт-базе данных.

01:18:27.000 --> 01:18:29.380
Для того,

01:18:29.520 --> 01:18:31.240
чтобы, ну,

01:18:31.460 --> 01:18:33.660
а теперь представьте, что мы хотим зафиксировать

01:18:33.660 --> 01:18:35.620
состояние вот этой базы данных в хэше.

01:18:36.740 --> 01:18:37.760
То есть, нам что сделать?

01:18:37.880 --> 01:18:39.180
Как бы, прям взять, типа, все

01:18:39.180 --> 01:18:41.560
key-value, отсортировать, фиг знает как,

01:18:41.660 --> 01:18:42.400
по алфавиту,

01:18:43.120 --> 01:18:45.420
положить вот там вот такой плоский файл,

01:18:45.480 --> 01:18:47.360
как бы, от него хэш посчитать.

01:18:47.400 --> 01:18:48.480
Это неудобно.

01:18:49.540 --> 01:18:51.420
Вот. И для этого используется

01:18:51.420 --> 01:18:53.300
структура, которую мы тоже с Вами будем

01:18:53.300 --> 01:18:55.040
отдельно рассматривать, которая называется

01:18:55.040 --> 01:18:56.300
Merkle-3.

01:18:57.000 --> 01:19:00.140
Ну, и вообще,

01:19:00.240 --> 01:19:01.760
на самом деле, там, деревья, как бы,

01:19:01.960 --> 01:19:04.060
в этих базах данных, они довольно

01:19:04.060 --> 01:19:05.840
там часто используются, но

01:19:05.840 --> 01:19:07.620
дерево Меркла, оно в блокчейнах,

01:19:07.620 --> 01:19:09.480
у него особая роль.

01:19:10.060 --> 01:19:11.140
Значит, что это за структура?

01:19:12.560 --> 01:19:13.720
Тоже мы там про ее

01:19:13.720 --> 01:19:15.620
свойства отдельно поговорим,

01:19:15.680 --> 01:19:16.960
пока кратенько.

01:19:17.840 --> 01:19:19.760
Значит, это структура, которая построена

01:19:19.760 --> 01:19:21.340
на криптографических хэшах.

01:19:22.680 --> 01:19:23.600
Ну, предположим,

01:19:23.600 --> 01:19:25.040
давайте так, как бы,

01:19:26.780 --> 01:19:26.980
значит,

01:19:27.000 --> 01:19:29.000
значит, здесь у нас будет адрес Васи,

01:19:29.780 --> 01:19:33.280
адрес Васи, там, не знаю, там, 10 эфира,

01:19:33.800 --> 01:19:35.340
ну, то есть, это просто вот данные,

01:19:35.560 --> 01:19:37.200
как бы, а здесь будет адрес

01:19:37.200 --> 01:19:39.060
Пети, как бы, 8 эфира,

01:19:39.600 --> 01:19:41.260
а здесь будет там адрес Майнера,

01:19:41.360 --> 01:19:43.100
это там 2 эфира, там, и так далее.

01:19:44.000 --> 01:19:45.500
Значит, от этих данных

01:19:45.500 --> 01:19:46.520
считаются хэши,

01:19:46.960 --> 01:19:47.920
криптографические,

01:19:48.580 --> 01:19:51.200
и строится что-то типа бинарного

01:19:51.200 --> 01:19:52.900
дерева, но только вот здесь,

01:19:53.120 --> 01:19:55.000
вот в этих вот узлах

01:19:55.680 --> 01:19:56.760
этого бинарного

01:19:56.760 --> 01:19:57.980
дерева, вот здесь вот,

01:19:58.440 --> 01:19:59.040
находится

01:19:59.040 --> 01:20:02.460
хэш конкатенации

01:20:02.460 --> 01:20:04.340
вот этих двух хэшей, то есть,

01:20:04.420 --> 01:20:06.320
мы их, как бы, там, H1,

01:20:06.460 --> 01:20:08.720
H2, а здесь находится

01:20:08.720 --> 01:20:10.720
хэш, как бы, H3,

01:20:11.120 --> 01:20:11.840
H4.

01:20:12.920 --> 01:20:14.200
То есть, они слепляются,

01:20:14.500 --> 01:20:16.440
и, как бы, слепляются уже, как бы,

01:20:16.560 --> 01:20:18.460
идут до корневого элемента,

01:20:18.540 --> 01:20:20.000
который, как бы, называется рут.

01:20:20.860 --> 01:20:22.560
Штука широко используемая,

01:20:22.560 --> 01:20:24.860
она, кстати, используется и в торрентах,

01:20:24.940 --> 01:20:26.320
тоже вовсю, как бы, потому что,

01:20:26.320 --> 01:20:28.340
когда вы качаете

01:20:28.340 --> 01:20:30.460
с какого-то другого компа

01:20:30.460 --> 01:20:32.080
кусочек, там, фильма,

01:20:32.280 --> 01:20:33.760
там, я не знаю, там, небольшой,

01:20:34.280 --> 01:20:36.200
вам бы по-хорошему нужно доказательство

01:20:36.200 --> 01:20:38.220
то, что этот кусочек принадлежит, как бы,

01:20:38.220 --> 01:20:40.240
к этому фильму, а не то, что

01:20:40.240 --> 01:20:42.340
вам скормили какую-то хренатень.

01:20:43.080 --> 01:20:44.160
Вот. И вот это

01:20:44.160 --> 01:20:45.480
доказательство того, что

01:20:45.480 --> 01:20:48.000
только что скачанные, там, не знаю,

01:20:48.120 --> 01:20:49.920
несколько килобайт данных,

01:20:50.600 --> 01:20:52.280
что эти

01:20:52.280 --> 01:20:53.960
несколько килобайт данных, они, как бы,

01:20:53.960 --> 01:20:55.860
относятся к фильму, тоже делаются при помощи

01:20:55.860 --> 01:20:57.300
Меркел-дерева.

01:20:58.140 --> 01:20:59.180
Значит, чем оно хорошо?

01:20:59.820 --> 01:21:01.840
Оно хорошо тем, что мы можем все

01:21:01.840 --> 01:21:03.980
вот эти вот наши значения

01:21:03.980 --> 01:21:05.760
сохранить, по сути,

01:21:05.820 --> 01:21:06.620
в одном числе

01:21:06.620 --> 01:21:09.860
и доказывать то, что эти

01:21:09.860 --> 01:21:12.200
значения находятся в этом листе при помощи

01:21:12.200 --> 01:21:13.840
так называемого Меркел-пруф.

01:21:15.180 --> 01:21:15.460
Значит,

01:21:15.760 --> 01:21:17.760
как выглядит Меркел-пруф? Я хочу доказать,

01:21:17.940 --> 01:21:18.580
что Петя,

01:21:18.840 --> 01:21:21.640
что Петя с балансом 8

01:21:21.640 --> 01:21:23.920
находится вот в этом вот

01:21:23.920 --> 01:21:25.840
дереве. И у меня для проверки,

01:21:25.860 --> 01:21:27.180
у меня есть только вот одно вот это,

01:21:27.340 --> 01:21:29.220
одно только число.

01:21:29.800 --> 01:21:31.800
Что я делаю, чтобы доказать, как бы, что я

01:21:31.800 --> 01:21:32.980
в этом листе нахожусь?

01:21:33.780 --> 01:21:35.820
Я создаю доказательство

01:21:35.820 --> 01:21:37.440
следующего вида. Значит, я

01:21:37.440 --> 01:21:39.740
беру там, соответственно, хэш от

01:21:39.740 --> 01:21:41.500
моего вот этого Пети, как бы,

01:21:41.740 --> 01:21:43.620
и восьмерки. Вот он вот этот вот

01:21:43.620 --> 01:21:44.680
хэш. Это,

01:21:45.620 --> 01:21:47.540
значит, беру его.

01:21:48.780 --> 01:21:49.780
Меркел-доказательство

01:21:49.780 --> 01:21:50.460
это массив.

01:21:51.940 --> 01:21:53.760
Значит, в этот

01:21:53.760 --> 01:21:55.100
массив я кладу,

01:21:55.860 --> 01:21:58.180
вот этот вот хэш, которого мне не хватает,

01:21:58.240 --> 01:21:59.340
как бы, h1.

01:22:01.300 --> 01:22:01.780
Теперь

01:22:01.780 --> 01:22:03.240
я смогу, как бы, взять

01:22:03.240 --> 01:22:05.560
вот этот хэш, вот этот вот,

01:22:05.640 --> 01:22:07.600
и вот это вычислить самостоятельно.

01:22:07.860 --> 01:22:09.660
То есть мне не нужно это сообщать.

01:22:10.040 --> 01:22:11.660
Но для того, чтобы добраться до рута,

01:22:11.700 --> 01:22:13.800
мне не хватает вот этого еще хэша.

01:22:14.120 --> 01:22:15.700
И поэтому я беру еще,

01:22:15.800 --> 01:22:16.720
как бы, хэш от

01:22:16.720 --> 01:22:19.420
h3 и h4.

01:22:20.820 --> 01:22:21.660
Получается такое,

01:22:21.660 --> 01:22:22.720
как бы. Ну, то есть

01:22:22.720 --> 01:22:25.480
я, Меркел-доказательство,

01:22:25.860 --> 01:22:27.740
это массив хэшей, которых

01:22:27.740 --> 01:22:29.720
не хватает для того, чтобы

01:22:29.720 --> 01:22:32.320
построить полный путь по Меркел-дереву

01:22:32.320 --> 01:22:33.000
до рута.

01:22:34.580 --> 01:22:35.660
И получается, что

01:22:35.660 --> 01:22:38.620
я таким образом,

01:22:38.700 --> 01:22:39.580
как бы, доказал,

01:22:40.160 --> 01:22:41.540
то, что вот этот вот листик

01:22:41.540 --> 01:22:43.700
принадлежит, как бы, вот этому дереву.

01:22:43.980 --> 01:22:46.000
И доказал это, предоставив

01:22:46.000 --> 01:22:47.300
o

01:22:47.300 --> 01:22:49.900
от, соответственно, логарифм 2n

01:22:49.900 --> 01:22:52.300
хэшей.

01:22:52.300 --> 01:22:54.380
То есть уровни

01:22:54.380 --> 01:22:55.740
в этом дереве, логарифм,

01:22:55.860 --> 01:22:57.940
2n, вот. И, соответственно, я должен

01:22:57.940 --> 01:23:00.300
логарифм 2n хэшей, как бы, предоставить

01:23:00.300 --> 01:23:01.720
для того, чтобы доказать, что

01:23:01.720 --> 01:23:03.340
какой-то лист находится в этом дереве.

01:23:04.560 --> 01:23:05.860
То есть, когда

01:23:05.860 --> 01:23:07.400
я здесь пишу, как бы, state root,

01:23:08.020 --> 01:23:09.420
это, по сути, как раз, вот,

01:23:09.560 --> 01:23:12.000
root всех ключей, значений

01:23:12.000 --> 01:23:14.220
вот этой вот

01:23:14.220 --> 01:23:15.820
базы данных. У нас

01:23:15.820 --> 01:23:17.980
произошла какая-то транзакция,

01:23:18.180 --> 01:23:19.640
значит, с одного списали,

01:23:19.640 --> 01:23:21.440
там, вот этого, у этого стало

01:23:21.440 --> 01:23:23.140
8, а у этого стало 10.

01:23:23.800 --> 01:23:25.840
Хэши изменились, дерево,

01:23:25.860 --> 01:23:27.760
как бы, изменилось, как бы, и я

01:23:27.760 --> 01:23:29.040
пишу сюда, как бы, новый

01:23:29.040 --> 01:23:30.360
state root,

01:23:31.660 --> 01:23:33.360
вот, потому что, как бы, дерево, оно

01:23:33.360 --> 01:23:35.720
изменило свою конфигурацию.

01:23:35.820 --> 01:23:37.700
Там для этого еще есть специальные

01:23:37.700 --> 01:23:39.440
еще модификации различные, всяких

01:23:39.440 --> 01:23:42.080
меркл-деревьев, вот, которые используются.

01:23:42.880 --> 01:23:43.920
Я правильно понимаю, что

01:23:43.920 --> 01:23:45.760
оно будет персистентное, ну, и

01:23:45.760 --> 01:23:47.180
то есть копируется каждый раз полностью,

01:23:47.460 --> 01:23:49.740
новая версия отдельно, или как

01:23:49.740 --> 01:23:52.000
хранится? Новая версия

01:23:52.000 --> 01:23:53.660
дерева? Да, да, да.

01:23:54.060 --> 01:23:55.840
Не, ну, дерево строится, как бы,

01:23:55.860 --> 01:23:57.780
в самом, как бы, ну, в памяти,

01:23:57.880 --> 01:23:59.780
как бы, нода, она, конечно, держит, как бы,

01:23:59.800 --> 01:24:01.720
все вот эти вот листы, как бы, в голове.

01:24:02.680 --> 01:24:03.680
Я имею в виду, и когда оно

01:24:03.680 --> 01:24:05.600
обновляется, то старое остается, или только

01:24:05.600 --> 01:24:07.560
обновляется еще? Не, старое остается в

01:24:07.560 --> 01:24:09.580
прошлом блоке, ну, то есть

01:24:09.580 --> 01:24:11.620
где-то в прошлом блоке был, как бы,

01:24:12.080 --> 01:24:13.800
старый state root.

01:24:16.020 --> 01:24:17.720
В общем, ну, по сути, это,

01:24:17.800 --> 01:24:19.720
как бы, хэш базы данных, вот этого,

01:24:19.820 --> 01:24:21.100
вот этой state database,

01:24:21.480 --> 01:24:23.560
просто организован при помощи вот такого,

01:24:23.560 --> 01:24:25.640
такого вида структур данных.

01:24:25.860 --> 01:24:26.720
Хорошо, спасибо.

01:24:27.860 --> 01:24:28.800
В принципе,

01:24:29.400 --> 01:24:31.660
точно так же, как бы, хранятся

01:24:31.660 --> 01:24:33.420
и tx root,

01:24:34.240 --> 01:24:36.060
то есть, по похожему

01:24:36.060 --> 01:24:37.920
же принципу, транзакции

01:24:37.920 --> 01:24:40.220
в блоке, они тоже организованы

01:24:40.220 --> 01:24:41.700
в меркл дерева,

01:24:42.180 --> 01:24:43.380
и тоже у него есть root,

01:24:43.740 --> 01:24:45.460
и, то есть, вы можете доказать, что

01:24:45.460 --> 01:24:47.720
моя транзакция, как бы, находится

01:24:47.720 --> 01:24:49.520
в этом блоке,

01:24:50.040 --> 01:24:52.140
не предъявляя весь блок,

01:24:52.140 --> 01:24:54.080
а достаточно, как бы, просто предъявить

01:24:54.080 --> 01:24:55.800
tx root и доказать,

01:24:55.860 --> 01:24:57.640
вместо того, что ваша транзакция, как бы,

01:24:57.720 --> 01:25:00.060
она к этому tx root относится.

01:25:00.200 --> 01:25:02.260
То есть, не надо, как бы, выкачивать там весь блок,

01:25:02.700 --> 01:25:03.820
просматривать, смотреть,

01:25:03.960 --> 01:25:05.540
есть ли там, как бы, транзакция или нет,

01:25:05.620 --> 01:25:08.000
как бы, вы можете спокойно доказать,

01:25:08.000 --> 01:25:09.940
что транзакция в этом блоке есть,

01:25:10.400 --> 01:25:11.760
и сделать это за

01:25:11.760 --> 01:25:13.920
all log 2n, как бы, транзакции.

01:25:15.200 --> 01:25:16.580
Не очень страшно.

01:25:17.880 --> 01:25:18.980
Вот. Значит,

01:25:19.280 --> 01:25:21.020
так.

01:25:22.040 --> 01:25:23.740
Там еще вопрос в чате зума был

01:25:23.740 --> 01:25:24.680
некоторое время назад.

01:25:25.860 --> 01:25:28.140
Сейчас посмотрим. Так, вы вопросы

01:25:28.140 --> 01:25:29.760
лучше перебивайте.

01:25:32.500 --> 01:25:34.040
Похоже на UUID.

01:25:36.360 --> 01:25:38.400
Это я про хэш спрашивал, когда говорили,

01:25:38.540 --> 01:25:40.320
что он отличается очень сильно,

01:25:40.380 --> 01:25:41.820
и что одинаковые там не могут быть.

01:25:41.820 --> 01:25:43.760
Да, да, да. Так эти все UUID,

01:25:43.860 --> 01:25:46.480
они на этих хэшах же и построены,

01:25:46.560 --> 01:25:47.620
как бы, точно так же.

01:25:47.960 --> 01:25:50.100
На самом деле, вообще-то,

01:25:50.100 --> 01:25:51.900
здесь ничего прям какого-то там

01:25:51.900 --> 01:25:54.480
прям супер других алгоритмов

01:25:54.480 --> 01:25:55.760
нету. Здесь, по сути,

01:25:55.860 --> 01:25:58.040
просто комбинация большого количества

01:25:58.040 --> 01:25:59.700
всего, что было до этого сделано.

01:26:00.700 --> 01:26:01.740
Вот. Ну, и, кстати говоря,

01:26:01.840 --> 01:26:04.240
говоря о развитии, да, блокчейна,

01:26:04.680 --> 01:26:05.920
почему раньше-то, как бы,

01:26:05.920 --> 01:26:08.080
его не было? Да потому,

01:26:08.220 --> 01:26:09.520
что у вас не было компов, которые

01:26:09.520 --> 01:26:11.760
могут взять и тысячу электронных подписей

01:26:11.760 --> 01:26:13.860
проверить. Это офигеть,

01:26:14.000 --> 01:26:15.300
какая операция. Там вы

01:26:15.300 --> 01:26:17.540
на Raspberry Pi, короче,

01:26:17.640 --> 01:26:19.420
замучаетесь подписывать транзакцию.

01:26:19.520 --> 01:26:21.320
Точнее, на чем-то прям

01:26:21.320 --> 01:26:23.400
совсем мелком, не знаю, там, на

01:26:23.400 --> 01:26:25.840
орудина, например, сделать, как бы, подпись,

01:26:25.920 --> 01:26:27.720
транзакция, очень сложно,

01:26:27.860 --> 01:26:29.460
потому что, как бы, огромная битность,

01:26:29.600 --> 01:26:31.460
очень мощные вычисления. Пока

01:26:31.460 --> 01:26:33.860
компы не доросли, как бы, до вот этих мощностей,

01:26:33.940 --> 01:26:35.780
блокчейны, по сути, были невозможны.

01:26:36.460 --> 01:26:37.600
Вот. Они сейчас стали возможны,

01:26:37.640 --> 01:26:39.640
потому что, чем отличается

01:26:39.640 --> 01:26:41.580
блокчейн-нода, она

01:26:41.580 --> 01:26:43.420
с точки зрения софта, это, по сути, как

01:26:43.420 --> 01:26:45.540
монго, не знаю, как монго,

01:26:45.620 --> 01:26:47.180
как бы, такая, которая крутится,

01:26:47.740 --> 01:26:49.480
которая просто с другими монгами

01:26:49.480 --> 01:26:51.040
соединена через peer-to-peer.

01:26:52.080 --> 01:26:53.400
И при этом это монго,

01:26:53.480 --> 01:26:55.420
у которой жрет очень много процессора,

01:26:55.860 --> 01:26:57.840
что ей постоянно надо криптографические

01:26:57.840 --> 01:26:59.920
штуки делать. Ей надо хэши вычислять,

01:27:00.440 --> 01:27:01.700
проверять, как бы, вот эти вот

01:27:01.700 --> 01:27:04.040
мертвые доказательства, проверять

01:27:04.040 --> 01:27:05.740
электронные подписи. То есть она все время

01:27:05.740 --> 01:27:07.820
работает с числами

01:27:07.820 --> 01:27:10.160
огромной битности. Поэтому все блокчейн-ноды,

01:27:10.160 --> 01:27:12.000
они потребляют процессор прямо

01:27:12.000 --> 01:27:12.700
изо всех сил.

01:27:13.900 --> 01:27:16.300
Так. Зачем при отправке транзакции

01:27:16.300 --> 01:27:17.740
мы указываем хэш-блока,

01:27:18.900 --> 01:27:20.340
если блок

01:27:20.340 --> 01:27:21.920
из транзакции собирает вреда?

01:27:22.000 --> 01:27:24.220
Нет, мы при отправке транзакции не указываем

01:27:24.220 --> 01:27:24.900
хэш-блока,

01:27:25.860 --> 01:27:27.840
и как бы непонятно, как бы, хэш какого

01:27:27.840 --> 01:27:29.300
блока мы должны, как бы, указать.

01:27:30.080 --> 01:27:31.740
Вот. Потому что, во-первых, как бы, нас еще

01:27:31.740 --> 01:27:32.700
в блок не включили.

01:27:33.640 --> 01:27:35.760
Мы можем, наверное, опционально указать,

01:27:35.860 --> 01:27:37.360
типа, хочу, как бы, транзакцию

01:27:37.360 --> 01:27:39.740
после этого блока, как бы, но

01:27:39.740 --> 01:27:42.060
в транзакциях хэша-блока

01:27:42.060 --> 01:27:44.060
нет никакого. Там просто

01:27:44.060 --> 01:27:44.820
написано, типа,

01:27:46.040 --> 01:27:47.880
вот нонс там есть, как бы, то есть

01:27:47.880 --> 01:27:49.540
я хочу увеличить счетчик

01:27:49.540 --> 01:27:50.680
своих транзакций.

01:27:52.000 --> 01:27:53.880
Вот. Так. На это

01:27:53.880 --> 01:27:55.840
ответил. Поехали дальше.

01:27:55.860 --> 01:27:58.020
Так, у нас 13.28.

01:28:00.120 --> 01:28:01.680
Так, у всех, короче,

01:28:01.840 --> 01:28:04.060
голова закипит, поэтому предлагаю

01:28:04.060 --> 01:28:06.080
объявить перерыв. Давайте

01:28:06.080 --> 01:28:08.840
на 15 минут.

01:28:09.960 --> 01:28:11.980
Сегодня 13.30,

01:28:12.380 --> 01:28:13.780
в 13.45 продолжим.

01:28:14.740 --> 01:28:16.120
Сколько вообще по времени лекция

01:28:16.120 --> 01:28:17.940
планируется? Ну, вообще,

01:28:18.020 --> 01:28:20.000
все эти лекции планируются по две

01:28:20.000 --> 01:28:21.980
пары. Хорошо.

01:28:23.140 --> 01:28:24.500
Курс здоровый.

01:28:25.860 --> 01:28:27.860
Спасибо.

01:28:55.860 --> 01:28:57.860
Спасибо.

01:28:57.860 --> 01:28:59.860
Спасибо.

01:29:25.860 --> 01:29:37.860
The end.

01:29:48.080 --> 01:29:50.080
Спасибо.

01:29:55.860 --> 01:30:25.840
Субтитры создавал DimaTorzok

01:30:25.860 --> 01:30:55.840
Добавил субтитры DimaTorzok

01:30:55.860 --> 01:31:25.840
Субтитры создал DimaTorzok

01:31:25.860 --> 01:31:55.860


01:31:55.860 --> 01:32:25.860


01:32:25.860 --> 01:32:55.860


01:32:55.860 --> 01:33:25.860


01:33:25.860 --> 01:33:55.860


01:33:55.860 --> 01:34:25.860


01:34:25.860 --> 01:34:55.860


01:34:55.860 --> 01:35:25.860


01:35:25.860 --> 01:35:55.860


01:35:55.860 --> 01:36:25.860


01:36:25.860 --> 01:36:55.860


01:36:55.860 --> 01:37:25.860


01:37:25.860 --> 01:37:55.860


01:37:55.860 --> 01:38:25.860


01:38:25.860 --> 01:38:55.860


01:38:55.860 --> 01:39:25.860


01:39:25.860 --> 01:39:55.860


01:39:55.860 --> 01:40:25.860


01:40:25.860 --> 01:40:55.860


01:40:55.860 --> 01:41:25.860


01:41:25.860 --> 01:41:55.840
Субтитры создал DimaTorzok

01:41:55.860 --> 01:42:25.860


01:42:25.860 --> 01:42:55.860


01:42:55.860 --> 01:43:25.860


01:43:25.860 --> 01:43:55.860


01:43:55.860 --> 01:44:25.840
Субтитры создал DimaTorzok

01:44:25.860 --> 01:44:55.840
Субтитры создал DimaTorzok

01:44:55.860 --> 01:45:25.840
Субтитры создал DimaTorzok

01:45:25.860 --> 01:45:55.840
Субтитры создал DimaTorzok

01:45:55.860 --> 01:46:25.840
Субтитры создал DimaTorzok

01:46:25.860 --> 01:46:55.840
Субтитры создал DimaTorzok

01:46:55.860 --> 01:47:25.840
Субтитры создал DimaTorzok

01:47:25.860 --> 01:47:55.840
Субтитры создал DimaTorzok

01:47:55.860 --> 01:48:25.840
Субтитры создал DimaTorzok

01:48:25.860 --> 01:48:49.680
Субтитры создал DimaTorzok

01:48:49.740 --> 01:48:51.660
Субтитры создал DimaTorzok

01:48:51.660 --> 01:48:51.800
Субтитры создал DimaTorzok

01:48:51.800 --> 01:48:54.380
Субтитры создал DimaTorzok

01:48:54.380 --> 01:48:54.480
Субтитры создал DimaTorzok

01:48:54.480 --> 01:48:54.620
Субтитры создал DimaTorzok

01:48:54.620 --> 01:48:54.960
Субтитры создал DimaTorzok

01:48:54.960 --> 01:48:55.000
Субтитры создал DimaTorzok

01:48:55.000 --> 01:48:55.020
Субтитры создал DimaTorzok

01:48:55.020 --> 01:48:55.120
Субтитры создал DimaTorzok

01:48:55.120 --> 01:48:55.160
Субтитры создал DimaTorzok

01:48:55.160 --> 01:48:55.260
Субтитры создал DimaTorzok

01:48:55.260 --> 01:48:55.320
Субтитры создал DimaTorzok

01:48:55.320 --> 01:48:55.340
Субтитры создал DimaTorzok

01:48:55.340 --> 01:49:03.900
появляется как бы своя собственная цепочка вот то есть это тогда бы вот эта штука рыба

01:49:03.900 --> 01:49:11.480
отпочковывается история которая была описана с итериум и эфириум классика она выглядела

01:49:11.480 --> 01:49:18.800
следующим образом там в определенном блоке здесь он был там совершенку и там хак большой что тащили

01:49:18.800 --> 01:49:28.300
там сок там десятка миллионов долларов и начиная с этого блока команда эфира она сказала как бы там

01:49:28.300 --> 01:49:33.620
мы соответственно выпилим адреса этого хакера то есть просто добавим типы костыль что начиная с

01:49:33.620 --> 01:49:40.300
такого-то блока вот это вот там не за баланс этого хакера равен нулю но я утрирую короче того что

01:49:40.300 --> 01:49:48.700
каким способом ничего не митингирует хак сделать так как будто бы его и не было и попросили как бы

01:49:48.700 --> 01:49:55.780
всех майнеров эфира как бы обновить этот софт и майнеры обновили из них большинство как бы

01:49:55.780 --> 01:50:04.600
обновила этот софт и конечно пошла как бы пошла цепочка эфира может работать а другая часть

01:50:04.600 --> 01:50:10.140
которая назвали себя эфириум классика не сказали нет мы ничего мы вот эти костыли впиливать не

01:50:10.140 --> 01:50:17.880
будем фиксинг с хаком типа код и зло типа и взломали так взломали как бы все как бы мы

01:50:17.880 --> 01:50:18.680
будем как бы

01:50:18.680 --> 01:50:27.080
придерживаться не будем эти костыли впиливать и понятно что у тех которые перешли как бы те

01:50:27.080 --> 01:50:34.400
которые были и т.х. для них как бы вот блок эти си как бы следующий он для них невалидный потому

01:50:34.400 --> 01:50:42.820
что в нем как бы есть вот этот адрес то есть то есть он для вот этого как бы для эфира как

01:50:42.820 --> 01:50:48.680
бы невалидные поэтому майнеры как бы и здесь и они по сути отпачковались начали стартовать

01:50:48.680 --> 01:50:50.660
про PIP sono

01:50:50.660 --> 01:50:52.600
realise

01:50:52.600 --> 01:50:53.740
так

01:50:53.740 --> 01:50:55.240
сейчас

01:50:55.260 --> 01:50:56.360
вот

01:50:56.360 --> 01:50:57.440
туда

01:50:57.440 --> 01:50:58.240
moved

01:50:58.240 --> 01:50:59.780
эфир

01:50:59.780 --> 01:51:02.640
не

01:51:03.180 --> 01:51:04.200
уверенно что

01:51:04.200 --> 01:51:05.000
разработка

01:51:05.000 --> 01:51:05.980
и

01:51:05.980 --> 01:51:06.780
melt

01:51:06.780 --> 01:51:07.940
если

01:51:07.940 --> 01:51:08.820
сейчас

01:51:08.820 --> 01:51:11.080
не

01:51:13.600 --> 01:51:14.580
есть

01:51:14.580 --> 01:51:15.900
так

01:51:15.900 --> 01:51:16.840
reinstall

01:51:16.840 --> 01:51:17.640
на

01:51:17.640 --> 01:51:18.540
этот

01:51:18.540 --> 01:51:25.540
уже дальше как бы зависит от того как бы как она изменилась то есть она будет она принимать от

01:51:25.540 --> 01:51:32.040
других майнеров со старой версии как бы их блоки будет или не будет лишь насколько этот хардфорк

01:51:32.040 --> 01:51:40.020
вот здесь вот как бы нормально там грамотно запрограммирован то есть это рассматривать

01:51:40.020 --> 01:51:44.820
нужно именно с точки зрения не знаю там архитектуры что я не знаю там базы данных

01:51:44.820 --> 01:51:50.920
который меняется например там схема данных предположим что у вас там не знаю там 10

01:51:50.920 --> 01:51:55.320
серверов вас данных они работают как бы с одной и той же базы данных вы в этой базе

01:51:55.320 --> 01:52:00.600
данных меняете там не знаю там название какой-нибудь колонки и у вас те кто софт

01:52:00.600 --> 01:52:05.600
не обновили как бы они падают как бы а те кто обновили как бы они они совместные мне

01:52:05.600 --> 01:52:11.040
не падает вот те которые упали можешь сказать они свой строят и бы хардфорк

01:52:11.040 --> 01:52:14.760
этой базы в камуф которые конечно не

01:52:14.760 --> 01:52:22.520
работает но те как бы тем не менее все равно как бы hard for вот из ну соответственно как раз вот

01:52:22.520 --> 01:52:30.380
после обновления но поскольку мы чуть-чуть как вы посмотрели с вами как хардфорки происходит

01:52:30.380 --> 01:52:39.760
по сути можно описать как бы как происходит атаки на блокчейна вот ну и над их смысле что означает

01:52:39.760 --> 01:52:46.080
что блокчейн как бы перестал работать смотрите представьте что у меня есть блок вот я здесь как

01:52:46.080 --> 01:52:52.540
бы там не знаю там у всех там по два блока и вот я предлагаю как бы свой вот этого третий блок и

01:52:52.540 --> 01:53:02.920
в нем внутри есть определенная транзакция эта транзакция предположим заставляет ну давайте

01:53:02.920 --> 01:53:08.980
просто для примера для примера короче пускай она берет и записывает куда-нибудь там вот в

01:53:08.980 --> 01:53:09.740
нашу вот эту вот

01:53:09.740 --> 01:53:22.280
табличка короче в которой там типа у вас там не знаю 100 эфира она записывает она дает васи как бы

01:53:22.280 --> 01:53:31.280
рандомное число эфира там не знаю там плюс короче говоря 03 или там или 04 ну просто как бы

01:53:31.280 --> 01:53:38.340
предположим такая транзакция существует и возможно как бы блокчейне что произойдет соответственно

01:53:38.340 --> 01:53:39.680
этот блок он как бы

01:53:39.740 --> 01:53:48.160
разойдется по другим валидатором они его скачают они возьмут вот эту транзакцию выполнят вот этот

01:53:48.160 --> 01:53:57.160
вот рандом и запишут каждый запишет свою стоит на датэбэйс разные значения по одному как бы вася как

01:53:57.160 --> 01:54:05.120
бы у него станет там 10 там и 1 у этого станет 10 и 3 у этого 10 6 там и так далее у всех как рандом

01:54:05.120 --> 01:54:08.180
а сработает по разному затем что они будут сделать чтобы отnyt Fronk разрыhen clickdata заканчивать

01:54:08.180 --> 01:54:14.500
сделать что они будут делать они после этого когда начнут настраивать над этим блоком как

01:54:14.500 --> 01:54:22.820
бы следующий ему нужно будет из предыдущего взять state root то есть состояние как бы база данных

01:54:22.820 --> 01:54:33.320
она у всех разная она у всех разная и получается как бы что как бы и хэш вот этого блока уже другой

01:54:33.320 --> 01:54:38.440
то есть надо как бы настраивать другим ним и получится так и ситуация что все как бы начнут

01:54:38.440 --> 01:54:46.400
строить свой собственный блокчейн свою собственную версию пела бог чейна это был такую вот такую там

01:54:46.400 --> 01:54:52.960
еще одно если произойдет еще одна транзакция когда он опять раздвоиться постановам на 2

01:54:52.960 --> 01:54:57.960
там над действие так и так далее так далее но выглядеть это будет очень просто просто

01:54:57.960 --> 01:55:03.080
либо просто становится производство блоков вот или как бы там не знают а

01:55:03.080 --> 01:55:09.020
майнер насчет манить блоки как бы сам в себя как бы один но на самом деле сам он это ну то есть

01:55:09.020 --> 01:55:17.720
не потянет как бы никакой майнеру в одиночку как бы маленького к вот и поэтому как бы был

01:55:17.720 --> 01:55:25.480
член остановится из этого вытекает такое самое как бы главное такое основное просто требования

01:55:25.480 --> 01:55:33.580
к процессе лгут транзакции в членах транзакции в членах они процесса строго детерминированно

01:55:33.580 --> 01:55:40.000
значит что это значит компьютер сайт строго детерминированно это означает что на одном и

01:55:40.000 --> 01:55:49.120
том же им пути ваша функция у которых не знаю ваша программа грубо говоря исполняется порождает один

01:55:49.120 --> 01:55:55.420
и только один output в любом на любой архитектуре на любом процессы

01:55:55.480 --> 01:56:01.780
в любое время там дня и ночи то есть неважно как бы ну помимо импутов давать

01:56:01.780 --> 01:56:09.400
уж соответственно если мы говорим о блокчейне да то там еще есть предыдущие данные блокчейна

01:56:09.400 --> 01:56:16.800
блокчейн да это ну то есть там есть то как бы то что мы можем взять там из предыдущих

01:56:16.800 --> 01:56:25.360
блоков внутри этой программы использовать ну да давайте так просто смотрите например

01:56:25.360 --> 01:56:30.820
input n квадрат короче output это детерминированная функция

01:56:30.820 --> 01:56:48.100
да хорошо а если например вот такая вот там не знаю там 10 плюс текущее время нет можно

01:56:48.100 --> 01:56:55.220
вопрос дизайнерами имеется ввиду пью чисто ешь да нет нет нет как раз здесь кстати говоря

01:56:55.360 --> 01:57:01.600
в в smart контрактах есть отдельный как бы пьюр это значит что она еще не обращается как бы никуда

01:57:01.600 --> 01:57:08.640
она не читает никаких внешних данных как бы вопроса там не знаю там работает то есть пьюр функция эта

01:57:08.640 --> 01:57:13.220
функция которая работает только со своими аргументами вот только с тем что вот здесь

01:57:13.220 --> 01:57:20.840
находится все больше ничего не делает вот этот пьюр то есть чистая функция да да да это вот

01:57:20.840 --> 01:57:25.160
smart контрактов у него прям есть модификатор который называется пьюр это там если вы считаете

01:57:25.360 --> 01:57:32.260
не знаю квадратный корень или там не знаю там математик какую-то а если она лезет соответственно

01:57:32.260 --> 01:57:38.300
куда-то там блокчейн ну например на предыдущие данные которые были записаны блокчейне ну например

01:57:38.300 --> 01:57:48.600
ей нужно сделать например баланс там не знаю там баланс вася увеличить на 5 такая функция

01:57:48.600 --> 01:58:01.500
будет детерминированная ну смотри такая функция будет да еще раз но будет ли функция который

01:58:01.500 --> 01:58:07.900
увеличивает баланс вася на 5 ну да должна быть но при этом они чистят потому что она

01:58:07.900 --> 01:58:13.860
это ходит ну а она где она действительно будет детерминированная потому что у нее есть уже как

01:58:13.860 --> 01:58:18.580
бы до этого как бы вот это вот состояние четко зафиксированы то есть сколько ты

01:58:18.580 --> 01:58:24.340
там у вас там на балансе это на работе будет всегда одним и тем и тем же способом и самое

01:58:24.340 --> 01:58:31.460
главное она будет порождать тот же самый вот этот стоит div вот так вот как бы но она будет

01:58:31.460 --> 01:58:37.720
порождать грубо говоря одни и те один и тот же набор изменений вот этих вот ключей значений то

01:58:37.720 --> 01:58:45.280
есть там у вас и как бы будет там плюс 5 как бы этому вызывающую чем там комиссия так сейчас

01:58:45.280 --> 01:58:48.220
пропал то есть

01:58:48.580 --> 01:58:57.400
надеюсь установилась вот то есть как бы будет порождать один и тот же одно и то же изменения

01:58:57.400 --> 01:59:03.400
в стейте в точности баланс увеличится на 5 там с кого-то там комиссии снимут и так далее но все

01:59:03.400 --> 01:59:08.820
это на основании я еще раз как бы подчеркиваю на основании данных которые есть блокчейне то

01:59:08.820 --> 01:59:17.180
есть никаких там внешних обращений быть не может в этих транзакциях ну и кстати текущее время ну то

01:59:18.580 --> 01:59:24.840
есть Zero В�ы это действительно не детерминированный история но когда майнер собирает блок и вставляет к

01:59:24.840 --> 01:59:32.600
него транзакцию которая берет как бы текущее время он же вставляет сюда timestamp поэтому эта штука в

01:59:32.600 --> 01:59:38.300
принципе годится то есть конечно текущее время разумеется в контрактах есть но просто для всех

01:59:38.300 --> 01:59:44.980
транзакций в одном блоке оно совершенно одинаково сюда берется время сюда берется время сюда берется

01:59:44.980 --> 01:59:48.420
время и все это как бы время блока то есть никакого текущего времени так как нет никакого развития

01:59:48.580 --> 01:59:56.760
времени там нет его получить нельзя вот это все из-за требования детерминизма какие еще

01:59:56.760 --> 02:00:06.580
функции которые детерминизм нарушают можете вспомнить который на разных компах дадут

02:00:06.580 --> 02:00:14.020
разные значения любые которые зависят от рандома ну хотя там и соседи одинаковый

02:00:14.020 --> 02:00:22.680
тоже не факт но рандом да совершенно верно и здесь собственно пускай рандом вычисления

02:00:22.680 --> 02:00:33.200
с помощью . могут зависеть от процесса системы вот прекрасное замечание и крайне важно вот такое

02:00:33.200 --> 02:00:39.700
число на разных процессорах вам породит как бы разные бинарные образы то есть как бы с разной

02:00:39.700 --> 02:00:43.960
точности будут проводиться вычисления и по-хорошему если мы будем прямо добавлять

02:00:44.020 --> 02:00:53.120
в базу данных напрямую значение вычисленные на процессорах как бы разных архитектур они

02:00:53.120 --> 02:00:58.960
будут бинарно разные и нам это не годится и поэтому блокчейнах операции с плавающей точкой

02:00:58.960 --> 02:01:05.640
нативных из которые как бы берут результат процессора грубо говоря и напрямую его как

02:01:05.640 --> 02:01:13.420
бы куда-то пихают как бы их нету блокчейнах по сути вообще нету как бы никакого операции с

02:01:13.420 --> 02:01:14.000
плавающей точкой

02:01:14.020 --> 02:01:21.940
на самом деле конечно же ну то есть понятно что как бы как это как бы нет когда как бы они есть

02:01:21.940 --> 02:01:30.220
он в кошельке там что-то там с точкой как бы так далее но на самом деле во-первых есть либо

02:01:30.220 --> 02:01:36.760
которые позволяют делать вычисления с плавающей точкой как бы вот как раз в детерминированном

02:01:36.760 --> 02:01:43.020
варианте вот но блокчейнах все представляется целыми численно числами вот буквально как бы

02:01:44.020 --> 02:01:49.880
то что ты будешь отправлять его в подходите только где-то еще полтора тысячи суток то есть

02:01:51.800 --> 02:01:56.900
здесь вот такие есть все данные это вообще не просто численно численно walnut не цена

02:01:57.900 --> 02:02:05.980
на все цены мало мне ничего мешать я statue статус это д Styrofoam или эфир как бы вы можете

02:02:05.980 --> 02:02:11.000
прям сразу готовятся у вас будут просто 32 байта там или там на 256 бит и вот-вот вот вот у них вот

02:02:11.000 --> 02:02:19.780
uint короче там беззнаковая целая длиной 256 бит это нативный тип данных для в общем-то для всех

02:02:19.780 --> 02:02:31.040
блокчейнов 256 бит как бы размер он связан тоже с одной важной вещью то есть потому что все вот эти

02:02:31.040 --> 02:02:39.240
вот вот это вот наша вся как бы база данных state database с ключами там не знаю с эфиром там и так

02:02:39.240 --> 02:02:45.780
далее и так далее когда туда начинаешь добавлять дополнительные данные различные структуры там

02:02:45.780 --> 02:02:52.020
какие то там еще что то то есть какие-то структурированные данные которые привязаны

02:02:52.020 --> 02:03:02.360
к адресу владельца смарт-контракт с ними работает то все эти данные адресуются по хэшам то есть

02:03:02.360 --> 02:03:07.940
грубо говоря не знаю хранилище грубо говоря контрактов она

02:03:09.240 --> 02:03:17.680
организовано тоже какие были и все значения как бы которые адресуются не все адресуются по хэшу если

02:03:17.680 --> 02:03:23.820
мы привыкли как бы что у нас в наших компьютерах там в обычных да у нас есть там указатель для

02:03:23.820 --> 02:03:28.800
там сишный который ссылается на область там в памяти и там у нас там сколько-то бит как бы

02:03:28.800 --> 02:03:37.380
находится и вот этот указатель как бы он такой там какой мы там линейный ну такой там 12 потом там не

02:03:39.240 --> 02:03:49.260
стал 20 там ну и так далее то есть то в блокчейнах специально специально как раз сделано адресация

02:03:49.260 --> 02:03:55.020
вот это вот все вот эти ссылки они являются хэшами и сделано это опять же за требования

02:03:55.020 --> 02:04:01.240
детерминизма чтобы любая логика которая пошла там поменяла вот эту переменную поменяла вот

02:04:01.240 --> 02:04:09.080
эту переменную поменяла вот эту вот переменную то есть сам код чтобы он тоже исполнялся полностью

02:04:09.240 --> 02:04:15.420
детерминирован чтобы даже как бы оперативной памяти вот эти вот изменения они были они были

02:04:15.420 --> 02:04:20.540
детерминированы ну что в smart контракт там собственные перемены сохраняются в этого

02:04:20.540 --> 02:04:28.860
киева или вас данных и так далее вот то есть поэтому отсюда как раз выходит вот это вот

02:04:28.860 --> 02:04:37.380
из детерминизма выходит истории как бы про то что все данные в блокчейнах они целочисленные

02:04:37.380 --> 02:04:39.220
все операции как бы целочисленная

02:04:39.240 --> 02:04:46.780
все остальное как бы делается при помощи целочисленных операций там не знаю там

02:04:46.780 --> 02:04:51.420
приходит там блокчейн и мы сделали как бы крутой бог чей там со смарт-контрактами там

02:04:51.420 --> 02:04:57.240
в транзакции можно там поместить там супер там не знаю там чего хочешь как бы написать а вот

02:04:57.240 --> 02:05:03.740
здесь написать все что хочешь у нас контракт очень простые на джава скрипте пишется вот ну

02:05:03.740 --> 02:05:08.800
и теперь представьте короче говоря у вас здесь как бы на джава скрипте да вы можете вы на самом

02:05:08.800 --> 02:05:14.920
деле можете спокойно технически запрограммировать что у вас там не знаю там ваш валидатор взял

02:05:14.920 --> 02:05:20.620
транзакцию здесь в каждой из них там джава скриптовый код взял как бы выполнил джава

02:05:20.620 --> 02:05:25.960
скриптовый код накатил там что-то даже сделал но до терминизма вы здесь не получите то есть

02:05:25.960 --> 02:05:31.600
у вас будет реально рассогласование то что у вас на одном компьютере он вам одно чем это считает

02:05:31.600 --> 02:05:37.660
как бы на другом компьютере тоже транзакциями сработает какими по-другому на одном было мало

02:05:37.660 --> 02:05:38.680
памяти он там

02:05:38.800 --> 02:05:45.640
я не знаю там много там выделял скрипел выполнялся 10 секунд и транзакция здесь она выполнялась там

02:05:45.640 --> 02:05:53.180
за 0 1 секунды и так далее то есть все вот это вот как бы блокчейнах очень жестко регламентирована

02:05:53.180 --> 02:06:02.200
то есть под транзакциями всегда стоит какая-то виртуальная машина которая похожа на gm ну то

02:06:02.200 --> 02:06:08.780
есть на джем которые вот эти вот транзакции исполняют я вам сейчас рисую вот эту

02:06:08.800 --> 02:06:14.620
то что вася как бы петь и там не знаю там 10 как бы эфира переправлю переправляет но мы-то

02:06:14.620 --> 02:06:19.600
конечно будем заниматься контрактами которые будут очень подробно там сильно подробнее как

02:06:19.600 --> 02:06:26.700
бы следующая лекция вы уже можете как бы заранее готовится что здесь конечно не 10 эфиры передается

02:06:26.700 --> 02:06:32.540
а на самом деле просто вызывается под причем какой-то может быть достаточно значимый под

02:06:32.540 --> 02:06:38.600
какой-то там серьезный который там из одного баланса заминусует на другой добавит кому-то на

02:06:38.800 --> 02:06:46.300
числе проценты заплатит короче там не знаю там фито майнеру и так далее так далее вы и может сделать

02:06:46.300 --> 02:06:54.100
там 10 раз как бы и там в сложных различных комбинациях математику посчитать какой-то то

02:06:54.100 --> 02:06:59.860
есть этот серьезный блокчейн и которые со смарт-контрактами они про перекладывание

02:06:59.860 --> 02:07:08.680
как бы циферок ну и могу сказать да что получили разработка это ну я уже говорил до что биткоина там

02:07:08.800 --> 02:07:17.500
мало вот потому что а эфир это много потому что по факту и солидите ну и соли точнее не солидите а

02:07:17.500 --> 02:07:25.080
именно то что у него под капотом его эм эфириум виртуал машин который исполняет расход который

02:07:25.080 --> 02:07:32.500
компилится на солите он уже он стал таким как бы стандартом в индустрии которые реализуются

02:07:32.500 --> 02:07:37.540
во всех крупных блокчейнах то есть есть там блокчейн и поле только dot который работает

02:07:38.800 --> 02:07:45.460
так вот называется мун пил вы с ним работаете точно так же как с эфиром вот есть там не знаю

02:07:45.460 --> 02:07:53.560
это сколько да там в салоне короче есть не он проект такой который делает там прокси который

02:07:53.560 --> 02:08:00.740
тоже делает работу как все время и здесь как бы очень крутая и культура разработки много best

02:08:00.740 --> 02:08:07.000
practice то есть здесь уже как бы сложилось за много лет очень большое как бы комьюнити

02:08:08.800 --> 02:08:16.900
и в общем под эфир очень очень приятно разрабатывать на самом деле очень много все

02:08:16.900 --> 02:08:24.920
сделано вот это значит то что касается детерминизма исполнения вот поэтому когда вам говорят как бы у

02:08:24.920 --> 02:08:31.900
нас там блокчейне смарт-контракты на питоне вот на самом деле надо интересоваться скорее

02:08:31.900 --> 02:08:38.620
как бы такая виртуальная машина исполняет потому что как бы действительно нужен жесткий детерминизм

02:08:38.800 --> 02:08:44.680
еще одна история как бы блокчейна крайне важны для процесс для понимания как бы процессинга

02:08:44.680 --> 02:08:54.580
транзакций это ограничение на исполнение транзакций может подходим как бы в этой

02:08:54.580 --> 02:09:01.960
лекции уже потихонечку как бы завершение смотрите я майнер у меня есть требования по консенсусу что

02:09:01.960 --> 02:09:07.480
я должен там произвести там следующий блок там в течение короче не знаю там 10 следующих секунд

02:09:08.800 --> 02:09:14.900
вот ну просто там в разных консенсусах там разным там валидатором назначаются временные слоты ты типа

02:09:14.900 --> 02:09:22.240
с нулевой секунды до 10 произведи блок ты там тип с 11 до 20 всего у нас там шестеро и так вот там

02:09:22.240 --> 02:09:30.820
каждую минуту это там в одном виде консенсусов биткойне короче говоря надо там типа чем быстрее

02:09:30.820 --> 02:09:37.840
тем лучше это и так далее теперь представьте с этими моими волшебными транзакциями которые я

02:09:38.800 --> 02:09:44.620
написал то есть которые внутри там целую там типа пачку кода исполняет там что-то там делает пересылает

02:09:44.620 --> 02:09:53.020
вот если вот в этой вот транзакции будет наш любимый wild true ну то есть какой-то программный

02:09:53.020 --> 02:09:59.140
код как бы который зациклился или просто который пожирает как бы кучу ресурсов в чем в этом случае

02:09:59.140 --> 02:10:05.620
делать соответственно майнер как бы исполняет вот эту вот программу начинает как бы ее крутить

02:10:08.800 --> 02:10:15.400
и сеть стала как бы все кто хотят как бы произвести этот блок они все как бы зависли понятно что на

02:10:15.400 --> 02:10:23.140
на транзакции должно быть применено ограничение какое-то там ну вот если прям совсем по тупому

02:10:23.140 --> 02:10:30.740
ну давайте короче сделаем что она должна исполняться не дольше чем 0 там 001 могу

02:10:30.740 --> 02:10:38.640
сказать что на низком уровне вот эти вот ограничения типа по времени исполнения программы они очень хреново реализуются

02:10:38.800 --> 02:10:44.640
на самом деле очень неудобно как бы есть очень много как бы на всяких вещей которые как бы в

02:10:44.640 --> 02:10:49.960
точности чтобы вот этому соответствовать и не попасть как бы никакую атаку эксплойтейшн вот

02:10:49.960 --> 02:10:58.280
этой штуки это нереально еще хотелось бы вообще как можно выброс да да да а вот ограничение по

02:10:58.280 --> 02:11:02.860
времени они разве не делают не дискриминированную то есть на одной машине он успел он такой не

02:11:02.860 --> 02:11:12.900
успела ну нет если этот блок был принят вот это ограничил по времени вот я да я потихонечку к

02:11:12.900 --> 02:11:19.120
этому иду ну то есть как оказалось на самом деле как бы подход по времени он не особо как бы хорош

02:11:19.120 --> 02:11:25.520
во первых его трудно запробовать вот во вторых как бы тоже компьютер это разная да и скорости

02:11:25.520 --> 02:11:31.600
и скорости разные и поэтому как бы одного компьютера это типа 001 а у другого 01

02:11:32.860 --> 02:11:39.300
и вообще по-хорошему то ведь майнер как бы процессе для него представьте вот у этой

02:11:39.300 --> 02:11:44.200
транзакции я прям буду рисовать трассу представьте что каждый той точечка это ассемблер на инструкция

02:11:44.200 --> 02:11:48.880
вот прям машины инструкции который исполняет процессор а у этого трасса вот такая вот

02:11:48.880 --> 02:11:55.240
коротенькая а это вообще эфир перевод переводит там типа два баланса обновил как бы все и гуляй

02:11:55.240 --> 02:12:02.080
вася и по-хорошему как бы майнеру бы надо бы брать деньги за каждую вот из вот этих вот точек

02:12:02.860 --> 02:12:08.300
то есть как бы кто написал большую программу как бы с того много берем денег кто написал

02:12:08.300 --> 02:12:16.600
что-то коротенькое как бы то берем не берем меньше денег вот я и соответственно из этого

02:12:16.600 --> 02:12:23.140
родилась концепция эфирная газа мы тоже про нее будем там подробно подробно говорить вот

02:12:23.140 --> 02:12:32.740
там прям очень часто будем к этой штуки обращаться по сути стран транзакция ну транзакция в эфире и

02:12:32.860 --> 02:12:40.720
это набор обходов то есть набор прямо инструкции машины там не знаю там сложил там чем сложить

02:12:40.720 --> 02:12:50.260
запушить на стек запушить на стек перемножить если как бы получился ноль там типа их то сделать там

02:12:50.260 --> 02:12:56.980
джамп но девочкам кто из вас не знаю там микроконтроллеры прогал можете вспоминать

02:12:56.980 --> 02:13:02.760
как вы здесь до smart контракты в общем-то ну виртуальная машина они так и работают его и

02:13:02.860 --> 02:13:09.520
это по сути такой микро микроконтроллер как бы стандартный с памятью со счетчиком команд короче

02:13:09.520 --> 02:13:17.680
со стеком там с выделениями памяти и так далее так далее вот и соответственно идея как бы газа

02:13:17.680 --> 02:13:24.280
она была в том чтобы просто присвоить каждой из этих инструкций свою цену то есть там от стоит

02:13:24.280 --> 02:13:32.680
там не знаю 3 push стоит 2 умножение стоит 10 там еще там что-нибудь запись в киев в киеве любого

02:13:32.860 --> 02:13:40.480
данных нового значения что у вас стало 8 как бы стоит там 20000 20000 попугаев или там как

02:13:40.480 --> 02:13:46.620
угодно то есть это условные очки трудоемкости исполнения данной инструкции какие-то попроще

02:13:46.620 --> 02:13:54.280
да там арифметика загнал в два регистра как бы выполнил все здорово как бы push на стек стек

02:13:54.280 --> 02:14:02.440
штука легковесная как бы операции с ней должны быть дешевые а и в.м. это стек basic основаны на стыке

02:14:02.860 --> 02:14:09.580
машина запись в сторож это по сути за запись на диск самый тяжелый самый медленный кошмарной

02:14:09.580 --> 02:14:16.540
операции как бы она стоит прям вот дофига ну и так далее то есть мы еще все эти мы цены как

02:14:16.540 --> 02:14:24.160
бы эти обсудим и как это все оптимизируется обсудим но но как бы то что я хочу сказать

02:14:24.160 --> 02:14:32.860
что в блокчейнах оплачивается каждый квант буквально исполнение которые потратили потратили

02:14:32.860 --> 02:14:40.140
то майнера валидаторы никто никому не доверяет то есть никто никому бесплатно ничего не делает

02:14:40.140 --> 02:14:47.160
то есть никаких бесплатных транзакций вообще не существует блокчейна вот там любят там не

02:14:47.160 --> 02:14:51.660
знаю корпоративный был член танк рассказывать или там приходить короче говорить что у нас там

02:14:51.660 --> 02:14:57.500
бесплатные транзакции бесплатные транзакции это означает что вы можете бесплатно набить

02:14:57.500 --> 02:15:01.920
блок короче всяким трэшем и по сути заспамить просто весь блокчейн

02:15:02.860 --> 02:15:08.240
Там, не знаю, приходит какой-нибудь проект и говорит, у нас бесплатные транзакции.

02:15:08.540 --> 02:15:09.380
Мы такие, да ладно.

02:15:10.160 --> 02:15:15.420
Он говорит, ну вот у нас человек заморозил токены свои на балансе,

02:15:15.440 --> 02:15:18.540
у него теперь там ноль, он там 10 тысяч токенов заморозил,

02:15:18.880 --> 02:15:20.660
и у него теперь бесплатные транзакции.

02:15:20.660 --> 02:15:25.460
Мы говорим, ну отлично, короче, вот у нас два чувака заморозили по 10 тысяч токенов

02:15:25.460 --> 02:15:31.780
и друг другу кидают транзакции, пожалуйста, бесплатно,

02:15:31.780 --> 02:15:35.880
как бы все блоки забиты, как бы мусором, соответственно, блокчейн не работает.

02:15:36.660 --> 02:15:42.220
То есть все оплачивается обязательно, как бы, то есть ни один майнер или валидатор

02:15:42.220 --> 02:15:45.700
бесплатно вычислительные ресурсы не предоставляет.

02:15:45.700 --> 02:15:50.280
При этом как бы диск дороже, процессор, память и так далее.

02:15:50.380 --> 02:15:56.580
Есть и другие модели оценки ресурсов, и чтобы обратить на них внимание ваше,

02:15:56.640 --> 02:16:01.200
но это уже немножко из области высоконагруженных приложений,

02:16:01.320 --> 02:16:01.700
да, вот.

02:16:01.780 --> 02:16:07.080
У вас, когда какой-то работает там на компьютере, там, демон, не знаю, ваш веб-сервер,

02:16:07.220 --> 02:16:11.240
там, база данных, вдруг она начала по производительности всасывать,

02:16:11.660 --> 02:16:14.880
вы, значит, бежите в мониторинг, начинаете, значит, смотреть,

02:16:14.880 --> 02:16:21.260
что на самом деле происходит, и, по сути, вы должны всегда помнить о четырех ресурсах.

02:16:21.400 --> 02:16:23.580
Значит, первый ресурс – это процессор.

02:16:24.220 --> 02:16:27.000
То есть вы прибегаете на компьютер, как бы смотрите, у вас там, типа,

02:16:27.440 --> 02:16:31.440
какой-нибудь load average, загрузка процессора выросла, стоит там,

02:16:31.440 --> 02:16:37.520
типа, в 100%, вот, случилось это вчера, как бы, и вы думаете, что произошло,

02:16:37.580 --> 02:16:42.080
на самом деле, там, кто-то выкатил обновление, которое, не знаю, там, раз в секунду,

02:16:42.080 --> 02:16:46.020
там, тысячу раз в секунду проверяет электронную подпись, например,

02:16:46.220 --> 02:16:49.080
или там шифрование какое-нибудь, или математические операции,

02:16:49.740 --> 02:16:53.980
или там работа с индексами в базе данных, то есть у вас, как бы, процессор потек.

02:16:54.820 --> 02:16:58.680
Вот, вы начинаете разбираться, то есть это, значит, первая история.

02:16:59.160 --> 02:17:01.380
То есть как заспамить при помощи процессора?

02:17:01.440 --> 02:17:06.820
Там, не знаю, блокчейн или распределенную систему заставить, как бы, в своем контракте,

02:17:06.840 --> 02:17:09.720
вот здесь вот выполнять какую-то сложную математику.

02:17:11.120 --> 02:17:14.440
Ну, то есть что-то там прям, то, что будет поедать, как бы, процессором.

02:17:15.160 --> 02:17:20.680
Очень серьезно вот эти возведения там степени, там, перемножения больших чисел и так далее.

02:17:21.660 --> 02:17:26.420
Следующий ресурс – это у нас, давайте я RAM напишу, ну, давайте, наверное, memory.

02:17:27.920 --> 02:17:31.420
Это тоже всем из вас, наверное, известно, кто работал.

02:17:31.440 --> 02:17:36.440
Свои приложения, вы приходите на работу, менеджер говорит, у нас все, как бы, тормозит.

02:17:37.480 --> 02:17:44.740
Вы смотрите, у вас, как бы, все, вы добрались, как бы, у вас память утекла, как бы, все, вы ушли, там, машина ушла в свап, все упало, как бы, все плохо.

02:17:45.620 --> 02:17:53.440
Значит, ну, тоже, как бы, там, выкатили какое-нибудь обновление, там, не знаю, которое там в памяти разворачивает массив из миллиона элементов.

02:17:54.180 --> 02:17:57.280
И таких-то, и в процессах, как бы, таких массивов дофига.

02:17:58.160 --> 02:18:01.280
Соответственно, внутри вот этого кода, как бы, то есть можно...

02:18:01.440 --> 02:18:13.440
Можно сделать цикл, который, как бы, постоянно, там, пишет в память, занимает, занимает оперативку, занимает, занимает, там, ее выделяет, как бы, немереное количество оперативки, как бы, и, соответственно, пожирает память.

02:18:13.620 --> 02:18:17.060
За это надо тоже считать деньги, за CPU, за memory.

02:18:18.020 --> 02:18:19.780
Следующая штука у нас – storage.

02:18:21.540 --> 02:18:26.520
Да, это, ну, процессор input-output, то есть общение с внешними устройствами.

02:18:26.520 --> 02:18:31.100
И тоже вы в своих веб-приложениях увидите, что у меня там все, диск, как бы, встал.

02:18:31.440 --> 02:18:38.880
Ну, началось немереное количество записей, чтений, и все, как бы, диск не успевает, как бы, тормозит всю остальную систему.

02:18:38.980 --> 02:18:46.000
Все остальные его ждут, там, процессор кулит, память кулит, как бы, а диск, значит, за всех он дувается.

02:18:46.880 --> 02:18:51.560
То есть за него обязательно платите, и в блокчейне это самый дорогой ресурс, то есть storage.

02:18:51.560 --> 02:18:58.480
Почему? Потому что то, что вы сохранили, как бы, в блокчейне, оно тиражируется на тысячи нод.

02:18:58.760 --> 02:19:01.420
Все это, все, теперь весь мир, как бы, будет ваш эти данные.

02:19:01.440 --> 02:19:07.120
Постоянно копировать, постоянно дублировать, хранить, как бы, поэтому он стоит крайне дорого.

02:19:07.500 --> 02:19:12.700
Ну и четвертый ресурс, про который часто забывают, нетворк, то есть сеть.

02:19:13.080 --> 02:19:18.420
У вас все, как бы, с сервисом хорошо, как бы, но только на сетевом интерфейсе, как бы, немереное количество пакетов.

02:19:18.540 --> 02:19:27.700
Вас там дедосит, например, там напал кто-то на ваш сайт, или там качает кто-то там с вас, как бы, там немеренно, там, не знаю, там, фоточек каких-нибудь.

02:19:27.700 --> 02:19:30.700
То есть это, в общем-то, тоже один из ресурсов.

02:19:31.440 --> 02:19:34.800
И для блокчейнов, как бы, нетворк – это, по сути, размер транзакции.

02:19:35.480 --> 02:19:45.000
Ну, то есть входные данные, которые здесь используются, которые были в транзакции, чтобы, как бы, нельзя было, там, такую транзакцию огромную, там, не знаю, посылать,

02:19:45.680 --> 02:19:53.080
или, там, миллионами транзакций заспамить, как бы, ноду, чтобы она их не получала.

02:19:53.080 --> 02:20:00.800
За все это, как бы, надо брать деньги, и, соответственно, в концепции газа все вот эти вот инструкции, они взвешены.

02:20:01.440 --> 02:20:16.100
По сути, как бы, по цене и с дополнительными всякими плюшками, типа, что если ты выделяешь память, то тебе придется заплатить за каждый 32-байтный слот, например, за каждый новый, как бы, 32-байтный слот.

02:20:16.100 --> 02:20:23.760
Знаете, похоже на страничную организацию памяти в операционных системах, вот это выделение слотов.

02:20:24.120 --> 02:20:29.500
Или если кто читал, как работают всякие малаки, там, все, все, все плюс-плюс.

02:20:30.120 --> 02:20:31.240
Выделение памяти.

02:20:31.440 --> 02:20:32.500
С такими, как бы, чанками.

02:20:32.680 --> 02:20:37.060
Здесь тоже штука, как бы, достаточно похожая и близкая к этому.

02:20:38.060 --> 02:20:38.420
Вот.

02:20:38.540 --> 02:20:45.440
Ну, и, соответственно, там, память, понятно, там, сторич тоже, как бы, вот этими кусочками, как бы, своими здесь оценивается деньгами.

02:20:46.180 --> 02:20:46.500
Вот.

02:20:46.640 --> 02:20:48.240
Ну, сеть, в общем-то, тоже.

02:20:49.580 --> 02:20:50.020
Вот.

02:20:50.440 --> 02:20:55.120
Сеть, это оценивается размер, как бы, данных, которые пришли к транзакциям.

02:20:56.120 --> 02:20:56.480
Вот.

02:20:56.480 --> 02:21:00.560
Я правильно понимаю, что смарт-контракты тогда в качестве транзакций,

02:21:01.440 --> 02:21:03.400
которые отправляются, которые майнеры исполняют?

02:21:03.960 --> 02:21:08.520
Ну, на самом деле, смарт-контракт, как бы, код заранее размещается в блокчейне,

02:21:09.080 --> 02:21:11.160
у него тоже, как бы, появляется адрес,

02:21:11.720 --> 02:21:17.140
а, как бы, пользователь отправляет вызов функции этого контракта.

02:21:17.220 --> 02:21:19.380
Он говорит, хочу вызвать функцию вот в этом контракте,

02:21:19.460 --> 02:21:21.500
такую-то, такую-то, с такими-то параметрами.

02:21:22.880 --> 02:21:23.240
Вот.

02:21:23.360 --> 02:21:27.580
А как другие ноды валидируют, что майнер правильно его исполнил?

02:21:28.200 --> 02:21:29.220
Они точно так же.

02:21:29.220 --> 02:21:31.220
Как каждая нода его исполняет?

02:21:31.440 --> 02:21:33.920
Каждая нода его исполняет.

02:21:34.460 --> 02:21:35.400
Именно так.

02:21:36.020 --> 02:21:39.040
То есть каждая нода исполняет, как бы, вот эту вот транзакцию.

02:21:39.040 --> 02:21:41.540
Именно поэтому смарт-контракты, они очень небольшие,

02:21:42.100 --> 02:21:43.960
они очень оптимизированные, как бы,

02:21:44.040 --> 02:21:47.140
там нету никаких там, типа, больших циклов,

02:21:47.300 --> 02:21:49.120
там нет, как бы, ничего, что работало.

02:21:49.280 --> 02:21:53.040
То есть там вся логика, она вывернута, как бы, такая, как бы, на пользователей.

02:21:53.660 --> 02:21:55.340
Там все действия делают пользователи.

02:21:56.680 --> 02:21:57.080
Вот.

02:21:57.400 --> 02:22:01.040
То есть именно так, как бы, то есть каждый транзакт,

02:22:01.440 --> 02:22:10.300
то есть то что я говорил как бы то что с васи как бы списали 10 эфиры как бы опять и как бы

02:22:10.300 --> 02:22:16.860
добавили 10 эфира на самом деле это же внутри тоже программа то есть эта программа которая

02:22:16.860 --> 02:22:26.160
сначала проверит что у вас и баланс больше десяти и упадет если как бы баланс меньше затем как бы

02:22:26.160 --> 02:22:33.900
она должна записать в storage затем она должна как бы записать петь и storage затем там но и

02:22:33.900 --> 02:22:40.860
закончить работу обновив соответственно там стоит ру то есть это уже такая как бы нехилой работа вот

02:22:40.860 --> 02:22:47.580
и собственно виталик то как раз и предложил он где-то давайте вот эту штуку пускай программисты

02:22:47.580 --> 02:22:55.560
пишут то что мы говорим про газ процент операции это чтобы оценить сколько майнера

02:22:55.560 --> 02:22:56.160
получает

02:22:56.160 --> 02:23:04.320
за выполнение да да именно ну то есть валидаторы просто так будет исполнить откат или как нет нет

02:23:04.320 --> 02:23:11.100
нет но и нет это газ это просто подход к оценке да теперь мы грубо говоря знаем у нас есть какой-то

02:23:11.100 --> 02:23:16.980
код вот это вот функция да там ну мир большой контракт на мы вызываем в своей транзакции там

02:23:16.980 --> 02:23:24.500
не знаю там вася обращается к контракту и вызывает функцию не знаю как там

02:23:24.500 --> 02:23:26.100
функция

02:23:26.100 --> 02:23:33.120
вызывает там свою пойдет там электронную подпись отправляет ее эта функция отправляется в контракт

02:23:33.120 --> 02:23:42.000
начинает исполняться вот при этом как бы тратится газ есть какой-то верхний лимит то есть если как

02:23:42.000 --> 02:23:48.040
бы васи упрется там в 10 миллионов газа он его там потратит то транзакция не будет выполнена

02:23:48.040 --> 02:23:54.620
вот она упадет как бы с ошибкой а аутов газ и при этом пока она исполняется здесь ведется счетчик

02:23:56.100 --> 02:24:04.220
плюс 2 плюс 10 плюс 20000 и в результате как бы у него получается количество газа который он потратил

02:24:04.220 --> 02:24:11.400
на вот это исполнение этой транзакции вот столько с него как бы из пишет майнер просто в эфире сделан

02:24:11.400 --> 02:24:22.800
так что комиссия она называется газ прайс вот это как бы следующая история то что каждая единичка газа

02:24:26.100 --> 02:24:34.200
ставите сами я хочу вызвать транзакцию которая потратит 21 тысячу газа и цена газа там не знаю

02:24:34.200 --> 02:24:41.520
там ноль там типа ноль ноль ноль ноль ноль а там один эфира и манер ее исполняет умножает 21 год

02:24:41.520 --> 02:24:49.040
на это и столько вам придется заплатить нового майнера заплатим а потом другие но даже им нужно

02:24:49.040 --> 02:24:55.060
проверить что майнер крик не спал на программу они тоже будут и надо не за это ничего не получать а

02:24:56.100 --> 02:25:02.360
не втоль да да ну конечно нет они просто валидируют да как бы они просто когда перепроверяют

02:25:02.360 --> 02:25:08.580
они точно также до накатывают каждую из транзакций исполняют по сути все все смарт-контракты на 10

02:25:08.580 --> 02:25:18.480
здесь так не очень понятная концепция нет нет нет ну как ну вот вы получили блок вам его нужно

02:25:18.480 --> 02:25:24.420
проверить вот у вас есть транзакция которую вы просто выполняете вот этот вот код понимаете как

02:25:24.420 --> 02:25:25.980
бы что этот код потратил 20

02:25:26.100 --> 02:25:35.660
тысячу газа что пользователь в транзакции указал типа 001 как бы эфира посчитали там комиссию ваш

02:25:35.660 --> 02:25:43.700
комиссия как бы за эту транзакцию там составила там типа ноль там что-то там 00 21 эфира и все

02:25:43.700 --> 02:25:49.420
ее приплюсовали как бы к награде мая майнеру который за блок произвел пошли следующую

02:25:49.420 --> 02:25:56.100
транзакцию следующий разок 100 же тоже выполняет определенный код вы его выполняете проверяете

02:25:56.100 --> 02:26:01.500
то что вы действительно было столько газа потрачено сколько ему и у майнера как бы

02:26:01.500 --> 02:26:11.160
берете ту цену как бы транзакции перемножайте получаете комиссию 2 транзакция вот так вот

02:26:11.160 --> 02:26:21.240
все как бы друг друга перепроверяют если статические анализаторы кода которые могут

02:26:21.240 --> 02:26:25.500
газ посчитать когда конечно мол ну конечно есть

02:26:26.100 --> 02:26:32.420
и газ как бы подсчитывается достаточно там просто там в куче как бы это мы еды и как бы

02:26:32.420 --> 02:26:42.660
то есть здесь единственного что важно как бы что вы не всегда можете предсказать количество газа

02:26:42.660 --> 02:26:49.340
заранее не зная состояние контракта потому что здесь же программа как бы она может пойти как

02:26:49.340 --> 02:26:55.780
бы его вход этой ветке а в обход этой ветке она может пойти если например какая-то другая

02:26:56.100 --> 02:27:02.660
транзакция в то в том же самом контракте что-то изменила то есть как бы здесь и не очень просто

02:27:02.660 --> 02:27:09.280
как внутри с одной стороны как бы просто другой страны очень-то просто то есть есть да какой то

02:27:09.280 --> 02:27:15.800
с рукава здесь логических веток как бы этой программы по такому количеству путей как бы

02:27:15.800 --> 02:27:23.160
она может пойти поэтому отцы газа прогассов не волнуйтесь мы прямо на самом деле очень глубоко

02:27:26.100 --> 02:27:33.180
штука как бы считается и от чего он зависит вот но что нам важно как бы на этой лекции это то что

02:27:33.180 --> 02:27:41.820
любая любая транзакция в блокчейне оплачивается и оплачивается за ее именно сложность исполнения

02:27:41.820 --> 02:27:49.220
вот то есть просто как бы деньги которые доваливаются на транзакцию сверху типа в

02:27:49.220 --> 02:27:56.420
качестве бонуса как бы это только бонус вот но как бы все базовые штуки обязаны быть оплачена

02:27:56.420 --> 02:28:13.780
иначе иначе сеть будет просто заспамлено вот так вопрос каждый раз выплачивается манеру который

02:28:13.780 --> 02:28:18.560
сделал смарт-контракт нет майнер не делает смарт-контракт смарт-контракт делается в

02:28:18.560 --> 02:28:19.160
пользователям

02:28:19.220 --> 02:28:26.620
майнер исполняет код этого смарт-контракта и берет деньги за газ потраченный на вот это

02:28:26.620 --> 02:28:33.500
исполнение вот так вот то есть манер исполняет чужую программу и при этом как бы подсчитывать

02:28:33.500 --> 02:28:40.840
сколько он потратил на этом процессора памяти все это дело суммирует получает вот эти вот условные

02:28:40.840 --> 02:28:48.400
единицы типа газ умножает на цену которую ему дал пользователь сколько я готов заплатить за газ и

02:28:49.220 --> 02:28:55.580
собственно вот абсолютное значение вот этой вот комиссия то есть смотрите у нас есть один

02:28:55.580 --> 02:28:56.380
смарт-контракт

02:28:56.380 --> 02:29:03.760
например и его вызывает 10 пользователей значит там например ну какой-нибудь там там вот там

02:29:03.760 --> 02:29:10.520
там смарт-контракт Короче говоря у него есть какая-то функция вот это там f1 которая чем там

02:29:10.520 --> 02:29:17.060
делает где там кем деньги причисляет что им забирает какой-нибудь первый пользователь вызывает

02:29:17.060 --> 02:29:25.280
она исполняется он там насчитал там не знаю там 40 тысяч газа и сказал хочу платить как бы там

02:29:25.280 --> 02:29:32.960
01 эфира за каждый газ ну и как бы заплатил соответственно такую комиссию второй пользователь

02:29:32.960 --> 02:29:42.740
тоже вызывает эту функцию f1 вот он тоже потратит 40 40 к газа но хочет заплатить за

02:29:42.740 --> 02:29:49.100
него меньше там типа 0 там типа 05 там эфира как бы я хочу заплатить за газ и вот это вот

02:29:49.100 --> 02:29:54.560
произведение является как бы их по сути как бы комиссиями и майнер будет выбирать между

02:29:54.560 --> 02:30:00.500
этими двумя как бы транзакциями и там наверное решит как бы выполнить сначала вот этого чувака

02:30:00.500 --> 02:30:06.500
потому что от него больше получится потом вот этого там есть как бы еще там предварительной

02:30:06.500 --> 02:30:11.300
оценкой газы и так далее но я повторяю что это сильно зависит от порядка транзакций в блоке

02:30:11.300 --> 02:30:18.320
потому что может быть что случится типа сначала пришел первый пользователь изменил здесь какую

02:30:18.320 --> 02:30:25.400
переменную и из-за этой переменной второй пользователь когда сюда пришел к но он как

02:30:25.400 --> 02:30:29.720
бы посмотрел сюда на эту переменную как бы из-за нее как бы ему пришлось пойти как бы

02:30:29.720 --> 02:30:40.060
исполнять другую ветку кода а здесь например получилось не 40 газа тома 80 кило газа вот

02:30:40.060 --> 02:30:41.260
то есть здесь все

02:30:41.300 --> 02:30:47.280
вот на усмотрение как бы программа но программистов смарт-контракты размещают пользователя то есть я

02:30:47.280 --> 02:30:55.460
моя пишу в смарт-контракт я его диплою в эфир вот мы прямо это будем делать как бы много раз а и он

02:30:55.460 --> 02:31:00.140
начинает работать и пользователи могут в этот контракт соответственно слать транзакции а манеры

02:31:00.140 --> 02:31:09.440
берут с них деньги за исполнение кода вот этого смарт-контракта ответил там часть вопрос можно

02:31:11.300 --> 02:31:19.620
давайте еще посмотрим так но тем не менее награду за предложенный блок выдают только валидатору

02:31:19.620 --> 02:31:25.520
предложившим эти этот блок а валидаторы кто перепроверять ничего не получают да ничего

02:31:25.520 --> 02:31:33.440
не получают то есть награды за блок отправляется валидатору просто как бы в консенсусах там сделано

02:31:33.440 --> 02:31:40.280
так что там есть такое как бы расписание как бы работы валидаторов так называемый там скидил зависит

02:31:41.300 --> 02:31:48.000
от алгоритмов и например там первый валидатор получил здесь награду за блок как бы в следующем

02:31:48.000 --> 02:31:55.620
слоте как бы 2 получит среднему все честно будет да да да да да при этом если кто-то из них как

02:31:55.620 --> 02:32:02.000
косячит там пропустил свой слот дата эта информация в общении она остается ну то есть мы можем по

02:32:02.000 --> 02:32:08.120
предыдущим блоком понять типа что вот здесь вот он должен был работать как бы ну кто ты на самом

02:32:08.120 --> 02:32:11.240
деле кто-то из этой группы то здесь кэш и группы там валидаторов

02:32:11.300 --> 02:32:18.480
у нас же все byzantin фолтолеранс то есть мы не можем оставить как бы сеть не рабочая он пропустил

02:32:18.480 --> 02:32:23.060
как бы его наказывают потом там деньгами там забирают у него там часть там не знаю вот он

02:32:23.060 --> 02:32:29.240
стейка там еще что там и так далее то есть это мы будем на консенсусах обсуждать там довольно

02:32:29.240 --> 02:32:36.800
интересно вот так туда как бы награду за вот получает только тот кто его произвел остальные

02:32:36.800 --> 02:32:41.120
перепроверяют но и в принципе это тоже выгодно потому что если они не будут делать и сеть по

02:32:41.300 --> 02:32:47.960
идет в разнос то и они сами не смогут как бы производить блоки главная идея как бы вот

02:32:47.960 --> 02:32:58.700
этого пруфов стоит она была выглядела так следующим образом пруфов стейк что кому выгоднее всего в

02:32:58.700 --> 02:33:05.100
блокчейне чтобы он был честным что в нем не было хаков как бы чтобы там все блоки правильно

02:33:05.100 --> 02:33:10.880
процессоре процессе лись выгоднее всего это тем у кого больше всего токенов этого блокчейна вот у

02:33:11.300 --> 02:33:16.220
вы больше всего крипты этого блокчейна они сильнее всего пострадают как бы если в нем

02:33:16.220 --> 02:33:22.520
будут найдены какие-то проблемы то есть они самые серьезные а поэтому как бы раз как бы они от этого

02:33:22.520 --> 02:33:28.420
сильнее пострадают как бы им можно просто доверить вот это вот там создание блоков валидацию там и

02:33:28.420 --> 02:33:35.480
так далее и от пруфов стыку но он об этом вы в эфире там заморозили 32 эфира там сейчас не

02:33:35.480 --> 02:33:41.200
знаю под 50 тысяч долларов заморозили как бы включили компьютер и следить чтобы он как бы не

02:33:41.300 --> 02:33:48.060
когда у вас не вырубался был стабильно в нужное время как бы он там производил блоки валидировал

02:33:48.060 --> 02:33:57.900
остальные вы блоки и он получает награду кстати подождите вы написали награду за блок награду за

02:33:57.900 --> 02:34:08.660
блок до получает как бы получает калидатор этого блока а вторые которые ставят аттестации они тоже

02:34:11.300 --> 02:34:17.780
то есть им тоже там какая-то копеечка падает интересно спасибо да не на самом деле на самом

02:34:17.780 --> 02:34:23.300
деле там как бы ну там очень прикольные модели такие интересные как бы сбалансированные там в

02:34:23.300 --> 02:34:30.800
пруфов стыке сам наверное если вам интересно наверное самый такой ну как по мне продуманный

02:34:30.800 --> 02:34:36.560
как бы это ncos который в polkadot по нему есть там документ там интересный можно будет экономику

02:34:41.300 --> 02:34:46.880
то что сейчас в эфире 20 как бы вот эти его 100000 валидаторов из которых выбираются под

02:34:46.880 --> 02:34:53.300
группы которые там определенные там слоты времени должны печатать эти блоки регулировать тоже очень

02:34:53.300 --> 02:35:01.220
красивая схема очень грамотно они долго делали вот понятно чего долго делали остальные то стартовали

02:35:01.220 --> 02:35:08.360
с пруфов стейк с голым как бы блокчейном у эфира на горбу извините 200 миллиардов долларов и надо

02:35:08.360 --> 02:35:11.280
переехать бесшовно как бы до чтобы ни у кого ничего не

02:35:11.300 --> 02:35:17.180
ничего не сломалось вот они это его что-то сделали за что большой респект и уважуха

02:35:17.180 --> 02:35:26.360
вот еще раз а если смарт-контракте какой-то некорректный неверный код до тоже то тоже такой

02:35:26.360 --> 02:35:33.560
как бы важный вопрос значит во первых как бы смотрите любой смарт-контракт заканчивается

02:35:33.560 --> 02:35:41.200
двумя кстати говоря именно поэтому я же говорил вам не раз что

02:35:41.300 --> 02:35:47.520
блокчейн страна идиотских названий как бы да там название кошелек там или еще что-то смарт-контракт

02:35:47.520 --> 02:35:54.200
значит этот код назвали контрактом потому что в биткоине похожий код тоже из машинных инструкций

02:35:54.200 --> 02:36:01.460
он возвращает либо true либо false если true то как бы bitcoin из данного адреса тратится целиком

02:36:01.460 --> 02:36:09.500
вычеркивается если false как бы то ничего не происходит смарт-контракты работают похожим же

02:36:11.300 --> 02:36:19.580
так закончил свое исполнение функция и сделал окей то тогда вся вся запись как бы встает дебил

02:36:19.580 --> 02:36:26.420
как бы она фиксируется комит ну то есть все черно здесь на меняла как бы там не все балансы там не

02:36:26.420 --> 02:36:33.340
знаю там вася там плюс 5 минус там так далее все это записалось и по итогам этой транзакции

02:36:33.340 --> 02:36:41.140
будет правда еще стоит труд то есть стоит изменился а в случае реверта как в случае с

02:36:41.300 --> 02:36:47.800
или как бы отката транзакций будет по сути rollback то есть так как будто бы этот контракт никогда и

02:36:47.800 --> 02:36:53.520
не вызывался то есть никаких изменений в сторону же не будет но при этом смотрите мы ведь до этого

02:36:53.520 --> 02:36:59.560
реверта можем довольно долго идти дачу там гоняли по циклу там проверяли кому-то на что-то пытались

02:36:59.560 --> 02:37:05.740
деньги записать там и так далее а потом вам все как бы реверт отменилась как бы все там

02:37:05.740 --> 02:37:11.180
какое-то условие не сработало но майнер то потратил вычислительные ресурсы

02:37:11.300 --> 02:37:18.480
и поэтому в эфире это же во всех нормальных его блокчейнах за это придется тоже заплатить здесь

02:37:18.480 --> 02:37:25.720
тоже есть газ и поэтому здесь в эфире платится даже за упавшую транзакцию если не хватит на

02:37:25.720 --> 02:37:32.360
счету мы же не знаем заранее сколько платить а тогда как бы ну майнер как бы берет вашу трансу

02:37:32.360 --> 02:37:40.340
как бы он ее эмулирует накатывает ее на состояние как бы блока если вида что баланса меньше чем как

02:37:41.300 --> 02:37:51.240
просто ее это свидание я не я не возьму вот а он будет выполнять ее пока будет хватать баланса или

02:37:51.240 --> 02:37:58.160
он сразу проверяет там же мы не знаем по веткам но вот как раз как раз вот эта вот часть это как

02:37:58.160 --> 02:38:04.700
раз то чем отличаются разные имплементации not эфира какие-то честно как бы все накатывают

02:38:04.700 --> 02:38:11.100
какие-то делают там часть проверок предварительных какие-то опираются на предыдущие как бы транзакции

02:38:11.300 --> 02:38:17.000
в этот смарт-контракт понятно да что вы описали такой может сказать такой вектор атаки то есть я

02:38:17.000 --> 02:38:23.240
держу маленькую маленькую копеечку у себя как бы а майнеру все время кидаю как бы транзакцию

02:38:23.240 --> 02:38:29.900
который тратит дофига газа они ее на нее тратит ресурсы а потом типа просто не включает блок и

02:38:29.900 --> 02:38:38.000
получается что я задохнул вот но как раз вот именно в этом месте раз разные имплементации отличаются

02:38:41.300 --> 02:38:50.520
что будет не давал true очень просто как бывал true это у вас как бы джамп ну условный как бы

02:38:50.520 --> 02:38:58.340
джамп на но на какую-то там метку и потом а здесь как бы пусто но вот этот джамп он тоже что он

02:38:58.340 --> 02:39:06.140
стоит газа там 5 газа на это бы за него заплатить программу должна закончить выполняться она не

02:39:06.140 --> 02:39:10.200
закончат как долго он будет он будет пока как бы не будет

02:39:11.300 --> 02:39:20.180
достигнут hard лимит газа hard лимит но имеется там какой там там 10 10 миллионов газа то есть он

02:39:20.180 --> 02:39:27.420
сделает вам там сколько там 200 тысяч итераций как бы и остановится скажет чувак out of gas то есть

02:39:27.420 --> 02:39:34.480
он вместо либо напишет а там с ошибкой как бы авто газ как бы закончится газ вот а так как бы

02:39:34.480 --> 02:39:40.060
каждая операция будет стоить денег ну да и вайлд true ему придется как бы да прокрутить добро

02:39:41.300 --> 02:39:51.500
вот тут вы как бы ничего не попишет нет я так понимаю что как раз здесь то возможно много

02:39:51.500 --> 02:39:57.720
много как бы разных подходов вот можно оценить соответственно и стоимость функции заранее как

02:39:57.720 --> 02:40:04.940
бы примерно вот и прикинуть как бы баланс отправляющего и ну ну как бы сами программисты

02:40:04.940 --> 02:40:11.120
понимаете что можно как бы дело оптимизировать типа если там совсем копье как бы то не проверять

02:40:11.300 --> 02:40:18.560
если примерно там на границе какие-то значения, но это один из векторов атаки.

02:40:21.560 --> 02:40:31.020
Так, это значит, что касается окей, реверта, детерминизма, ожидания финализации, ну да,

02:40:31.020 --> 02:40:41.220
наверное, смотрите, то есть вот это вот слово финализация, штука как бы довольно важная,

02:40:41.220 --> 02:40:49.640
она как она используется, я уже там говорил про что в майнинге, там по сути как бы блок,

02:40:49.640 --> 02:40:56.420
а вот его закрыли вот этим красивым как бы хэшом, я глядя на этот хэш, верю, что как бы на этот хэш

02:40:56.420 --> 02:41:00.460
было потрачено там электричество, сколько там город потребляет за несколько дней,

02:41:00.460 --> 02:41:01.000
да, да, да, да.

02:41:01.000 --> 02:41:06.560
То есть там кучу там тераватт, как бы чтобы просто найти вот этот красивый хэш, и поэтому как бы я,

02:41:06.560 --> 02:41:13.260
в принципе, уже уверен, что моя транзакция там, она уже не будет откачана, ну может быть,

02:41:13.260 --> 02:41:18.760
появится там какой-то конкурент, и моя транзакция, ну все равно с большой вероятностью попадет и в

02:41:18.760 --> 02:41:24.920
этот блок, а если уже прошло там, типа сейчас считается в биткоине, там типа шесть блоков,

02:41:24.920 --> 02:41:30.440
если прошло назад, то все, этот блок считается, что все, прям он супер надежный, все, вот транзакция

02:41:30.440 --> 02:41:30.980
уже не корректируется.

02:41:30.980 --> 02:41:37.160
Тогда не будет откачано, вот, но опять же это только вероятность, то есть математическая,

02:41:37.160 --> 02:41:42.920
а вот та, которая детерминированная финальность, которая в Proof of Stake как раз используется,

02:41:42.920 --> 02:41:49.280
там история такая, что если блок является финализированным, то есть вот он собрал вот

02:41:49.280 --> 02:41:54.380
эти вот больше двух третей аттестации от валидаторов, он уже не откатывается вообще

02:41:54.380 --> 02:42:00.260
никогда, то есть просто, то есть неважно какая там появится цепочка, более тяжелая, более,

02:42:00.980 --> 02:42:07.040
еще там какая-то, как бы, то есть все, эта штука уже, как бы, она не откатывается никогда,

02:42:07.040 --> 02:42:12.560
то есть после нее, как бы, блокчейн идет строго сюда, и поэтому как финализация штука важная,

02:42:12.560 --> 02:42:18.740
с той точки зрения, что вы гарантированно со 100% вероятностью знаете, что вашу транзакцию включили

02:42:18.740 --> 02:42:25.700
в блок, она уже не будет выпилена из блокчейна никогда, вот, и поэтому на Proof of Stake сетях,

02:42:25.700 --> 02:42:30.700
там проще строить, там, не знаю, там, мосты, которые там из ровных блокчейнов активы, там,

02:42:30.980 --> 02:42:35.840
так далее, им нужен обязательно вот этот факт, типа, что все, вот, в этой сети все железно,

02:42:35.840 --> 02:42:42.800
прямо вот 100%, как бы, не будет, как бы, отката цепочки, вот, как бы, вот это понятие финализации,

02:42:42.800 --> 02:42:49.940
как бы, тоже довольно-таки важное. Еще что, наверное, такое из общих, из общей истории,

02:42:49.940 --> 02:42:58.400
как бы, там, крипты, ну, давайте, да, сначала для прикола, не знаю, там, покажу, как, ну,

02:42:58.400 --> 02:43:00.960
это вообще очень просто этим пользоваться, у меня есть вот эта, вот эта, вот эта, вот эта, вот эта,

02:43:00.980 --> 02:43:13.580
вот этот кошелек, это, по сути, расширение в браузере, на самом деле, оно просто, у меня есть

02:43:13.580 --> 02:43:18.360
тестовый эфир, тестовая сеть, вы в ней тоже, кстати, будете тоже много работать, вот,

02:43:18.360 --> 02:43:25.760
Герли она называется, их тут несколько, это такой игрушечный эфир, ну, который подняли

02:43:25.760 --> 02:43:30.360
разработчики, вы можете попросить, как бы, себе, там, тестовый эфир и, там, поиграться с ними,

02:43:30.980 --> 02:43:36.440
вот это вот мой адрес, он так выглядит, как бы, ну, обычно, как бы, на таких ликбезах это показывают,

02:43:36.440 --> 02:43:44.300
вот, и вот так я отправляю крипту, не знаю, там, с того адреса на адрес, то есть я думаю,

02:43:44.300 --> 02:43:51.680
что все это вы можете, там, не знаю, в миллионе туториалов найти, так, давайте сейчас отправить

02:43:51.680 --> 02:43:59.660
между моими счетами куда-нибудь на другой тест, отправлю какое-то количество, там, в Берли эфира,

02:44:00.980 --> 02:44:09.040
вот, в этот момент, смотрите, моя транзакция сформирована, здесь написано примерная плата за

02:44:09.040 --> 02:44:15.860
газ, то есть, вот столько я буду за нее заплачу, как бы, эфира, значит, сейчас где-то подробнее,

02:44:15.860 --> 02:44:25.820
может, что-нибудь есть, так, ну, здесь все побольше для юзеров, ладно, сейчас отправим,

02:44:25.820 --> 02:44:30.160
и по самой транзакции посмотрим, вот, в этот момент, когда я нажал подтвердить,

02:44:30.980 --> 02:44:38.300
метамаск достал мой приватный ключ, поставил, поставил электронную подпись, вот, она пошла,

02:44:38.300 --> 02:44:44.960
как бы, транзакция, она еще пендинг, то есть, она еще висит в транзакцион-пул, ее еще не включили

02:44:44.960 --> 02:44:51.680
в блок, то есть, майнеры, типа, еще пока ее только видят, эту транзакцию, но при этом, смотрите,

02:44:51.680 --> 02:45:00.880
ну, она стоит 21 тысячу газа, вот, здесь, как бы, она гвоздями прибита, потому что отправка эфира,

02:45:00.980 --> 02:45:09.260
это просто константа 21 тысяча газа, вот, там, вот эта вот цена, это сколько я готов заплатить за газ,

02:45:09.260 --> 02:45:19.420
это gasprice, то есть, сколько, как бы, мой кошелек поставил, какую цену за один газ, вот, и, а, ну,

02:45:19.420 --> 02:45:25.960
вот, ее включили, эту транзакцию включили, соответственно, вот этот вот блок, 763-91-17,

02:45:25.960 --> 02:45:29.980
в котором было еще 116, там, транзакций.

02:45:30.980 --> 02:45:33.780
Что-то еще интересного такого как бы показать.

02:45:34.100 --> 02:45:38.300
Ну, вы все равно здесь еще накликаетесь сюда.

02:45:38.660 --> 02:45:42.340
Включили меня на позицию 49 в блоке.

02:45:42.980 --> 02:45:48.080
У моего аккаунта нонс 9, то есть я уже там 8 или 9 транзакций с него отправил.

02:45:48.940 --> 02:45:52.780
Вот. И вместе с этой транзакцией был отправлен 001 эфира.

02:45:52.780 --> 02:45:56.120
Вот они были переданы на мой другой адрес.

02:45:56.120 --> 02:46:02.160
Это проводник блоков, который, по сути, показывает всю информацию о блоках и транзакциях.

02:46:02.280 --> 02:46:11.040
В нем довольно часто приходится сидеть, особенно если разбираешься с платежами, взаимодействием с контрактами и так далее.

02:46:12.060 --> 02:46:15.180
А вторая история – это вот этот кошелек.

02:46:15.400 --> 02:46:23.080
И когда я вам говорил в тот раз, почему это, скажем, поудобнее банковских приложений,

02:46:23.680 --> 02:46:25.880
ну, я вот с этой вот штукой могу ходить.

02:46:26.120 --> 02:46:29.080
В сотню разных финансовых проектов.

02:46:29.420 --> 02:46:36.640
То есть, там, не знаю, поменять, там, не знаю, эфир на доллары, доллары, там, на еще какие-нибудь, там, токены.

02:46:37.120 --> 02:46:45.780
Положить их, там, не знаю, под залог или, там, положить, там, типа, в банк так, что другие, как бы, люди будут брать их в долг, там, за проценты и так далее.

02:46:45.780 --> 02:46:47.360
То есть здесь очень много всего.

02:46:47.940 --> 02:46:53.920
И все это делается при помощи вот этого расширения, вообще без логинов, без регистрации, вообще без всего.

02:46:54.780 --> 02:46:55.980
Это крайне удобно.

02:46:56.120 --> 02:47:02.600
Это прям вообще, как бы, быстро и, честно говоря, там, ну, не знаю, в Тинькофф лень логиниться, очень сложно.

02:47:03.440 --> 02:47:07.280
Какие-то там коды, короче, что-то еще, там, какие-то непонятные, в общем, все.

02:47:07.520 --> 02:47:07.980
Извините.

02:47:08.980 --> 02:47:13.480
А какой смысл майнерам майнить блоки в тестовой сети?

02:47:14.680 --> 02:47:18.760
А это разработчики поднимают, как бы, потому что я могу…

02:47:18.760 --> 02:47:19.520
А, ну, это просто…

02:47:19.520 --> 02:47:20.320
Да-да-да.

02:47:20.320 --> 02:47:24.900
Это для работы, собственно, для обучения, для работы очень удобно.

02:47:26.120 --> 02:47:31.060
Это выкладывать сначала в тестовую сеть, в тестовой сети, как бы, на тестовом эфире все отработать.

02:47:31.680 --> 02:47:38.740
Можно поднять, короче, прям целый, ну, прям весь сайт полноценный, короче, со всем вообще функционалом полностью, как бы.

02:47:38.780 --> 02:47:40.420
Он просто будет, как бы, в тестовой сети.

02:47:41.260 --> 02:47:46.840
А в боевую сеть потом просто скопировать контракты, и все, и, в общем-то, все, как бы, работает.

02:47:48.640 --> 02:47:50.880
Насколько можно доверять этому расширению?

02:47:52.480 --> 02:47:55.140
Ну, как бы, много народу, как бы, доверять.

02:47:55.140 --> 02:48:01.140
Если не доверяете, как бы, можно там двумя строчками на питоне, как бы, пожалуйста, сами себе сгенерируйте, как бы, адреса.

02:48:02.280 --> 02:48:03.720
Вы это и будете делать.

02:48:04.400 --> 02:48:04.580
Вот.

02:48:04.960 --> 02:48:08.060
Сами себе сделайте адреса, подпишите транзакцию, да, отправьте.

02:48:08.160 --> 02:48:13.480
Хотите питоном, хотите JS, как бы, хотите, там, Java, там, чем угодно, как бы.

02:48:14.400 --> 02:48:14.800
Вот.

02:48:15.100 --> 02:48:16.920
То есть здесь, как бы, все просто.

02:48:16.980 --> 02:48:21.260
Он просто, как бы, облегчает вам работу, а так вы можете делать и с консоли все.

02:48:21.260 --> 02:48:24.260
А если вообще паранойя, как бы, то можно…

02:48:25.140 --> 02:48:27.760
Аппаратный кошелек сделать.

02:48:29.400 --> 02:48:29.800
Вот.

02:48:30.500 --> 02:48:44.360
Ну, в общем, грубо говоря, с тем, как переводить, там, не знаю, там, эфир, как бы, поиск кошельками, это вы без меня как-нибудь изучайте, потому что здесь материалов, на самом деле, реально дофига.

02:48:45.480 --> 02:48:45.880
Вот.

02:48:46.440 --> 02:48:46.840
Так.

02:48:47.100 --> 02:48:48.880
Что еще, наверное, там интересное?

02:48:51.400 --> 02:48:54.880
Ну, наверное, важно еще, как бы, заранее, да, сказать, что у контракта…

02:48:55.140 --> 02:49:24.600
У него есть собственный адрес, и, ну, то есть, когда я говорю, мы отправляем транзакцию в контракт, на самом деле, вот в этой нашей State Database, где у нас был, там, у Васи было 10 эфира, у него был nonce, там, не знаю, там, 9, то после того, как Вася выполнил, ну, Вася или кто-то другой выполнил специальную транзакцию create-контракт, создать контракт, здесь же…

02:49:24.600 --> 02:49:37.720
Появился контракт, адрес его контракта, у которого тоже есть баланс эфира, то есть, может быть, нулевой, как бы, но, грубо говоря, контракт тоже может иметь, как бы, эфир на своем балансе.

02:49:37.720 --> 02:49:53.720
У него тоже есть nonce, потому что контракт может создавать другие контракты, и это будет увеличивать nonce, но еще у него есть, соответственно, здесь поле, которое называется код, и вот здесь как раз находится, вот…

02:49:54.600 --> 02:50:17.940
В бинарном виде, как бы, все, вот, по сути, байт-код вот этого контракта вместе с его функциями. Сам контракт очень похож на C++-ный объект, на C++-ные классы, там используются объектно-ориентированные программирования, там, наследование, как бы, там, на самом деле, к плюсам довольно-таки близко, даже не к плюсам, к C, наверное, как бы, даже ближе.

02:50:18.220 --> 02:50:23.200
И еще у этого контракта, что, как бы, важно, у него тоже есть свой собственный storage.

02:50:24.600 --> 02:50:27.380
Хранилище, как бы, в которое он входит, как бы, и может записывать.

02:50:28.340 --> 02:50:43.140
И все это, конечно, тоже попадает вот в тот самый, как бы, в state root, то есть это тоже считается данными блокчейна, которые тоже обновляются, исполняются, все делается в консенсусе, то есть целиком.

02:50:43.140 --> 02:50:52.400
То есть, несмотря на то, что здесь какой-то код, какое-то там хранилище, вроде уже, как бы, вещи такие, которые на разных серверах, как бы, разные, здесь это не так.

02:50:52.560 --> 02:50:54.580
То есть здесь это прям такая единая, очень структура.

02:50:54.600 --> 02:50:59.600
Прогая такая, монолитная, как бы, штука, вот, которая обновляется в консенсусе.

02:51:01.180 --> 02:51:02.820
А код контракта можно менять, да?

02:51:03.560 --> 02:51:05.280
Нет, код контракта менять нельзя.

02:51:06.080 --> 02:51:18.960
Вот, код контракта менять нельзя, как бы, есть, конечно, паттерны, и мы будем их использовать, как бы, которые позволяют, как бы, менять там, ну, делать другую версию контракта, там, деплоить, соответственно, переключаться на нее.

02:51:19.120 --> 02:51:23.960
И, как бы, технически получается, что мы меняем, как бы, сам код контракта для использования.

02:51:24.600 --> 02:51:30.700
страны но так то нет как бы однажды задеплоенный контракт как бы все он как бы гвоздями прибит

02:51:30.700 --> 02:51:37.860
именно собственно почему как бы такой бунт и как бы айсиота бы вот этого краудфандинга как

02:51:37.860 --> 02:51:43.840
бы на эфире там все все видят и все видят что у тебя там в краудфандинге нету функции забрать

02:51:43.840 --> 02:51:51.440
все деньги как бы избежать вот ну то есть потому что ее нету как бы контракт публичный тоже также

02:51:51.440 --> 02:51:58.340
поэтому как бы дефай называют себя там этом не бант короче мы протокол протокол потому что это

02:51:58.340 --> 02:52:03.180
просто тут мы код разместили как вы можете убедиться здесь нет нигде функции которые

02:52:03.180 --> 02:52:08.820
вот мне как бы заберет ваши деньги то есть есть функция которая там под один процент как

02:52:08.820 --> 02:52:15.580
падет как бы по другой процентов дает как бы и это протокол то так как бы работает а как бы

02:52:15.580 --> 02:52:20.680
там нет у нее но я туда ничего не могу добавить ничего не могу изменить пусть он

02:52:21.440 --> 02:52:30.440
здесь еще как бы наверное хорошие базу орды базу орды для блокчейна это паблик ли верифия был

02:52:30.440 --> 02:52:38.040
то есть она как бы до проверяем и публично то есть вы как бы публично можете проверить этот

02:52:38.040 --> 02:52:45.340
код у собственно один из профилей как бы компании ну собственно наши как раз аудиты то что мы до

02:52:45.340 --> 02:52:50.880
убеждаемся что этот код реально делает то что то что описано в документации

02:52:51.440 --> 02:52:57.260
но помимо как бы до поиска там багов как бы именно безопасности но по-хорошему да как бы

02:52:57.260 --> 02:53:03.740
убеждаемся что да вот здесь нет там функции закладок там например там каких-нибудь которые

02:53:03.740 --> 02:53:13.640
позволяют вытащить там все только так далее вот так но на самом деле уже даже не хочется

02:53:13.640 --> 02:53:20.420
забегать вперед вот потому что там следующий тоже будет мы прям посмотрим с вами контракты тоже так

02:53:21.440 --> 02:53:27.860
вверх не уровню потыкаемся в разные проекты и про газ соответственно и про сложность про все это

02:53:27.860 --> 02:53:34.880
обязательно как бы поговорим и ну соответственно и после этого начнем уже потихонечку сами как бы

02:53:34.880 --> 02:53:43.340
на солидите писать там не знаю выбирать курсовой проект вот делать как бы задания ну а дальше уже

02:53:43.340 --> 02:53:51.260
когда уже хорошо прям погрузимся солидите во все там паттерны как бы по всю эту историю как бы мы

02:53:51.440 --> 02:53:58.880
еще копнем как бы с вами в криптографию и в пилинговые сети консенсус и так далее то есть это то что

02:53:58.880 --> 02:54:07.280
можно изучать на самом деле по ходу вполне ну вот так давайте еще вопросы и наверное на сегодня все

02:54:07.280 --> 02:54:16.640
еще сегодня наверное сегодня может отформатируем я сегодня опубликую все домашки вот скину ссылку

02:54:16.640 --> 02:54:21.380
как бы на все домашки как бы чтобы вы могли выбрать что вы хотите как бы делать из этого там

02:54:21.440 --> 02:54:29.840
вторым третьим что понравится вот что могли получить свой семестр распланировать как и было

02:54:29.840 --> 02:54:37.400
написано в программе треть ну то есть там 30 баллов из 100 это курсовой проект вот если хотите как бы

02:54:37.400 --> 02:54:44.300
можете там не знаю опять же там на хакатон если х и если у вас есть как бы там два компонента

02:54:44.300 --> 02:54:50.580
курсового проекта вы хотите там не знаю там и фронт написать может быть там б короче и контракты

02:54:51.440 --> 02:54:56.960
то можете объединиться там в команды например там по два человека вот будет отличить соответственно

02:54:56.960 --> 02:55:05.660
там вдвоем сдачи курсового проекта она похожа как бы на не знаю нам презентацию для инвестора какому

02:55:05.660 --> 02:55:13.100
технологического пытаетесь продать как бы мне как бы ну соответственно свой проект при этом

02:55:13.100 --> 02:55:20.180
я еще буду смотреть соответственно как там это все закожено вот и ребят на что же как бы аудитора

02:55:21.440 --> 02:55:30.320
вот так все по домашним сказал очень сегодня ссылку скину изменение там будут скорее всего

02:55:30.320 --> 02:55:38.220
только косметические за домашних 70 баллов соответственно сумма вот у меня есть вопрос

02:55:38.220 --> 02:55:44.080
по by zantin фолк талеранс как мы можем узнать что двум третьим можно доверять это какие-то

02:55:44.080 --> 02:55:50.740
доверенные надо должны мне это нет это это чисто такое как бы формальное предположение то есть мы

02:55:51.440 --> 02:56:01.640
это это сеть не будет никогда как бы остановлена и в ней не появится короче небезопасных блоков при

02:56:01.640 --> 02:56:08.300
условии при строгом условии что больше 2 2 3 следует протоколу мы сказать не можем как бы

02:56:08.300 --> 02:56:15.620
да там сколько там сейчас то есть это просто по сути ну ну как это такое как бы как ты пишешь

02:56:15.620 --> 02:56:21.420
что там статье как бы что не знаю это машина будет ехать как бы при условиях

02:56:21.440 --> 02:56:28.400
если не знаю там градус наклона не больше там 60 градусов а вот азиат но здесь есть прям вот

02:56:28.400 --> 02:56:34.700
конкретное число типа если вот это число как бы выполняется то такие свойства они как бы со

02:56:34.700 --> 02:56:42.180
стопроцентной вероятностью протокола исполняются то есть если больше двух трети честных современных

02:56:42.180 --> 02:56:50.780
пруфов стейках никто не сможет но если под прям если прямо не знаю там шестьдесят семь из девяносто

02:56:51.440 --> 02:57:03.980
матчей как OS на этот день но только любые такие обзоры да это же порядок существенно

02:57:05.460 --> 02:57:13.440
то есть dessas vitamin будет к stake świat школа

02:57:13.440 --> 02:57:15.940
along hd

02:57:15.940 --> 02:57:18.560
общаться с

02:57:18.560 --> 02:57:19.120
игровым

02:57:19.120 --> 02:57:21.280
к

02:57:21.280 --> 02:57:21.440
R对

02:57:21.440 --> 02:57:29.480
и такие захваты кстати и были вот уже тоже поговорим интересные истории ну то есть в

02:57:29.480 --> 02:57:36.280
теории ничего не мешает поднять много зловредных нот ничего не мешает как бы но деньги в пруфов

02:57:36.280 --> 02:57:41.440
стейки и вы пожалуйста да как бы если у вас есть там много миллиардов долларов кэш можно

02:57:41.440 --> 02:57:49.180
как бы захватить и так вот что ты делаешь там не вас был там захвачен там например там тут

02:57:49.180 --> 02:57:55.300
вообще на самом деле происходит куча таких 8 штук получили за что мы как были у которых

02:57:55.300 --> 02:58:04.180
все аналоги в общем-то нету в таком как бы в централизованном мире и разработка чуть-чуть

02:58:04.180 --> 02:58:09.240
другая как бы истории там совсем другие и безопасность другая как бы вот она все

02:58:09.240 --> 02:58:17.020
базируется на тех же принципах там техника практически там тоже как бы но много всего

02:58:17.020 --> 02:58:18.560
еще мега интересного

02:58:19.180 --> 02:58:25.860
да там были захваты сетей там тоже были если у нас небольшая сеть как мы можем обеспечить

02:58:25.860 --> 02:58:26.820
бизонтина фолкторио

02:58:26.820 --> 02:58:38.940
никак как-то заставить как бы больше двух третий как бы быть честными ну то есть никак если они

02:58:38.940 --> 02:58:44.220
сговорятся как бы если у вас там три валидатора как бы там или там 5 короче там четверо из них

02:58:44.220 --> 02:58:49.020
сговорятся как бы сорян ну то есть они могут

02:58:49.180 --> 02:58:59.800
что хотят делать хорошего смешно было в заметках типа что лучший блокчейн это блокчейн и в которых

02:58:59.800 --> 02:59:06.760
валидаторы ненавидят друг друга искренне вот как бы там не знаю там прямо где упали прям

02:59:06.760 --> 02:59:15.340
идеальный блокчейн это не знаю cb китае цб россии цб сша и еще там куча всяких разных

02:59:15.340 --> 02:59:18.820
они как бы

02:59:19.180 --> 02:59:25.500
не смогут без задобрения как бы других ничего делать с протоколом при этом он сам при бы нужен

02:59:25.500 --> 02:59:32.560
для работы для проведения там не знаки международных платежей как бы я не другу не доверяют они себя

02:59:32.560 --> 02:59:39.400
перепроверяют как бы там все блоки все транзакции как бы следят за ними как бы то есть чем меньше

02:59:39.400 --> 02:59:49.180
и другую верить и лучше прекрасно как мне кажется очень интересно но вообще вы поэтому в этом

02:59:49.180 --> 02:59:55.680
курсе узнаете что не эфир не bitcoin на самом-то деле как мне особо не особо-то они децентрализованы

02:59:55.680 --> 03:00:04.100
сказать как бы и пруфов стейки тоже как бы там здесь там киты с большим количеством денег там

03:00:04.100 --> 03:00:11.460
как бы майнинговые пулы которые тоже огромные мощи как бы обладают и что bitcoin манится там

03:00:11.460 --> 03:00:18.400
десятка майнинговых полов всего десяткам никаких там миллионов майнеров нету как бы никто пока не

03:00:19.180 --> 03:00:30.100
такого вот так что так так ладно все 15 1 все заканчиваем тогда так

