start	end	text
0	12960	всем привет начинаем лекцию сегодня можно нашу самую первую лекцию немножко как бы почему эта
12960	19200	лекция такая в общем то это было обсуждение со студентами то есть прошлый раз мы проходили по
19200	26080	программе проходили там сначала криптографию пиринговой сети там не знаю консенсус и так
26080	32280	далее и так далее и только потом соответственно уже на всем на всей этой базе как бы врывались
32280	39040	там смарт-контракты вот но и оказывалось так что в конце семестра ну то есть самый такой как бы
39040	45840	важный код как бы студенты щупали в конце семестра только уже уже когда уже там сессии на носу вот и
45840	52420	поэтому было решено сначала сделать пару лекций вы такие как бы входные мы прям верхний уровень
52420	56020	его пробежимся как бы что это такое уже посмотрим
56080	61840	на код смарт-контрактов как бы научимся их там запускать а потом уже в течение всего курса
61840	72600	будем все глубже и глубже погружаться вот то есть там не знаю верхний уровень обсудим верхний уровень
72600	78460	обсудим там например там не знаю криптографию потом на лекции и более глубоко рассмотрим вот
78460	84400	ну и то же самое касается там не знаю консенсусов различных там в общем
86080	92980	ну что всего поехали еще это за я немножко рассказал на входной лекции как выглядит
92980	100480	разработка здесь а теперь собственно что собой представляют именно публичные блокчейна вот на
100480	108480	каких собственно основных примитивах они строятся значит такое самое простое объяснение это такое
108480	113500	если вы хотите как бы человеку кому-то объяснить как бы может сказать типа ты торрентами пользуешься
116080	121660	может поrie там понимать какой будет бог чей у нас есть какой-то там пользователь не знаю там вася
121660	129580	который отправляет транзакцию гуда там в неизвестно кому как бы то есть отправляет первым попавшимися
129580	136400	компьютеру который следует протоколу чейна который будет делать как бы то что и этот
136400	141520	компьютер рассказывает с остальным компьютером про транзакцию пользователя а потом не знаю
141520	145360	там может там это деньги в этой транзакции лежат может быть и нет
146080	151320	И вдобавок еще получает информацию о соседях других компьютеров,
151440	154340	то есть они меняются постоянно, информация о конфигурации сети,
155060	160620	кто-то включается, кто-то выключается, часть этой сети можно отрубить,
160700	163800	но она продолжит все равно распространять информацию,
163900	168600	потому что по дефолту, то есть все вот эти, мы их будем называть блокчейн-ноды,
169500	173260	они по дефолту обмениваются друг с другом всей информацией,
173260	177300	которая соответствует формату, то есть пришла, не знаю, транзакция,
178100	179560	она это распространяет.
179700	183860	Здесь ничего сложного особо нет, здесь обычный JSON, RPC,
184200	187880	если кто занимался веб-программированием, интерфейс,
188340	192580	просто в JSON делает какой-то метод send transaction,
192820	195900	отправляется как бы там в пейтабайтики,
196520	199240	и дальше нода начинает про эту транзакцию рассказывать всем остальным
199240	201560	и получать из сети блоки.
202400	203040	Вот.
203260	209700	Значит, в чем фишка вот этого, ну вот всех вот этих вот блокчейн-технологий
209700	213040	от существующих решений?
213620	215360	То есть здесь никакого лучшего места здесь нету,
215420	219080	это блокчейн, это просто по сути как бы такой отдельный вид софта,
219520	224420	немножко как бы, который обладает одним очень-очень важным свойством.
224560	228200	Смотрите, если у нас есть какое-нибудь там банковское приложение,
228200	232000	там какое-нибудь, не знаю, ну, проще всего вообще показывать на финансах,
232120	233200	и это, кстати, один из примеров.
233260	237160	Почему как бы крипта – это именно типа крипта, именно деньги?
237800	240900	Да просто потому, что как бы деньги – это всего лишь на всю информацию.
241320	241520	Вот.
241640	242260	Вам не...
244860	250480	О, господи, я не транслирую экран.
250800	251700	Все, понял.
252420	255120	Так, надо было меня оттянуть.
255500	256700	Так, давайте вот так вот.
257040	258700	Все, вот теперь я транслирую экран.
260700	261280	Так, да.
261280	263220	Я, собственно, да, рисую здесь.
263260	264260	Такую штуку.
264900	267220	У нас Вася, да, отправляет транзакцию в какую-то сеть,
267300	270760	и вот здесь вот как бы ноды меняются друг с другом информацией.
272380	276560	Значит, если мы работаем с каким-нибудь банк-клиентом,
276680	278600	не знаю, там, со Сбером, как бы Тиньковым,
278640	281220	мы говорим, там, отправь там 100 долларов,
281640	283040	там, к тому-то, к тому-то, как бы,
283460	286380	и в банке есть табличка,
286380	288800	где написано, что у Васи было там 200 долларов,
288960	290820	как бы, и стало у него как бы 100 долларов,
290960	293000	а у Пети как бы стало плюс 100 долларов,
293000	293780	как на балансе.
293840	295440	То есть, по сути,
296380	299180	финансовые приложения, они оперируют только информацией,
299240	300940	поэтому они такие довольно простые.
301520	303460	Ну, то есть, с точки зрения надежности,
303540	305820	как бы, там, и требования к ним.
306740	307080	Вот.
308120	312820	И, предположим, этот банк расположен на нескольких континентах,
312820	317300	и, как бы, вот это вот расстояние между компьютерами,
317440	319700	между этими базами, оно достаточно существенное.
319920	322040	А вам нужно поддерживать консистентную базу.
322160	322980	У вас и здесь у Васи,
323000	324440	должно стать 100 долларов,
324500	326280	а у Пети, как бы, там, соответственно,
326320	327700	добавится 100 долларов на баланс.
327800	331460	И здесь вам надо как-то распространить эту информацию.
331520	332800	Здесь достаточно целостно.
333040	337000	И здесь есть прям, как бы, ключевая проблема безопасности.
337740	339680	Она в блокчейнах называется double spend,
341100	342080	ну, двойная трата.
342260	343980	Но относится она, конечно же,
344120	345260	ну, не только к блокчейну,
345300	347180	а вообще к распределенным системам.
347720	349120	То есть, если Вася вот здесь, вот, как бы,
349180	350600	потратит свои 100 долларов,
350600	352960	и одновременно вот здесь,
353000	354500	вот, потратит свои 100 долларов,
354580	356840	а у него на балансе всего, как бы, 100 долларов,
357980	359500	то, соответственно, возникнет конфликт.
359580	360960	Надо будет что-то делать там.
361000	362280	Соответственно, надо будет выяснить,
362320	364200	какая здесь транзакция была первая.
364280	366520	Здесь они могли, как бы, пока они там встретятся,
366540	367500	эти два сервера,
368000	370220	может, там, не знаю, интернет пропал в этот момент.
370240	373800	То есть проблем довольно много, как бы, существует.
374180	377280	И для этого в базах данных существуют механизмы,
377320	378920	которые называются репликация.
379760	382260	То есть реплики,
382260	384840	а вот эти вот, как бы, компьютеры,
384880	387020	которые принимают транзакции от пользователя,
387060	389440	причем, как бы, именно пишущие транзакции.
389480	393700	Пишущие – это инсерты, апдейты, делиты.
394160	397380	Кстати, базы данных, наверное, как бы, у многих, да, были, как бы, там,
398480	402140	более-менее, как бы, может быть, там, знаете, как бы, там, SQL.
402180	409100	В общем, все транзакции, которые записывают информацию в базу данных,
409140	412220	как бы, пишущие, там, вставка, апдейт и удаление,
412240	414080	информации, как бы, в базе данных,
414120	416600	они попадают в так называемые мастер-реплики.
416640	419260	То есть мастер – тот, кто пишет базу данных.
419300	424120	Потому что у сервисов может быть, там, не знаю, там, тысячи слейв-реплик,
424140	426660	то есть которые только отдают информацию только на чтение,
426680	428740	то есть они не записывают.
428760	432420	И вот эти вот алгоритмы называются алгоритмы репликации.
432440	436820	И в распределенных базах данных, как бы, в таких больших, там,
436840	440120	соответственно, они есть, если вам интересно про эти алгоритмы почитать,
440140	442060	это алгоритм известный Raft.
442060	444060	И второй, как бы, Paxos.
444080	448260	То есть он, ну, говорит о том, что, там, Noda, там, пошла сюда,
448280	451020	предложила, там, закоммитить какой-то блок транзакций,
451040	454880	это ей говорит «да, я согласна», значит, это все, там, за это голосуются,
454900	457540	собираются, там, голоса с других, как бы, реплик.
457560	461900	И там, если какой-то порог перевален, то, соответственно,
461920	463560	транзакция считается закоммитченной.
463580	466880	И есть, там, формальные доказательства, что, как бы, это надежно.
466900	471700	Вот. Но у всех этих алгоритмов,
471700	477560	которые используются в банках, они устойчивы только к падениям вот этих вот нод.
477580	481720	То есть к тому, что, там, где-то вырубится интернет или какой-то мусор будет отдан
481740	486640	в данном случае, они не защищены от, так называемого, византийского поведения.
486660	492640	Византин, там, ключевое слово «византин», Fault Tolerance.
493860	496840	То есть устойчивость к византийскому поведению.
496860	500760	У них этот парадигма называется Crush Fault Tolerance.
500780	501680	То есть, если что, они не могут, они не могут, они не могут, они не могут, они не могут, они не могут, они не могут.
501680	506380	Если что-то упадет и сломается, как бы, то, как бы, систему сдюжат, как бы, да.
506400	512020	Там, если осталось достаточное количество серверов, то потом DevOps включит новую реплику,
512040	517180	и она автоматически других догонится, как бы, и заполнится валидными данными.
517200	520860	Но если в этой сети появляется византийский участник,
520880	526940	а византийский имеется в виду такой, как бы, предатель, то есть, который намеренно действует зло,
526960	531680	то есть он не просто, как бы, выключает компьютер, хотя может, конечно, и просто выключить,
531700	534520	а он начинает дезинформировать другие ноды.
534540	537880	То есть он, у него захвачен вот этот компьютер, как бы, и он говорит, там,
537900	542400	Вася потратил здесь 30 долларов, этому, говорит, потратил 50 долларов.
542420	546360	То есть он вносит, как бы, хаос в работу, и система перестает работать.
546380	550540	Вот эта вот консистентность вот этих баз данных, как бы, она нарушается.
550560	555460	То есть они могут, ну, прийти, как бы, в состояние, что там на разных репликах разные данные.
555480	557080	Это можно эксплуатить.
557100	561320	Вот блокчейны, они являются, ну, то есть, как бы, истинным, там,
561320	564080	настоящим, они являются Byzantine Fault Tolerance.
564100	569700	То есть они устойчивы к тому, что в них находятся, прям, намеренно злые участники,
569720	574320	которые прям хотят, как бы, атаковать сеть, которые хотят, как бы, всех, там, завалить, как бы,
574340	579420	я не знаю, там, найти какой-то баг и заставить всю сеть остановиться.
579440	585760	Вот, поэтому, как бы, в блокчейнах требования к безопасности вот этих протоколов, они сильно выше.
585780	590940	Вот, ну, и эту безопасность обеспечивают они за счет экономики.
590940	596440	Там есть часть, как бы, именно, которая, по сути, как бы, является экономической безопасностью, вот.
596460	600100	То есть, там, будешь действовать, как бы, плохо, будешь, там, что-то не то делать,
600120	605180	будешь либо терять ресурсы вычислительные, как бы, если, там, нечестный майнер,
605200	607540	либо тебя будут наказывать, там, деньгами и так далее.
607560	609740	Обо всем этом мы очень подробно с вами поговорим.
609760	613440	То есть вот это вот самое, наверное, важное, как бы, свойство блокчейнов.
613460	619380	BFT, то есть, как бы, Byzantine Fault Tolerance, устойчивость к византийскому поведению.
619400	620760	При этом надо не забывать, что...
620760	628760	Требования, вот, к этому византийскому поведению, они, у них есть специальные численные параметры,
628780	633880	то есть соглашения, то есть, например, если взять современные алгоритмы консенсуса,
633900	638440	которые, там, типа, не майнинг, а такие детерминированные, то есть,
638460	645040	то там есть прям жесткое требование, что больше двух третей участников, вот этих, вот, как бы, нод,
645060	649820	которые протокол, которые производят блоки, которые обрабатывают транзакции,
649820	654460	они являются честными, то есть, честными имеется в виду, просто следуют протоколу,
654480	661480	то есть, скачали код с гитхаба и, как бы, в ключевых местах ничего не меняли, как бы, запустили ноду,
661500	665860	вот она работает, вот, в точности, как бы, так, как предписано протоколом.
666440	672500	Вот в случае, если вот это требование выполняется, то есть, если больше двух третей, как бы, являются честными,
673300	679560	то есть, по сути, формальное доказательство того, что сам блокчейн является византийско устойчивым.
679820	687000	Вот это вот оставшиеся меньше одной трети, как бы, участников, они могут быть сколь угодно, как бы, злыми,
687560	693280	там, любые действия предпринимать, как бы, пытаться, там, не знаю, там, что угодно сетью сделать, как бы, у них ничего не получится.
693760	698840	А вот если кто-то захватил больше двух третей, как бы, тогда, да, он, там, контролирует эту сеть.
699700	706720	Вот, если, как бы, злоумышленники захватили одну треть, прям ровно, если у вас, там, 99 нод, как бы, у злоумышленников есть 33,
707420	709680	то они в современных системах, они могут...
709820	716320	остановить блокчейн, то есть, они не могут, как бы, подсунуть, там, неверные данные, не могут, там, изменить, соответственно, там, код,
716400	722740	но они могут, по сути, просто остановить процессинг, вот, ну, просто вырубив свою одну треть, как бы, выключив ее,
723340	725100	и сеть, как бы, дальше не пойдет.
726380	732840	Вот, в общем, про все это поговорим, то есть, нам сегодня с вами, как бы, не важно, как они вот здесь вот договорились,
733380	739560	то есть, у них есть вот эти протоколы консенсуса, мы их будем рассматривать, там, proof of work, proof of stake, там,
739820	748840	и так далее, но нам для... с вами, как бы, важнее гораздо сегодня, как бы, процесс распространения транзакции в блокчейне,
748840	752600	то есть, и вообще для чего, ну, и как все внутри происходит.
753940	762680	Значит, сами блокчейны, их основная задача, вот у нас есть, там, не знаю, там, куча компьютеров, которые согласились следовать протоколу,
762840	768780	вы скачали с гитхаба, там, не знаю, ноду блокчейн, запустили ее, и вы, типа, согласились, типа,
769820	775900	сети, там, себя, там, честно вести, как бы, будут там, будут там что-то делать, значит, соответственно,
776540	778600	ради чего они все это делают.
779880	785460	На самом деле, во всех, все, биткоин, эфир, там, не знаю, там, полк и дот,
785860	793120	для нас с вами, как пользователей, мы заходим с вас, там, не знаю, там, на сайт на какой-нибудь крипту,
793120	797420	там, спрашиваем, там, какие там балансы, что там, какие там, не знаю, проценты, какие есть проекты,
797860	799780	регистрируем что-то в смарт-контрактах.
800360	804340	Мы общаемся с какой-то из вот этих нод, и откуда она берет информацию?
804440	811500	У нее есть на борту своя собственная база данных, вот, мы ее будем называть state database,
812540	818380	вот, state db, как бы, или даже просто там state, как бы, можно сказать, как бы, состояние блокчейна.
818960	825980	И вот эта вот база в блокчейнах, она ровно одна и та же с точностью до последнего бита,
825980	829620	то есть там нету, ну, если это рассматривать как табличку,
830380	834980	там, не знаю, там, у Васи, там, не знаю, 100 долларов, там, у Пети, там, 200 долларов,
835120	837940	ну, там, понятно, что там куча, может, разной инфы, как бы, хранится,
838580	845840	но вот эта вот база, она одна и только одна на всех абсолютных компьютерах сети,
845960	849480	которые следуют протоколу, вот, которые, как бы, честные, вот эти вот,
849700	853500	то есть если они все правильно сделали, как бы, с самого начала до самого конца,
853500	858440	у них будет ровно одна и та же версия вот этой базы, причем без лишних ключей,
858460	859500	то есть ничего.
859820	865700	Не часть базы будет верна, там, там, не, там, не с точностью, там, до каких-то копеек,
865820	871240	а вот просто чисто прямо в бинарном виде, то есть вот само битовое, как бы, представление,
871340	875420	если взять там все ключи значения, как бы, разложить их в один файл,
875800	876840	то он будет один и тот же.
877840	886400	И все это, вся вот эта вот база, как бы, она одна и та же при условии наличия на ноде,
886400	889060	вот на этой, одного и того же набора блоков.
889820	893120	И теперь уже переходим, как бы, к тому, как бы, что такое блоки.
895400	902120	Значит, пользователи отправляют свои транзакции сюда, там, не знаю, в какую-то ноду,
902440	909260	они там, как-то там, здесь распространяются по сети, и транзакция, ну, там, не знаю, там, Вася,
910120	917460	с адреса Васи на адрес Пети, как бы, переводит 10 эфира, подписывает это все электронной подписью,
917460	919220	сейчас про нее, как бы, тоже поговорим.
919820	921060	Отправляет куда-то в сеть.
921760	923380	Значит, что происходит в сети?
924320	930680	Эта транзакция распространяется по куче других компьютеров, пока не добирается до компьютера,
930760	932740	который будет производить следующий блок.
933680	939900	К этому моменту на всех этих машинах уже, как бы, какое-то количество блоков есть, там, не знаю, там, есть, там,
940320	942660	все, там, до какого-то этапа, как бы, дошли.
943420	946860	Блоки точно так же по вот этой пиринговой сети распространяются,
946860	949060	то есть, как только какая-то нода видит блок,
949820	955160	она его проверяет, говорит, что он валит, ну, и если он хороший, как бы, то она его передает всем остальным.
955720	959060	Она говорит, я увидела, как бы, новый блок, вот этот, ну, вот здесь вот по два,
959320	964480	там, не знаю, там, 47, 48 блок номера, а вот у этой появился 49.
964480	969420	Она говорит, о, ребята, у меня есть 49, как бы, вот, забирайте, как бы, он хороший, я его проверил.
970420	979720	Вот. Соответственно, если блок, как бы, корявый, то нода, конечно, его просто не пересылает, как бы, поэтому, по сути, как бы, ну, то есть, если кто-то произвел,
979720	987020	какой-то, там, поддельный, как бы, блок, ну, такой, или блок с ошибкой, или блок, который, там, не следует протоколу, короче.
987020	998320	В общем, хотя бы, там, на шаг отступил, как бы, от процедуры, вот, этой проверки блока, то, как бы, его софт, как бы, он даже передавать не будет дальше этот блок, то есть, он так и будет, как бы, там, сидеть.
998320	1009020	Ну, он, конечно, может насильно его передать другим нодам, но, как бы, он его запихал в другую ноду, она тоже его проверила, она честно, она говорит, а я дальше не буду распространять, вот.
1009720	1020660	Соответственно, в блоках находятся пачки транзакций от пользователей, тоже это все, прям, отдельная, большая, как бы, песня, как они процессятся, значит, что там происходит.
1021820	1033280	И вот эти транзакции, когда нода получает хороший валидный блок, они накатываются на вот эту state database последовательно, причем на каждой из вот этих вот машин.
1033280	1039120	То есть, любой компьютер в сети, как бы, он скачал блок, берет оттуда транзакции, конечно, проверяет их.
1039120	1041020	И накатывает на эту базу данных.
1041140	1050020	Вот здесь где-нибудь наша вот эта транзакция, Вася, который переводит Петя, 10 эфира, и у Васи, соответственно, списывается 10 эфира, а Пете добавляется 10 эфира.
1050560	1059520	То есть, это одна транзакция, потом вторая, потом третья, где-то здесь, там, добавляются еще, там, какие-то, там, операции, там, в балансе с данными и так далее.
1060040	1063180	То есть, все это вот так вот, как бы, накатывается на базу данных.
1064640	1069080	Далее, как бы, в блокчейнах есть процедура отката блока, и это не...
1069120	1072980	Ну, не что-то такое прям страшное, как бы, это совершенно штатная процедура.
1072980	1078200	Потому что все компьютеры в этой сети видят друг друга в разное время.
1079040	1084680	И вот у нас один произвел блок, номер там, ну, давайте, 50-й блок он произвел.
1087160	1097620	Давайте я, собственно, как в обычных там лекциях, да, как бы, я, в общем, говорю, что пиринговую сеть с транзакцией можно рассматривать просто как доску объявлений.
1098240	1098980	Публичную совершенно.
1099120	1102540	То есть, везде, как бы, все видят абсолютно, как бы, все транзакции.
1103400	1109180	Вот. Ну, через какое-то время, понятно, разные в разное время, как бы, видят разных версий, но, тем не менее, как бы, все.
1110420	1115560	Транзакция, как бы, она улетела в P2P, она там полностью доступна, как бы, кто угодно ее может скачать.
1116020	1118320	И точно такой же у нас блок с пул.
1118920	1126200	То есть, такой же, как бы, пиринговый, по сути, как бы, пул, в котором те, кто хотят произвести блок, они его публикуют.
1126200	1128200	Вот мы дошли там до блока...
1129120	1129880	Блок номер 49.
1130280	1135440	Вот наша, как бы, транзакция, вот эта Васина, как бы, она, вроде бы, должна попасть в блок номер 49.
1136120	1146660	У нас есть, появился майнер, который пошел в транзакцион-пул, набрал себе в нем, там, сколько-то транзакций, не знаю, там, тысячу, две, как бы, как протоколом определено.
1147160	1151340	Наберет себе 10 тысяч транзакций, как бы, все остальные, как бы, его блок выкинут.
1151580	1159100	Скажет, типа, чувак, по правилам, по спецификации, по коду, как бы, в блоке должно быть не больше, там, двух тысяч транзакций.
1159120	1162320	Как бы, так что, твой блок невалидный, как бы, сам дурак.
1163000	1166940	Вот, поэтому он берет, там, не знаю, там, две тысячи транзакций и создает блок номер 50.
1168340	1170800	Там все эти транзакции перечислены, там, и так далее.
1172980	1186660	Собственно, само слово, как бы, блокчейн, как бы, цепочка блоков, она построена на том, что хэш предыдущего блока включается в хэш следующего блока.
1186660	1188840	То есть, например, в 50-м блоке.
1189120	1192180	Вот здесь, вот, как бы, там, давайте его покрупнее нарисуем.
1193140	1193500	Вот.
1194120	1196280	Здесь находится хэш 49-го блока.
1196400	1199440	А у 49-го, как бы, 48-го, 47-го.
1200000	1204620	Из природы хэширования, сейчас тоже про нее даже чуть-чуть поговорим.
1205460	1211720	Понятно, что, испортив хотя бы один бит вот в этом вот блоке, мы испортим очень сильный его хэш.
1212080	1215620	Соответственно, испортили бит и в этом блоке, испортили бит и в этом блоке.
1215620	1218520	И так вот, как бы, по цепочке вся эта штука прошла.
1219120	1224500	А валидировать блокчейн мы можем, начиная с самого первого блока, с нулевого.
1224620	1227660	У него есть название, специальное, Genesis называется.
1229320	1229840	Genesis.
1230780	1232080	Вот, нулевой блок.
1232620	1241900	И, начиная с него, можно перепроиграть весь блокчейн, вот, прямо все транзакции, начиная, как бы, с первого блока и вот до текущего.
1242500	1249000	Когда вы ставите, как бы, ноду эфира или ноду биткоина, она, ну, понятно, там.
1249120	1271100	Есть куча всяких технических ухищрений, как ускорить этот процесс, но, как бы, в теории, самый, как бы, такой, самый секьюрный и надежный из этих процессов, это прямо берем первый блок, накатываем все транзакции из него, берем первый блок, накатываем все транзакции, второй, третий, миллионный, миллиардный блок и, наконец, доходим до того, который, вот, прямо вот сейчас, как бы, создается.
1271100	1279020	И у нас консистентная StateDB, точно такая же, как у остальных, как бы, все остальные, как бы, видят в этой StateDB ровно то же самое, что и вы.
1279120	1285920	Вот, ну и проверяется, да, вот это наследование блоков проверяется за счет включения хэша предыдущего блока.
1286900	1309100	Вот, значит, вот у нас, как бы, вот этот вот, я его назвал M-Miner, но уже можете отучаться, как бы, от этого слова, вот, уже это так не так уж особо, как бы, популярный эфир, буквально несколько дней было огромное событие в эфире, прям очень серьезное, как бы, это он перешел на Proof of Stake, поэтому никого майнинга не было.
1309120	1318880	И теперь, как бы, в эфире на видеокартах, ну, радостная новость, как бы, да, видеокарты теперь сильно подешевеют, вот, потому что майнить эфир уже будет не нужно.
1321440	1338900	Называются вот эти вот ноды, которые производят блоки, там, не знаю, валидаторы, Validators, там, в эфире во многих сетях, как бы, называются валидаторы, как бы, ну, и еще самое, наверное, точное название было Block Producers, то есть, в одной из сетей, как бы, это было.
1338900	1366760	И, по мне, самое точное название, то есть, это ноды, которые хотят произвести блок в блокчейнах, так как это большая публичная пилинговая система, вы можете, кто угодно может произвести блок, там, ну, при наличии, там, у него определенных ресурсов, если это майнинг, у него должна быть, там, огромная вышлитная мощность, если это Proof of Stake, у него должны быть, там, замороженные, там, деньги на балансе, там, и так далее, и так далее.
1367360	1367960	Вот.
1368900	1371880	Производит вот этот наш майнер 50-й блок.
1371880	1394880	В этот момент второй майнер, глядя тоже на блокчейн вот в этом состоянии, то есть, он тоже докачал пока до 49-го, он тоже производит 50-й блок, он берет другие, как бы, транзакции, ему они, не знаю, больше понравились, и более того, он видит, как бы, этот транзакцион-пул со своего ракурса, то есть, он там, не знаю, в Китае, как бы, а первый майнер в Америке, они видят разные наборы транзакций.
1395560	1398880	Он создал, короче говоря, свой собственный 50-й блок.
1398900	1407840	И в блокчейне, ну, то есть, те, кто следует протоколу, еще раз повторяю, как бы, ноды, они качают этот блок тоже, номер 50-й.
1408320	1415620	И в этот момент как раз начинает работать алгоритм консенсуса, который выбирает из этой цепочки одну и только одну истину.
1416680	1425160	То есть, ну, в разных алгоритмах сделано по-разному, вот, но все вот эти блоки, они все сохраняются.
1425160	1428880	То есть, ну, приходится за безопасность, как бы, да, так платить, как бы, блокчейн.
1428900	1433800	И даже вот эти вот ошметки боковые сохраняют, тем не менее.
1434460	1435300	Значит, почему?
1436780	1443480	Представьте ситуацию, значит, сначала 50-й наш, как бы, ну, сначала первый майнер, как бы, создал блок номер 50.
1444340	1445200	Сеть его приняла.
1445820	1448680	Вот, в этом 50-м блоке была Васина транзакция.
1449220	1454340	Вот она, как бы, Вася доволен, значит, он отправил там кому-то там 10 эфира или недоволен.
1455060	1455420	Вот.
1455420	1458740	А потом пришел второй майнер, и он Васину транзакцию не...
1458900	1459220	Не видел.
1459960	1462600	Он создал 50-й блок без этой транзакции.
1463260	1467460	Но алгоритм консенсуса выбрал его блок как правильный.
1468620	1471580	То есть, в этот момент происходит откат.
1471900	1476780	То есть, если кто в базах данных, то там это называется rollback, откат транзакции.
1477240	1479640	Там, не знаю, в смарт-контракте называется revert.
1480280	1484620	Значит, все эффекты вот этого блока полностью удаляются.
1484620	1488820	То есть, база данных откатывается к предыдущему состоянию, которое было.
1488900	1490100	На 49-й блок.
1490200	1493480	И накатывается, как бы, то, что было в 50-м.
1494020	1496580	То есть, теперь в этом state db состояние новое.
1497520	1502120	Понятно, что не все успели, не все увидели, как бы, вот этот вот 50-й блок.
1502580	1502780	Вот.
1502880	1507620	Но все равно при одном и том же наборе блоков, когда все скачают вот это вот все,
1508020	1512300	у них все равно, как бы, будет вот этот вот state db в одном и только одном состоянии.
1513980	1517800	Возможна ситуация, когда, значит, первый наш майнер не сдается,
1518900	1525600	создает блок номер 51, указывая в качестве родителя, родительского блока, блок 50.
1526040	1527640	Вот этот, кстати, блок называется uncle.
1529400	1532720	Uncle blocks, как бы, они называются, как бы, то есть, дяди.
1533480	1535120	Там, типа, братья-папы.
1535660	1536100	Вот.
1536300	1537060	Или там, мама.
1538360	1545920	Соответственно, он продолжает, короче, майнить и, как бы, создает 51-й блок на основе 50-го блока.
1546320	1548880	И консенсус может спокойно выбрать.
1549240	1554400	Что вот теперь, когда появился 50-й блок, мне уже вот эта цепочка не нравится,
1554660	1556400	а нравится вот эта цепочка.
1556900	1561900	И тогда тоже вот здесь происходит откат, как бы, и накатываются транзакции вот из этой подцепочки.
1562800	1563300	Вот.
1563400	1565700	То есть, такая ситуация здесь тоже возможна.
1565800	1569000	То есть, блокчейн на конце, он такой, как бы, разлохмаченный.
1569700	1570200	Вот.
1570300	1575400	И производители блоков, они соревнуются между собой, чей блок будет принят.
1576500	1576800	Вот.
1576900	1578300	Понятно, что там...
1578900	1587060	В каком-то прошлом, может, не очень, как бы, далеком, уже, как бы, смысла, там, пытаться намайнить такую, как бы, здоровую цепочку.
1587760	1592760	А это, может, и технически вычислительно невозможно, как бы, или там нереально, там, по другим причинам.
1592800	1594600	Это мы с вами в консенсусах посмотрим.
1595320	1595500	Вот.
1595540	1600500	Но важно понимать, во-первых, что блокчейн, что блоки – это вот такая вот структура.
1600500	1607940	Она правильно называется DAG – Direct Acyclic Graph, то есть направленный ациклический граф.
1608900	1621040	У которого все связи направлены в одну сторону, поэтому он направленный, и нету кольцевых связей, то есть нету замкнутых конкурсов, поэтому он ациклический.
1621880	1622160	Вот.
1622200	1625800	Такой, как, не знаю, как канат, разлохмаченный, как бы, на конце.
1625800	1632200	Ну, вот здесь есть, да, какие-то старые ответвления, как бы, там, может, там, где-то здесь, там, не знаю, какие-то старые, как бы, цепочки.
1633160	1633560	Вот.
1633720	1637520	Ну, вот такого вида, как бы, блокчейн собой представляет.
1637880	1638800	То есть любой момент имеет...
1638900	1648260	Как бы, какой-то набор блоков, вы всегда можете по нему пройти, и пройти по одной и только одной цепочке.
1648760	1652900	Причем, опять же, что важно, никакие внешние данные здесь не работают.
1653780	1656840	То есть никаких внешних сервисов, никто ничего не опрашивает.
1656960	1660900	То есть все решения принимаются строго на тех данных, которые есть в блоках.
1662360	1665080	То есть алгоритм по-другому не работает.
1665080	1668260	То есть блокчейн опирается строго на то, что есть только в блокчейне.
1668360	1668460	Все.
1668900	1671080	И это с внешним миром никак не связано.
1671740	1676340	Данные из внешнего мира, там, специальным искусственным способом, там, добавляются в блоки,
1676800	1682020	но решения о консенсусе, о том, какой блок следующий, какие транзакции валидные, какие нет,
1682080	1688960	как бы, принимаются только на основании протокола блокчейна и данных, которые есть в блоках.
1690100	1690460	Вот.
1690460	1696360	Соответственно, транзакции с этих блоков, как я сказал, как бы, накатываются на этот, как бы, state db,
1696940	1698460	и в конце концов появляется...
1698900	1703960	Кто-то, уж не важно, кто там, 50-ый блок, там, или вот этот 51-ый победил,
1704380	1713340	в конце концов, 51-ый блок доезжает, таки, как бы, уже возвращается обратно из пилинговой сети в тот компьютер,
1713340	1716440	к которому обращался Вася, когда отправлял твою транзакцию.
1716760	1723960	Этот компьютер получает блок номер 51, вот, ну, предположим, вот здесь, в 51-ом блоке его транзакция была.
1724340	1728480	Ну или там, мы в 50-ом договорились, как бы, вот здесь, что была транзакция.
1728900	1732300	Ну, соответственно, победила вот эта вот цепочка, вот.
1732300	1738900	И Вася, соответственно, обращается сюда и видит, так, все, 51-ый блок был накачан на state db,
1739340	1744740	и он просто спрашивает баланс, как бы, у этой базы данных, как бы, и она ему говорит, Вася, у тебя теперь 90,
1744900	1749600	а у Пети теперь, там, не знаю, 110, там, эфира, например.
1750340	1750840	Вот.
1751340	1757140	Это вот такая, как бы, общая схема процессинга транзакций в блокчейнах.
1758900	1769760	Она стоит на трех таких китах криптографических, там, ну, вот, если, там, пример, короче говоря, там, транзакции,
1771040	1777360	ну, это мы с вами еще, как бы, посмотрим, как бы, тут, наверное, интересно, как бы, там, индекс транзакции,
1777580	1786720	то есть, кому она отправлена, вот, то, что есть хэш-блока, которому она принадлежит, как бы, от кого она отправлена, там, и так далее.
1786720	1787980	Номер блока тоже.
1788900	1795960	То, что я вам пишу 4950, у этого есть название в блокчейне «высота», то есть, это, как бы, высота блока, хэй.
1796940	1799980	И, может быть, много блоков, как бы, с одной и той же высотой.
1800700	1801080	Вот.
1801400	1803280	Значит, поехали дальше.
1803440	1806100	Значит, как вот эта вот вся история организована?
1806400	1810280	То есть, на чем вообще вся безопасность этой штуки зиждется?
1811860	1816060	Первый слон, на котором это все стоит, это хэширование.
1818900	1826500	У нас будет лекция по симметричной криптографии, мы обязательно глубоко посмотрим, как строятся, как бы, эти правильные протоколы,
1826500	1833140	но, как бы, что такое криптографический хэш, вы должны, прям, знать, прям, ну, на зубок.
1834080	1844580	То есть, изначально эта история пришла из симметричных криптосистем, где у нас было какое-то открытое сообщение, значит, Алиса Боб,
1844580	1848580	они знают какое-то секретное слово или, там, паролька.
1848900	1850320	Которое мы будем называть ключом.
1851020	1861460	Алиса зашифровывает свое сообщение секретное, точнее, зашифровывает вот это M, открытый месседж, секретным ключом.
1862520	1866740	Получает шифротекст, вот этот вот C, отправляет его Бобу.
1866820	1868580	Боб, соответственно, делает декрипшн.
1868580	1876420	И тем же самым секретным ключом расшифровывает шифротекст и получает открытые сообщения обратно.
1877320	1878580	Такая, как бы...
1878900	1879980	Ну, общая схема.
1880800	1885340	И вот эти все алгоритмы, они очень широко используются.
1885580	1892960	Сейчас там любой там трафик, как бы, шифруется, как бы, все эти, все вы, как бы, эти, наверное, как бы, уже многие, как бы, про эти алгоритмы слышали.
1893820	1903320	Но очень важно, как бы, понимание математических свойств, которые называются рассеивание и перемешивание.
1903320	1907320	Мы еще раз на них, как бы, остановимся, чтобы у вас не было никогда...
1908900	1909900	Каких-то иллюзий.
1910300	1913140	Но смотрите, я смотрю на EtherScan.
1915160	1916060	Вот здесь вот.
1916540	1918820	Вижу, короче, какой-нибудь хэш-транзакция.
1919120	1921900	Вот у меня есть транзакция, а вот ее криптографический хэш.
1923300	1936940	Вот как думаете, можно найти где-нибудь в эфире или в мире, как бы, хэш, который расположен там в радиусе, там, не знаю, там, ну, в диапазоне, там, хотя бы, там, не знаю, там, 100 миллиардов, как бы, от этого хэша?
1938900	1956020	Ну, я, как бы, к тому, что криптографические это такие, как бы, штуки, что вы не найдете два даже близко похожих хэша, которые отличаются там на 10, на 100, на миллион, на миллиард, на 100 тысяч миллиардов.
1956020	1966000	То есть числа слишком большие, и сделано это так, чтобы хэши были уникальными цифровыми идентификаторами любой информации.
1966000	1975340	То есть взяли букву А, получили от нее хэш, взяли букву Б, взяли от нее хэш, они вообще не похожи, как бы, вот эти хэши криптографические.
1975840	1979040	Сделано это за счет вот этого рассеивания и перемешивания информации.
1979540	1988080	Это вот то, над чем работал Тюринг, Шеннон и так далее, собственно, криптографы-математики, которые сделали аппарат математический для шифрования.
1988580	1990280	В чем суть этих штук?
1990280	1995760	Смотрите, у нас есть открытые сообщения, какая-то цепочка бит, ну, прям уже симметричные.
1996220	1999020	Криптографии работают исключительно с битами.
1999900	2005180	У нас есть какой-то ключ секретный, там, 0, 1, 1, 1, там, 0, 0, 0, неважно.
2005740	2015320	Затем мы делаем наше какое-то там зашифрование, расшифрование, то есть какой-то хитрый алгоритм придумали и получили шифротекст.
2016060	2020880	Он тоже там 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, там, 1.
2021520	2025060	Вот, значит, что такое рассеивание и перемешивание?
2026000	2034540	Это свойство хорошего шифра, то есть в чем суть вот этого аппарата, который разработал Тюринг и Шеннер?
2034580	2041600	Вы придумали хитрый способ шифрования, хотите проверить, он хороший или плохой, или вы где-то накосячили, у вас в математике есть какие-то перекосы.
2042000	2043920	Как понять, хороший шифр или плохой?
2044060	2048840	И вот как бы хороший шифр обеспечивает вот это вот рассеивание и перемешивание.
2048840	2051320	Значит, что такое рассеивание?
2051380	2055840	Рассеивание говорит о том, что если я изменю 1 бит...
2056000	2068380	Даже 1 бит в исходном тексте и проведу вот эту вот операцию, этот бит повлияет на все биты очень сильно шифротекста.
2068620	2071380	То есть он должен так типа рассеяться как бы по ним.
2072000	2073820	Значит, что значит очень сильно повлияет?
2073820	2084480	Очень сильно повлияет, это означает то, что каждый бит вот этого сообщения поменяет свое значение, инвертируется с вероятностью 1, 2.
2084840	2085820	То есть это тоже, в принципе...
2086000	2088020	Очень как бы легко на пальцах понять.
2088740	2099500	То есть я изменил здесь буквально 1 бит, и где-то примерно 50% битов шифротекста должны измениться, должны измениться в свое значение.
2099600	2100740	Не знаю, какие как бы.
2101220	2104500	Понятно, что детерминированные, ведь мне же надо обратно восстановить, да?
2104500	2110980	То есть алгоритм должен уметь обратно как бы это дело восстанавливать, а не просто там взять рандомные биты, как бы поменять.
2111060	2115880	Он должен специальным как бы способом сделать так, чтобы изменение одного бита повлияло...
2116000	2118360	Вот на вот эти вот все, максимально.
2118940	2121260	Причем именно как бы с вероятностью 1, 2.
2121820	2128880	Потому что если будут какие-то перекосы, например, там только последние биты изменятся, или только первый бит изменится,
2129320	2133640	это все позволит как бы проводить такой как бы частотный криптоанализ,
2133820	2139560	очень там, соответственно, хотя бы примерно угадывать, что там находится как бы за шифротекстом.
2140340	2140540	Вот.
2141360	2143240	А этого не должно быть.
2144600	2145080	Поэтому...
2145080	2145980	Это рассеивается.
2146000	2149020	Рассеивание, перемешивание, это тоже свойство, но оно касается ключа.
2149140	2155340	То есть я не трогаю вообще как бы исходное сообщение, я как бы меняю в нем один бит,
2155520	2160140	и точно так же это делает это сильнейшее влияние как бы на весь шифротекст.
2160360	2165960	То есть неважно как бы, если я букву А как бы зашифровал как бы одним ключом,
2166320	2171140	и получил как бы какой-то шифротекст, и такую же букву А зашифровал ключом,
2171140	2175980	который на один бит отличается от этого, у меня будут совершенно разные шифротексты.
2176000	2179540	Вот они прямо-прямо-прямо-прямо совсем никак не сравнимы.
2179640	2181960	Хотя как бы ключи на один бит всего отличаются.
2182540	2185040	Ну и то же самое касается как бы и открытых текстов.
2185520	2191260	Вот это два таких очень мощных свойства, из которых еще можно довольно интересную штуку углядеть.
2191660	2196940	Если вы будете смотреть на зашифрованные данные современными хорошими криптопротоколами
2196940	2201720	и начнете в них как бы мерить количество единичек и ноликов,
2202260	2204000	то вы увидите, что их примерно поровну.
2204000	2205000	Ну вот из того, что...
2206000	2209980	Я сказал, да, что типа примерно с вероятностью одна-вторая должны поменять значение,
2210520	2216840	выглядят эти шифротексты так, как будто кто-то монетку сидит и подбрасывает.
2216940	2222740	Орел-решка, орел-решка, орел-решка в разных комбинациях,
2222780	2226680	но никакой статистики отсюда вы вывести не можете.
2226880	2230000	То есть малейший перепост там куда-нибудь, там не знаю,
2230000	2234180	если здесь больше ноликов, то вот и здесь как бы больше ноликов.
2234400	2236000	Это уже дыра в криптопротоколах.
2236000	2241460	То есть это уже как бы позволяет криптоаналитикам уже что-то там,
2242020	2248580	какие-то предположения как бы о внутреннем документе шифровальному иметь.
2249500	2255000	И вот это вот свойство как раз хэширования построено как раз на вот этих вот алгоритмах.
2256400	2261200	Ну по большей части там очень-очень похожая история.
2261200	2264600	Значит для того, чтобы достичь вот такой штуки,
2266000	2270080	в мире битов, знаете, не так много хороших операций обратимых.
2270540	2274700	Там есть ксор какой-нибудь, есть там циклический сдвиг,
2274980	2277760	то есть можно там циклически сдвигать там вправо-влево,
2278200	2282020	можно поделить на куски как бы и снова собрать одну половину,
2282100	2284480	там не знаю, поксорить как бы, а другую сдвинуть.
2284800	2288080	То есть на самом деле операций, которые можно сделать бинарных,
2288080	2289380	их не так уж и много.
2290740	2294960	Вот, потому что да, когда у вас есть как бы вся вселенная из двух чисел состоит,
2295040	2295780	вы не так много.
2296000	2297120	Вы с ними можете делать.
2298720	2301920	И поэтому как бы все вот эти вот алгоритмы современного шифрования,
2301920	2305040	они вот берут исходный текст, там что-то его разделяют на куски,
2305040	2309040	там ксорят с ключом, потом сдвигают там на три позиции влево,
2309040	2312040	потом опять ксор, потом на пять позиций вправо,
2312540	2314160	потом там что-то замены и так далее.
2314160	2316000	Все это как раз с вами как бы обсудим.
2316400	2319160	Но получается вот такая вот каша как бы из битов.
2320640	2325080	И если мы, например, возьмем с вами какой-нибудь алгоритм шифрования,
2326000	2329360	скажем, современный, и начнем им шифровать один,
2329720	2334380	потом двойку зашифруем, тройку зашифруем, четверку, пятерку и так далее,
2334580	2336400	с одним и тем же как бы ключом,
2337200	2340560	то у нас будет получаться вот такая последовательность чисел,
2341560	2343500	которая называется псевдослучайная.
2344840	2348240	То есть она снаружи, если вы начнете статистику мерить этих чисел,
2348240	2352000	она будет как будто выбрасывать случайные числа, как в лотерею как бы играете.
2352900	2355120	Вот, они будут с равными вероятностями.
2356000	2359300	То есть абсолютно ровно размазанные по числовой кривой.
2362240	2366100	Это следует как раз из свойства как бы хорошего криптоалгоритма.
2366300	2372440	И на основе как бы вот этих вот симметричных шифрований построены генераторы случайных чисел,
2372520	2375560	которые вы используете в своих программах на всякие ранды и так далее.
2375680	2378000	То есть они все как бы вот эти механизмы используют.
2379080	2386000	А хэширование, ну смотрите, хэширование, оно тоже строится на вот этих симметричных,
2386080	2390580	алгоритмах, оно говорит, но это алгоритм полностью публичный.
2390720	2396000	То есть он вообще открытый, то есть ключ все знают, например, ключ равен 1, 2, 3, 4, 5.
2396820	2399040	И алгоритм хэширования может выглядеть так.
2399460	2404360	Берем файл произвольной длины или файл в строчку бит, как бы неважно,
2404360	2409360	там 1 петабайт, 1 мегабайт, 1 килобайт, неважно, как бы огромной длины.
2410140	2415620	Берем как бы его поблочно, берем первый блок, зашифровываем его,
2416000	2421240	этим вот нашим как бы ключиком, получаем какой-то зашифрованный текст,
2421840	2426560	сцепляем его со следующим блоком, проводим еще одно там шифрование,
2427660	2430520	сцепляем его со следующим блоком, вот.
2430520	2433460	И у нас получается такой последний как бы блочок,
2434040	2437620	вот, ну пускай длина будет, ну современные как бы алгоритмы шифрования,
2437780	2441400	хорошие там AES, как бы они работают с блоками длиной 256 бит.
2441960	2445340	То есть такая как бы сейчас считается как бы секьюрная битность,
2445340	2447500	в современных криптоалгоритмах.
2447860	2456980	Размер ключа 256 бит, размер блока там 256 бит, и так далее, это вам обсудим.
2456980	2459400	И вот у нас получился вот такой вот последний блок.
2459800	2463240	И смотрите, какой он интересный, он зависит от всех битов вот этого файла.
2463380	2466100	Причем неважно, даже если этот файл петабайт занимает,
2466200	2467980	то есть если он просто немеренно огромный,
2468960	2471500	стоит вам тронуть один бит в любом из этих блоков,
2471540	2475320	у вас разломается вот этот вот, разломается вот этот вот, разломается.
2475340	2478860	Вот этот вот, и вы получите совершенно другой хэш, абсолютно.
2479480	2482080	То есть прям, который будет отличаться очень сильно.
2482820	2486240	Отличаться очень сильно, вы уже тоже знаете, как бы, что значит очень сильно.
2486300	2490980	Очень сильная в криптографии, это означает, что примерно половина битов,
2491020	2493760	как бы, поменяла свое значение.
2493860	2498620	Вот, и вот эта вот штука является таким прекрасным цифровым отпечатком,
2499160	2500780	таким идентификатором данных.
2501400	2504660	Используется вообще повсеместно, как бы, хэширование где угодно,
2504660	2505200	там, не знаю.
2505340	2509880	В файловых системах, в телекоммуникациях, там, ой, ну, как бы,
2509960	2512980	очень широко используемые алгоритмы, вот.
2513380	2517280	Ну, и, конечно же, как бы, как раз вот эти вот в крипте,
2517420	2520360	это хэши блоков, это хэши транзакций.
2520840	2523420	То есть, если вы видите, как бы, хэш-транзакции,
2523500	2525500	вы можете, как бы, самостоятельно проверить,
2525920	2529220	что вот тело этой транзакции, вот оно там с точностью до бита,
2529600	2532420	там, ну, прям вот ее, типа, RAW-образ,
2532420	2534660	который, как бы, там, не знаю, там, пачка,
2534660	2539060	это байт, что она, ну, не была, там, не знаю, подделана,
2539160	2541080	что она была, как бы, представлена и так далее.
2541200	2543300	И, в принципе, когда кто-то кому-то криптой платит,
2543340	2547000	он обычно кидает, как бы, вот я тебе заплатил, как бы, не знаю,
2547100	2549900	вот хэш-транзакции, иди, как бы, посмотри по нему.
2550560	2553480	Я могу сходить на сайт, но могу, в общем-то, и сам обратиться
2553480	2555720	к своей собственной ноде блокчейна и сказать,
2555900	2557720	типа, найди мне по хэшу эту транзакцию.
2558420	2562440	В торрентах файлы ищутся по хэшам, вот.
2562440	2564640	Во всех, там, не знаю, там, облаках и так далее.
2564660	2568660	Для исключения дубликатов тоже, как бы, файлы обязательно хэшируют,
2569340	2572240	сохранятся, как бы, их хэши цифровые, в первую очередь.
2572720	2576080	Это, вот, собственно, такой первый, как бы, такой криптографический слон,
2576180	2577420	на котором все это строится.
2578380	2580240	Второй слон – это цифровая подпись.
2580460	2585140	Тоже мы, тоже бежим, как бы, галопом по Европам в данном случае.
2585320	2587340	Это концепция асимметричной криптографии.
2587500	2589740	Появилась она, там, в 70-х годах.
2591080	2594440	Значит, там, мы с вами посмотрим, как бы, и Диффи Хелм,
2594520	2594640	и так далее.
2594660	2596740	Используется тоже крайне широко.
2597900	2601440	Там кто-то любит приводить, не знаю, сдачу бухгалтерской отчетности,
2601560	2604660	там, ЭЦП, которые получают, как бы, в центрах.
2605960	2609020	Но, на самом деле, самое широкое применение вот здесь, вот.
2609340	2610600	Вот в этом замочке, как бы.
2610680	2614660	Когда вы соединяетесь с сайтом по протоколу HTTPS,
2616440	2619480	то есть, когда вы, как бы, я захожу на Google.com,
2619900	2623200	мой браузер просит Google.com доказать, как бы,
2623200	2624640	что это он мне сейчас отдает.
2624660	2625520	Вот веб-страницу.
2626320	2632640	То есть, он его просит подписать данные, которые подготовил мой браузер.
2632820	2635200	Ну, грубо говоря, мой браузер кидает в Google рандом и говорит,
2635280	2637160	а подпиши-ка своим публичным ключом.
2638000	2638340	Вот.
2638420	2642160	И, соответственно, Google подписывает, и тогда мой браузер уверен,
2642200	2643400	что попал туда, куда надо.
2643980	2647520	Значит, сама концепция вот этих вот публичных, приватных ключей.
2649380	2653160	Там под капотом, на самом деле, ну, значит, представьте,
2653160	2654480	у меня есть там у нас, опять же,
2654660	2659200	Алиса и Боб, они могут при помощи некого математического алгоритма
2659280	2663200	создать пару чисел, значит, одну из них назовем публичный ключ,
2663280	2664840	а другую назовем секретный ключ.
2665480	2669360	Публичный ключ, типа, можно шарить, можно там куда угодно, там, не знаю,
2669420	2674060	показывать как угодно, а секретный ключ всегда лежит приватный,
2674240	2677540	сохраненный, как бы, никогда не покидает там устройство, там,
2679360	2681160	то есть его Алиса хранит в секрете.
2681620	2684420	Вот, значит, строятся они.
2684420	2689400	Ну, на самом деле, пара этих чисел, как бы, строится на основании так называемых
2689460	2690600	односторонних функций.
2692100	2697100	Например, как бы, зная секретный ключ, получить публичный ключ легко вычислить,
2697180	2701240	а зная публичный ключ, вычислить секретный ключ вычислить невозможно.
2701980	2707060	Ну, можно привести в качестве примера вот такую функцию g степени x по модулю p.
2707660	2712240	Это криптсистема RCA строится на основе такой вот, как бы, функции.
2714420	2721940	Значит, предположим, y – это у нас публичный ключ, а вот это у нас секретный ключ x.
2722860	2728520	Значит, зная x, ну, это публичные параметры, просто огромные числа, там, не знаю,
2728600	2732860	типа вот такие 2 в 2048, ну, то есть прям огроменные.
2733720	2739860	Зная x, ой, зная x, да, получить y очень просто, потому что возведение в степень,
2739860	2743920	если кто-то там с логарифмами дело имел, да, то возведение в степень, оно такое,
2743920	2745300	очень здорово оптимизировано.
2745800	2750360	То есть там берутся, возводятся степени, там, близкие к степени двойки, вот, в общем,
2750460	2752160	там этот логарифм работает реально быстро.
2752880	2758980	А вот обратно посчитать так называемый дискретный логарифм, а пупайка, нельзя.
2759360	2764720	Для таких чисел, как бы, это безумное вычисление, как бы, и сейчас это сделать невозможно.
2765620	2771160	Есть там алгоритм Шора, который на квантум-компьютере в теории, как бы, позволяет,
2771220	2772880	как бы, вот это дело, как бы, крэкать.
2773920	2779120	Вот ломать, там, считать эти дискретные логарифмы, но, как бы, пока еще до этого далеко.
2779920	2782740	Вот, в общем, это такая, как бы, пример односторонней функции.
2783180	2784920	Вот у нас есть вот такая вот пара чисел.
2785500	2790860	А теперь представьте, что мы их приспособили для того, чтобы зашифровывать и расшифровывать информацию.
2790860	2797620	То есть, как бы, спрятали информацию, получили какой-то шифротекст, раскрыли ее.
2798320	2803060	Значит, в этих криптосистемах, так они и так и называются, асимметричные,
2803720	2803860	публикация.
2803920	2807280	Вот личный ключ, если что-то мы зашифровываем публичным ключом,
2807320	2809980	то мы его можем расшифровать при помощи секретного.
2811120	2811940	И наоборот.
2812520	2818460	То есть, если мы что-то зашифровали при помощи секретного, мы можем разшифровать при помощи
2818460	2818920	публичного.
2818920	2825400	Ну, такой, как бы, сделали, ребята такой математический аппарат, который позволяет
2826060	2830480	сгенерировать два числа, которые обладают такими свойствами и описали, как при помощи
2831080	2833720	публичного ключа расшифровать, а секретного расшифровать.
2833720	2845440	Соответственно, то, что зашифровано публичным ключом, расшифровать может только тот, кто знает секретный ключ.
2846300	2847460	Остальные не могут.
2848100	2853840	Первая схема, которая здесь напрашивается, эта схема называется секретной передачей информации.
2853960	2857160	Это когда Алиса говорит, Боб, вот тебе мой публичный ключ.
2857160	2860040	Здесь у нас будет Алиса и секретный ключ Алиса.
2860040	2867000	Давай зашифровывай для меня данные при помощи моего публичного ключа.
2867360	2869480	И Боб, собственно, вот это и делает.
2870860	2876160	То есть, по сути, и только Алиса, соответственно, может их расшифровать.
2879440	2881660	Чем эта схема удобна?
2881660	2888400	Еще с точки зрения телекома, это тем, что Алиса может рассказать свой публичный ключ вообще всем, всему миру.
2889000	2889760	Алиса, например.
2889760	2890380	Алиса, например, это Google.
2891900	2897820	И говорит, кто хотите, можете для меня информацию зашифровывать моим публичным ключом.
2898240	2899040	Любую, как бы.
2899680	2903720	И нам не нужно вот этот вот обмен ключами, там что-то там еще делать.
2904080	2907300	Она позволяет такие неинтерактивные схемы строить.
2907960	2910300	Но нам эта история не сильно, как бы, интересна.
2910340	2912000	Нам интересно вот это вот.
2912240	2914140	То есть смена ролей этой штуки.
2914180	2915760	Это схема электронной подписи.
2916320	2919600	Значит, вот ее тоже надо.
2919760	2921760	Нам очень хорошо, как бы, понимать, как она работает.
2922480	2925480	Итак, у Алисы есть публичный ключ, есть секретный ключ Алисы.
2926740	2931380	Она Бобу, как бы, сообщает, каким образом, каким-то образом, свой публичный ключ.
2931560	2936700	Говорит, Боб, проверяй мою электронную подпись при помощи него, при помощи моего публичного ключа.
2937140	2938800	Затем у нее есть какой-то документ.
2940080	2945800	Я юристам люблю вот так вот рисовать, да, какой-то, не знаю, файл, транзакция, как бы, неважно.
2945800	2946920	Какой-то бинарный буфер.
2948000	2948180	Вот.
2948600	2949680	И она хочет.
2949760	2950500	Она хочет его подписать.
2951620	2952060	Подписать.
2952140	2959640	То есть она хочет продемонстрировать всем, у кого есть публичный ключ Алисы, что она запроцессила вот этот файл, как бы, до последнего бита.
2959820	2969000	То есть она либо документ в Варде глазами посмотрела, либо ее сервер, как бы, провалидировал вот эту транзакцию и сказал, типа, ок.
2969500	2970360	Значит, что она делает?
2970900	2973980	Она считает криптографический хэш от вот этой штуки.
2974940	2978980	Затем она этот хэш зашифровывает своим секретным ключом.
2979760	2980940	Вот этот вот хэш.
2981500	2986800	И получившаяся вот эта штука, как бы, является электронной подписью этого документа.
2986900	2989820	Сам документ не секретный, так как схема, как бы, подписи.
2990300	2992220	Нам там прятать ничего не надо.
2992960	2995960	И вот эта вот штуковина, она полностью, как бы, отправляет Бобу.
2996580	2998380	Боб получает, как бы, документ.
2998980	3004260	Возможно, его перехватили, там, что-нибудь поправили здесь, там, 10 тысяч на 100 тысяч, там, и так далее, и так далее.
3005120	3005520	Вот.
3005520	3005580	Вот.
3006020	3009740	Получает ее электронную подпись и делает обратную.
3009760	3015680	То есть он берет электронную подпись, берет публичный ключ Алисы, который ей тоже понадобится.
3016820	3021120	Затем он расшифровывает публичным ключом Алисы вот эту подпись.
3022300	3026760	И должен, по идее, получить хэш документа, если все верно.
3027600	3027720	Вот.
3027880	3030540	Но он его считает, конечно, и самостоятельно.
3031120	3031760	И потом сравнивает.
3032900	3038920	Соответственно, если они равны, то только Алиса при помощи своего секретного ключа могла поставить, как бы, вот эту электронную подпись.
3039760	3054100	Ну, соответственно, если, как бы, подпись неверна, то Боб ничего не может сказать точно, потому что у него то ли здесь что-то испортилось, то ли здесь что-то испортилось, может, здесь что-то испортилось.
3054200	3055800	То есть просто неверна и неверна.
3056600	3056960	Вот.
3057060	3063840	И, как бы, понятно, что по свойствам, как бы, шифрования, да, вот, отличия этих хэшей, они будут очень большие.
3064180	3067760	То есть там какие-то прям очень серьезные, как бы, потому что есть рассеивание, перемешивание.
3067760	3068200	Вот.
3069440	3069760	Это электронная.
3069760	3070540	Это электронная подпись.
3071280	3072920	Значит, да.
3073380	3076680	Не могли бы еще раз повторить про электронную подпись?
3077840	3079540	С момента подписания?
3080120	3083880	С момента, да, того, как, ну, после получения ее.
3084500	3086220	А, еще раз, после получения.
3086300	3090220	Значит, Алиса сделала как раз вот эту вот электронную подпись.
3091540	3092120	Так вот.
3092960	3094800	Отправила этот документ Бобу.
3095580	3096000	Вот.
3096000	3099320	Ну, и я там, не знаю, там, хотите, если еще.
3099320	3106480	Если еще аналогию, то это какая-нибудь компания, которая сдала бухгалтерскую отчетность, сделала зип-файл.
3107340	3109660	У этой компании есть секретный ключ.
3110140	3114640	Она этим секретным ключом этот зип-файл подписала и отправила в налоговую.
3114720	3115700	Здесь, как бы, налоговая.
3115760	3120200	А в налоговой есть табличка, как бы, что ООО там такое-то, такое-то.
3120300	3122140	У него вот такой-то публичный ключ.
3123180	3123560	Вот.
3123560	3128560	И, соответственно, значит, налоговая скачивает этот зип-файл,
3128560	3132000	который ей прислали, получает электронную подпись.
3132680	3137920	У нее есть публичный ключ этой компании, то есть там зарегистрированный в реестре.
3137960	3141740	Она при помощи публичного ключа проверяет электронную подпись.
3142760	3151060	И когда мы с вами рисовали то, что зашифровано при помощи секретного ключа
3151060	3153840	может быть расшифровано при помощи публичного ключа,
3153840	3157680	здесь делается декрипшн при помощи публичного ключа,
3157680	3160980	расшифровывается именно сама электронная подпись, как и SIG.
3162220	3167320	После этого должен получиться хэш документа криптографический,
3167420	3175120	потому что до этого подпись – это зашифрованный хэш документа,
3175220	3177000	который зашифрован секретным ключом.
3178160	3185520	И при проверке БОП, наша налоговая, она сама считает криптографический хэш
3185520	3189960	и сравнивает с тем, что получилось вот здесь при проверке подписи.
3190840	3194940	Если они равны, то подпись верна, потому что только владелец секретного ключа
3194940	3198420	мог бы сгенерировать вот такую вот подпись.
3198800	3199580	Можно вопрос?
3200080	3200280	Да.
3201500	3206080	Получается, у нас смысл в том, чтобы публичный ключ и данные от А,
3206220	3209000	ну, от Алисы, мы получили из разных источников.
3209260	3211220	Иначе, если мы от одного и того же источника это получаем,
3211320	3213300	то можно подменить и то, и другое. Разве нет?
3214800	3215320	Да.
3215520	3215940	Можно.
3216760	3220760	Ну, именно поэтому и существует в HTTPS эта система сертификатов,
3220840	3226160	которую я показал, как бы, поэтому, как бы, надо вот эта регистрация
3226160	3230160	публичных ключей называется, при сдаче электронной отчетности называется
3230160	3234140	на стране, типа, мне надо сходить, получить ЭЦП.
3234820	3235040	Вот.
3235040	3239260	Вот это вот получить ЭЦП – это, по сути, зарегистрировать публичный ключ.
3240000	3240220	Вот.
3240260	3242240	Поэтому, да, как бы, из разных источников.
3242240	3244960	Но, как бы, в блокчейнах это не сильно важно.
3245520	3248640	Я как раз сейчас перейду, как раз, как это используется в блокчейнах.
3249240	3249460	Вот.
3249520	3251640	В блокчейнах все на самом деле находится на борту.
3252620	3253020	Транзакция.
3254520	3257420	Значит, смотрите, как это работает в блокчейне.
3257500	3264660	Там, я не знаю, мы уже давайте, я буду правильно уже называть, как бы, вещь своими именами,
3264840	3269520	а я буду вот эти вот адреса называть, как бы, адресами в блокчейне.
3269520	3271780	Вот этот вот from, как бы, to.
3272400	3274700	Значит, у нас есть Вася.
3275520	3280960	У Васи есть секретный ключ Вася, у него есть публичный ключ Вася, вот этот, как бы, публичный ключ.
3281420	3284640	И вот из этого публичного ключа получается адрес Вася.
3285420	3290260	Есть некоторая путаница, потому что в некоторых блокчейнах, как бы, адресом является прямо публичный ключ.
3290520	3298800	И мне проще сильно объяснять вам, если я скажу, что в блокчейнах все пользователи адресуются, как бы, при помощи своих публичных ключей.
3299700	3300200	Вот.
3300200	3304440	Ну, как бы, чисто технически, как бы, там, скажем, в эфире, как бы, адрес – это…
3305520	3312600	160 бит, по-моему, первых или последних от хэша, от публичного ключа.
3313240	3319820	Вот так, то есть берется публичный ключ, от него берется хэш, от него берется, как бы, 160 бит, и получается такая вот строчка.
3319940	3323440	Ну, там есть, там, собственно, основание, как бы, почему так сделано.
3323840	3328120	В биткоине тоже, как бы, но тоже все наследуется от публичного ключа.
3328120	3335500	И когда Вася хочет отправить кому-то транзакцию, он создает, там, транзакцию типа файлик.
3335520	3348640	Я, Вася, это вот мой адрес, хочу на адрес Пети отправить, там, не знаю, там, 10 эфира, и вот, соответственно, моя электронная подпись от этой штуки.
3349220	3357000	И подпись просто, она сделана таким образом, что из нее можно достать публичный ключ Вася из этой подписи.
3357000	3365060	Ну, просто она так, как бы, организована вот здесь, вот в этих вот значениях, ВРС, вот это, собственно, подпись, как бы, транзакция.
3365520	3370880	Из нее, как бы, при помощи, там, определенной операции извлекается прям публичный ключ.
3371460	3377100	Вот, ну, просто так сделано для удобства, чтобы не надо было дописывать еще сюда публичный ключ Вася для проверки.
3377640	3377860	Вот.
3378560	3387580	То есть я под подписью теперь буду подразумевать, как бы, там, не знаю, там, в эфире в биткоине, как бы, подпись, из которой извлекается публичный ключ.
3388920	3389340	Вот.
3389820	3392880	Значит, почему, типа, кто угодно не может это сделать?
3392880	3395500	Ну, во-первых, как бы, кто угодно не может.
3395520	3399700	Подписать транзакцию от имени Вася, не зная секретного ключа Вася.
3401100	3401500	Вот.
3401640	3413860	А во-вторых, он не сможет забрать у него 10 эфира, потому что Вася, когда, как бы, 10 эфира тратит, там, в таблице, как бы, написано, как бы, что у Вася, как бы, есть, там, не знаю, там, 50 ЕТХ.
3414620	3418760	А у, там, Пети, короче, есть 3, 3 эфира.
3419320	3425500	И, конечно, там, типа, если, ну, здесь ничего не подменишь, как бы, Петя не может, как бы, взять, сказать.
3425520	3432300	Я, Петя, как бы, хочу, там, не знаю, кому-нибудь, там, Миша, отправить, там, 10 эфира с адреса Вася.
3432920	3435820	И поставить, как бы, подпись Вася, как бы, это не сработает.
3437380	3437740	Вот.
3438340	3446680	Так что, как бы, каждая транзакция в блокчейне обязательно подписывается, прям, строго подписывается электронной подписью.
3446840	3448240	Это вообще повсеместно.
3448440	3454960	И когда я говорю, что майнер или, там, блок-продюсер, как бы, он формирует блок и вставляет сюда транзакции.
3455520	3459340	А кто-то там, типа, другой, получив новый блок, он его валидирует.
3460280	3463220	То, на самом деле, это означает, что он бежит, как бы, по транзакциям.
3463440	3468200	И, конечно же, обязательно, как бы, проверяет электронную подпись каждой из вот этих вот транзакций.
3469160	3471240	То есть, ему, прям, надо, короче говоря, проверить.
3471740	3477260	Опять же, я чуть-чуть, как бы, кривлю душой, потому что я вам рассказываю, как бы, про, как бы, блокчейн,
3477260	3483020	на который, как бы, сверху мне наложили еще, там, различные, там, оптимизации и так далее.
3483160	3485500	Об этом мы будем отдельно говорить.
3485520	3491160	А говорю о таком, как бы, об абстрактном, как бы, блокчейне, который, прям, вот, там, самый, как бы, надежный,
3491280	3493180	и где задачи, прям, в лоб решаются.
3493920	3498620	То есть, при формировании блока майнер, конечно, проверяет обязательно вот эти подписи,
3499000	3505100	потому что сделает он, как бы, блок, в котором где-нибудь, вот здесь, вот, какая-нибудь фейковая транзакция,
3505660	3510260	или Вася переводит кому-нибудь, там, миллиард эфира, как бы, а у него на балансе их просто нету.
3510260	3514960	То есть, он еще, как бы, каждую транзакцию проверяет обязательно, как бы, майнер.
3515520	3517080	Но этот блок просто выкинут.
3517560	3522280	То есть, кто-то, ну, другие компьютеры в сети, как бы, его возьмут, начнут накатывать транзакции,
3522360	3528840	обнаружат, как бы, что у Васи нет эфира, что еще что-то скажут, а, блок фигня, как бы, все откатывается, как бы, просто его откатят.
3530160	3530520	Вот.
3532240	3541040	И при этом, значит, почему здесь еще, ну, так, уже чуть-чуть так смещаясь еще в сторону, наверное, экономической безопасности,
3541040	3545460	а почему, как бы, в блокчейнах, в эфире, как бы, выгодно производить блоки,
3545520	3552380	потому что по той же, как бы, спецификации, то есть, по тому, как бы, как вот этот блок, как бы, валидируется,
3553000	3559960	в блоке в конце последней транзакции должна быть обязательно, так называемая, у нее есть специальное даже название,
3560100	3564720	Coinbase называется транзакция, это вот в биткоине, в эфире,
3564720	3575160	которая, по сути, представляет собой транзакцию из никуда, из воздуха, на адрес майнера, точнее, просто на адрес, который укажет,
3575160	3580260	тот, кто произвел этот блок, то есть, неважно, кто там произвел, как бы, он может указать любой адрес,
3581040	3588480	положить, добавить, короче, не знаю, там, 6, там, 25 биткоина, что ли, сейчас наград за блок, вот.
3589100	3594340	То есть, как бы, обязательно последней должна быть транзакция награды, как бы, майнеру за то, что он произвел блок.
3594440	3602500	Поэтому майнеру выгодно, что его блок будет принят сетью, что никто, как бы, его не выкинет, что он здесь нигде не ошибся, как бы,
3602500	3605140	что его будут продолжать распространять, как бы, по другим.
3605160	3611020	И другие машины, как бы, будут на основе его блока уже начинать строить, как бы, следующее.
3611400	3615160	Таким образом, как бы, закрепляя вот этот вот блок, как бы, в консенсусе.
3616180	3618800	Вот, то есть, формируется почка поверх него.
3618960	3625020	Тут много от алгоритмов, от консенсуса зависит, вот, но, тем не менее, то есть, произвести блок выгодно.
3626880	3630520	Вот, в общем, это вот то, что касается, соответственно, электронной подписи.
3630520	3634980	То есть, все, как бы, все строится на электронной подписи, как бы, здесь.
3635160	3637660	Она постоянно используется.
3638720	3645040	Более того, где она еще используется, это, опять же, если говорить о консенсусах,
3645920	3654080	когда происходит, ну, когда у нас есть вот эти вот уже там наши, не знаю, валидаторы, давайте их называть,
3654180	3657560	как бы, уже правильно, как бы, там, майнеры, валидаторы, блок-продюсеры,
3657560	3663820	то есть, те, кто производит блоки, каждый из них периодически предлагает блок всем остальным.
3664040	3665140	Он говорит, типа, ребят, я согласен.
3665160	3666280	Я создал, как бы, новый блок.
3666380	3667980	Как вы его там примете, не примете.
3668620	3682480	В случае майнинга он прилагает к этой штуке, там, специальный хэш, как бы, который, по которому понятно, что он потратил, там, кучу, там, мегаватт, тераватт, как бы, энергии на то, чтобы такой хэш просто получить.
3682980	3690320	То есть, он просто, и остальные его просто принимают, этот блок, как бы, если этот хэш достаточно сложный.
3690320	3695140	А вот в алгоритмах Proof of Stake, Proof of Authority, как бы, в нормальных, как бы,
3695160	3703600	в таких вот, цивилизованных, которые, считаю, там ставятся, так называемые, аттестации на блоки.
3703780	3713000	То есть, валидатор предлагает блок, другой валидатор его скачивает, он его проверяет и говорит, да, чувак, твой блок правильный.
3713620	3717800	Затем второй, как бы, перепроверяет, говорит, да, твой блок правильный, мне нравится.
3718420	3721560	Третий, как бы, отвалился, у него интернета нету.
3722380	3724800	Четвертый подключился, он говорит, да, твой блок правильный.
3725160	3731840	И вот эти вот штуки, это тоже является, по сути, ну, как бы транзакциями, тоже являются электронными подписями.
3731960	3737820	То есть они просто подписывают блок, то есть ставят электронную подпись на вот этом блоке.
3738180	3748400	И когда этот блок набирает, как бы там, не знаю, больше там, ну, пускай там больше двух третей голосов, он считается все финализированным.
3748820	3752340	То есть считается, что он все закрепляется в цепочке.
3752340	3760180	В принципе, данные из этого блока можно начать оптимистично использовать и заранее, то есть пока его не приняли.
3760320	3768920	То есть у нас идет цепочка, давайте уже как бы в рамках вот нашего как бы нода, то есть наш собственный блокчейн, не знаю, нода.
3769700	3772760	Вот у меня здесь есть, например, там, не знаю, там, кошелек.
3774680	3775480	Сейчас его.
3778280	3781760	Вот он, собственно, смотрит куда-то там в какой-то компьютер.
3782340	3789600	Ну, обращается к нему и спрашивает, типа, какой баланс сейчас у адреса там у такого-то?
3790380	3792560	Вот там, какой баланс вот у этого адреса?
3793020	3798800	Он на самом деле по JSON-RPC сейчас как бы пингует какую-то блокчейн-ноду.
3799280	3805320	И как бы обращается к ней в ее K-value базу данных и говорит, а какой баланс вот у этого адреса?
3805820	3806920	Она ей отвечает.
3807660	3810820	Затем как бы эта нода выкачивает новый блок.
3810820	3813640	И этот блок еще не финализирован.
3813720	3816580	На нем еще не поставлены как бы вот эти вот аттестации.
3817240	3823760	То есть она его скачала, она его сама как бы проверяет, она его сама проверяет как бы на корректность,
3824220	3830160	но на самом деле ждет до тех пор, пока не будет собрано достаточное количество вот этих вот аттестаций.
3830240	3832800	В этот момент блок считается финализированным.
3834860	3838960	И довольно важная вещь, которую мы будем разбирать как бы в консенсусах,
3839060	3839800	то, что...
3840820	3847360	Сети, которые построены как старый как бы эфир, proof-of-work, майнинг в биткоине,
3847840	3850840	это так называемый пробабилистический консенсус.
3852460	3859460	То есть там, ну, в теории, если где-то сидит какой-то инопланетянин с огромным суперкомпьютером
3859460	3867280	и подмайнивает там как бы цепочку биткоина, да, и нам ее не показывает как бы эту цепочку биткоина,
3867800	3870460	но у него огромные вычислительные мощности, он там вот эти красивые...
3870820	3875620	как бы хэши как бы ищет в лед, то если он опубликует эту цепочку вдруг неожиданно,
3875700	3880300	то есть все в пиринговой сети ее увидят, они про текущий биткоин вообще забудут как бы.
3880420	3884740	То есть они его выкинут целиком, как бы возьмут более вычислительно сложную цепочку.
3885520	3890680	То есть выберут то, что как бы более вычислительно сложно.
3891360	3892260	И вот эти вот...
3892260	3896600	А вот если цепочка обновляется, что с транзакциями?
3897080	3897720	Откатываются.
3898400	3899000	Откатываются.
3899000	3899060	Откатываются.
3899900	3900000	А если...
3900820	3904580	А деньги, если уже потрачены, переведены, то это все тоже...
3904580	3907040	Они перестают существовать.
3907180	3915340	То есть, ну, то есть, как бы здесь, ну, как бы блокчейны здесь как раз не надо думать как финансист, вот.
3915580	3918160	Надо думать как разработчик.
3918240	3924360	Вот есть табличка, там где у Васи как бы там 100, как бы, да, а у Пети 10.
3924840	3929680	Вот транзакция, как бы, Вася Петя перевел 10, да, как бы у него стало 90,
3929680	3931360	а у этого стало 20.
3932140	3937620	Вот накатили блок, накатили блок, он добрался до финализации.
3937820	3942740	То есть, как бы его там оттестовали, или прошло какое-то время в пруфо-форке после майнинга.
3943320	3947680	И вот эти вот изменения, они в базе данных как бы считаются валидными, зафиксированными.
3948600	3952680	Но если блок откачан, откатывается, то все обратно возвращается.
3953520	3957180	То есть никакой, ну, никакой Петя ничего не получал, как бы.
3957800	3958080	Вот.
3958080	3959560	Все остались как бы при своих.
3960640	3963720	Просто когда я рисовал еще вот эти вот блок-спул,
3964320	3969280	почему мы с вами, как бы, вот этого не видим, как бы, вот этого борьбы, как бы, такой, как бы, балансов?
3969780	3973020	Да потому что, когда у нас майнер производил 50-й блок,
3973700	3977640	он, скорее всего, ну, точнее, два майнера, и они конкурировали, как бы, за этот блок,
3977720	3981200	они, скорее всего, оба взяли нашу транзакцию, и тот, и другой.
3981760	3985100	И поэтому то, что мы, как бы, откатили и накатили другую версию блока,
3985580	3989320	все равно, как бы, от Васи Пети, как бы, 10 эфира перешло.
3989680	3992440	Потому что майнеру выгодно включить транзакцию в блок.
3992680	3995180	Он получает еще комиссии, как бы, с этих транзакций.
3995900	3998480	То есть, вот.
4000680	4001340	Понятно ответил?
4001340	4006160	То есть, просто, а, прямо вот, чисто откатываются все транзакции в блоке.
4006200	4007660	Вот так, как будто бы их не было.
4008500	4010140	Да, да, да, да, да, да.
4010320	4014280	Что там, кто там, куда там деньги делись, это отдельный вопрос.
4014720	4018680	Это как раз отдельный, это как раз и есть атака, так называемой, двойной траты,
4019040	4019620	которую там...
4019720	4023220	А там еще говорят, там, атака 51%, там, и так далее, и так далее.
4023400	4025860	Это все там, курс, мы все это посмотрим обязательно.
4026740	4029480	То есть, на это удобно смотреть, как на базу данных,
4029540	4032860	как бы, на которую накатываются последовательно, как бы, транзакции.
4033460	4034960	Накатываются они вот такими вот пачками,
4034960	4040640	и могут откатываться пачками, как бы, обратно, и, соответственно, накатываются дальше.
4041580	4043360	С той аналогичной бутшей, можно все откатить.
4044000	4044140	А?
4044640	4046680	С той аналогичной бутшей, можно все откатить, спасибо.
4047140	4048300	Да, да.
4048600	4048980	Брончейн.
4048980	4050800	можно откатить до любого блока
4050800	4053240	назад, как бы, и полностью перепроиграть
4053240	4055140	как бы там заново вот эту вот цепочку.
4055320	4056780	И, кстати, когда мы будем пробовать,
4056880	4057820	у вас будут задания
4057820	4061180	по сути, типа, остановиться
4061180	4063120	вот на этом блоке, прямо вот в текущем
4063120	4064720	состоянии, и
4064720	4066580	там что-то наменять, как бы, то есть
4066580	4068720	притвориться каким-то там узлом, там еще
4068720	4070200	что-нибудь там, значит, поделать.
4070560	4072740	То есть здесь повторяемость и вот
4072740	4074820	это replayability, она как бы
4074820	4076920	полная. То есть мы можем
4076920	4078960	всю историю эфира до последней
4078960	4080780	транзакции, до последнего бита
4080780	4082720	полностью проиграть, как бы, с нулевого
4082720	4084760	блока, что биткоина,
4084880	4087000	как бы, что эфира, вот, абсолютно
4087000	4088940	как бы остановившись на любом блоке
4088940	4090820	и всегда будем получать консистентную
4090820	4092260	вот эту вот базу данных, как бы,
4092380	4093220	state db.
4094540	4096640	Вот. Так,
4096880	4098480	значит, про genesis,
4099300	4099880	значит, про
4099880	4102560	такой какой-то такой базовый
4102560	4103780	отбор.
4104940	4106220	Про это рассказал.
4107220	4108400	Так, теперь, соответственно,
4108960	4111080	уже, да, еще, короче говоря,
4112120	4113400	еще глубже, как бы, да,
4113480	4115440	соответственно, погружаемся в эту
4115440	4117480	историю. Значит, про вот эту
4117480	4118760	вот валидацию блоков.
4119460	4121600	То есть про создание, про создание
4121600	4122760	и валидацию блоков.
4123300	4124560	Что тут важно?
4127040	4129400	То есть сам протокол
4129400	4131380	биткоина или протокол
4131380	4133420	эфира или там еще
4133420	4135580	что-то, как бы, это же, это по сути,
4135980	4136960	не знаю,
4137940	4138940	PDF-документ.
4138960	4141000	Я не знаю, там, PDF, там, или как бы
4141000	4143160	MD. Потому что, по сути, это просто
4143160	4144440	как бы спецификация.
4145500	4146920	А эти блокчейны тоже
4146920	4148880	отличаются от традиционного софта.
4149160	4149680	То есть там
4149680	4153000	Ethereum, грубо говоря, вот эти
4153000	4153880	вот там его ноды,
4154600	4157240	их штук пять или шесть разных.
4157580	4158960	Из них там две на Go
4158960	4160840	написаны имплементации. Там что-то
4160840	4162960	одна на Rusty, как бы, одна на Java,
4163620	4164720	одна на C-Sharp.
4165720	4167200	Там ее какие-то куски,
4167200	4168920	как бы, вот этой логики, как бы, там,
4168960	4170820	написаны буквально на всех языках.
4171440	4173060	То есть они все просто, по сути,
4173160	4175220	следуют вот этой вот спецификации.
4175900	4177260	А спецификация, она как раз
4177260	4179000	и говорит о том, как
4179000	4180940	валидировать блок. Значит,
4181180	4183000	я производитель блоков.
4183160	4184640	Значит, я хочу этот блок
4184640	4186200	произвести. Что я делаю?
4187440	4189200	Сейчас я уже буду, наверное, как бы
4189200	4191120	говорить про майнинг,
4191220	4192840	потому что, ну, это такая, как бы,
4192900	4195160	классическая штука. Но если вы смотрели
4195160	4196860	программу курса, то там биткоин
4196860	4198940	на самом деле находится в самом конце,
4199060	4200500	вот,
4200620	4202980	потому что, ну, во-первых, как бы, с точки
4202980	4205140	зрения кода, там, не очень, как бы,
4205640	4206660	сильный, там, это
4206660	4209320	интересно, вот, но тем не менее,
4209420	4210700	как бы, он очень красивый, такой
4210700	4212980	минималистичный, секьюрный, как бы, и
4212980	4215160	такой, как бы, клевый.
4215560	4217640	Вот. Но конкретно блокчейн-разработчики
4217640	4219140	под биткоин особо-то
4219140	4220840	не пробуют. Вот. Ну, там,
4221080	4223320	ну, есть там, да, там, часть определенная.
4223800	4224980	Вот. Сейчас по большей части
4224980	4226780	все занимаются именно смарт-контрактами,
4226820	4228940	и мы будем с вами заниматься именно смарт-контрактами.
4228960	4231000	Вот. Значит,
4231200	4232580	что делает, соответственно, майнер?
4233220	4234820	Он пошел, соответственно, в
4234820	4237100	вот этот вот пул, TX-пул,
4238220	4238880	набрал, как бы,
4238920	4241000	транзакций, значит,
4242120	4243160	в каждой
4243160	4244640	транзакции, при этом, как бы,
4244900	4246820	в каждой транзакции находится
4246820	4248620	комиссия для майнера,
4249240	4250980	которая устанавливается чисто
4250980	4252640	пользователями. То есть,
4252760	4254040	вы, когда шлете
4254040	4256740	куда-то там криптовалюту, вам, вы
4256740	4258820	указываете, сколько вы за это готовы
4258820	4260720	заплатить, и вы платите, конечно же,
4260760	4262740	в этой же, как бы, родной криптовалюте.
4263340	4265020	Это, на самом деле, довольно важный,
4265060	4266800	как бы, поинт. То есть, вы не
4266800	4269240	какие-то там деньги платите за транзакцию,
4269740	4270940	а у вас строго
4270940	4272740	списывается баланс нативной
4272740	4274800	криптовалюты, то есть родной для
4274800	4276740	данного, для данного
4276740	4278540	блокчейна. Там, в эфире это эфир,
4278980	4281240	в биткоине это биткоин, там, в пулько-доте
4281240	4283280	это дот, там, в салане
4283280	4284880	сол, и так далее. То есть, там есть
4284880	4286800	в каждом из таких блокчейнов
4286800	4288380	есть, как бы, своя, своя
4288380	4290060	нативная криптовалюта.
4291220	4292600	В общем, просто ее определить, это та,
4292640	4294980	в которой платятся комиссии за транзакцию.
4295860	4296900	Вот. Потому что майнерам,
4296920	4298740	на самом деле, пофигу, что там, какие там
4298740	4301040	токены внутри, кто кому там передает,
4301480	4302740	каких проектов, им это
4302740	4304920	совершенно не важно, как бы, они работают
4304920	4306600	исключительно в эфире.
4306940	4308960	Поэтому у каждой транзакции есть вот здесь
4308960	4309400	вот
4309400	4312300	размер комиссии.
4312880	4314920	Это будет довольно, довольно
4314920	4316700	сложная, на самом деле, штука, мы будем ее
4316700	4318180	разбирать, то есть, как это
4318180	4318740	сделано.
4320680	4322000	Он суммирует,
4322280	4324320	соответственно, все, как бы, вот эти вот комиссии,
4325460	4326480	получает там
4326480	4327680	сумму со всех транзакций,
4328620	4330660	добавляет себе coinbase транзакцию,
4331060	4332860	там, не знаю, два эфира в подарок,
4333280	4334460	вот себе там за блок,
4335060	4336740	плюс вот эта вот сумма,
4337480	4338100	соответственно,
4338500	4340160	всех вот этих вот комиссий.
4340740	4342500	Затем он в блок ставит
4342500	4344240	обязательно таймстэмп,
4344240	4346600	значит, время данного
4346600	4348040	блока, потому что у нас, когда
4348180	4349340	идет с вами цепочка,
4350420	4352580	у нас понятно, что, как бы,
4352580	4354380	в каждом блоке есть таймстэмп,
4354800	4356600	и он не может быть из
4356600	4358560	прошлого, он не может быть далеко из
4358560	4360700	будущего, это тоже, как бы, в спецификацию
4360700	4362760	внесено. Но при этом
4362760	4364440	майнер может немножко его, как бы,
4364440	4366520	двигать, вот здесь вот у него уж там,
4366540	4367240	как бы,
4367520	4370480	разное время. Он может
4370480	4372680	по-хорошему выбрать, как бы, там, текущее время,
4372800	4374520	или там, минус две секунды, или там,
4374580	4376620	плюс десять секунд, то есть это как ему нравится.
4377420	4378080	Но самое главное,
4378180	4380600	что вот этот вот таймстэмп,
4380620	4381960	он зафиксирован в блоке.
4383500	4384360	Затем обязательно
4384360	4386240	хэш предыдущего
4386240	4388560	блока в качестве, да, как бы,
4388560	4389440	мета-дана.
4391080	4392780	Следующая крайне, как бы,
4392820	4393780	важная штуковина,
4394140	4396800	это, так называемый,
4396860	4397460	state root.
4399860	4400660	Про это тоже,
4400720	4402560	как бы, надо отдельно поговорить.
4403020	4404900	Значит, когда мы с вами обсуждали
4404900	4406520	вот эту вот нашу state
4406520	4407800	базу данных,
4408180	4411100	я там рисовал, соответственно, табличку.
4415980	4417180	Я рисовал табличку
4417180	4418940	с адресами,
4419300	4420800	адрес Васи, как бы,
4420900	4422720	баланс эфира его.
4425780	4426040	Значит,
4426360	4429020	вот эта вот структура
4429020	4430860	внутренняя, на самом деле, там есть еще, как бы,
4430900	4432600	разные там служебные поля, например,
4432740	4434660	вот важное поле nonce. Это такой
4434660	4436800	монотонный счетчик,
4437020	4438160	который у Васи считается,
4438180	4439960	с каждой транзакцией. То есть, каждый раз,
4440080	4441820	когда Вася отправляет транзакцию,
4442620	4444040	у него, как бы,
4444300	4446200	было там единичка, потом стало
4446200	4447640	двойка, потом тройка.
4448480	4449440	Как думаете, зачем?
4452620	4454180	Чтобы не учесть дважды одну транзакцию?
4455160	4456100	Да, совершенно верно.
4456180	4457880	Чтобы не было атак реплей.
4458500	4460020	А то мы взяли, как бы, эту Васину
4460020	4462180	транзакцию, которую 10 эфира
4462180	4463820	Петя отправляет,
4463940	4465980	и, как бы, еще раз отправили, еще раз
4465980	4468120	отправили, еще раз отправили.
4468180	4469960	И, как бы, и, соответственно, весь эфир
4469960	4471840	у него высосали, весь передали Пете.
4472540	4474000	Вот. Поэтому обязательно нужен
4474000	4475960	nonce. И, конечно же, nonce вот сюда, как бы,
4475980	4477300	в транзакцию тоже, как бы,
4477640	4478960	тоже включается.
4479880	4481660	То есть, для того, чтобы каждая транзакция, как бы,
4481700	4483960	она была новой, чтобы электронная подпись,
4484040	4486420	как бы, подписывала новую пачку данных.
4487200	4488100	И вот эта вот
4488100	4489880	внутренняя штуковина, она внутри
4489880	4491040	представлена как
4491040	4494100	k-value базы данных.
4494820	4495420	k-value
4495420	4496440	database.
4496440	4496680	database.
4498180	4500420	Ну, я не знаю, насколько много
4500420	4502500	из вас, как бы, имели с ними дело. Скорее всего,
4502640	4504540	прям очень много людей, как бы, из вас
4504540	4506400	знают, что такое Mongo, или что
4506400	4508560	такое Redis, или там
4508560	4510500	что такое Tarantula. Ну, то есть,
4510840	4512380	это базы данных,
4512600	4514520	которые k-value.
4514920	4516160	У нас есть
4516160	4518300	SQL, там, базы данных,
4518400	4520360	большие там, всякие там, MySQL
4520360	4522320	с правильными движками, Postgres,
4522460	4523200	там, и так далее.
4523960	4526280	То есть, это те, у которых прям
4526280	4528160	такая прям табличная организация,
4528180	4530500	которая работает с кортежами,
4530820	4532560	значит, там, всякие инсерты, апдейты,
4532660	4534080	делиты, там есть
4534080	4536200	транзакции. k-value
4536200	4538540	базы данных, они, как бы, сильно проще,
4538740	4540320	они сделаны сильно проще
4540320	4542240	в угоду скоростям.
4542480	4544080	То есть, их используют, чтобы, например,
4544260	4545040	там, не знаю, там,
4545680	4548480	держать ваш профиль,
4548680	4550500	ну, не знаю, там, ваш юзернейм,
4550600	4551340	хэш пароля,
4551920	4553920	там, не знаю, там, дату рождения. То есть,
4553960	4556200	такие, как бы, данные, по которым
4556200	4558040	не нужно делать агрегацию. То есть,
4558180	4560240	k-value базы данных, это, в первую очередь,
4560280	4562040	базы данных, в которых не нужно сделать
4562040	4564460	выборку, выбери мне, там,
4564540	4566360	тысячу последних покупок
4566360	4568080	вот у этого человека, и еще
4568080	4570080	посчитай от этого, там, среднее,
4570720	4572500	а потом используй это, там, не знаю,
4572600	4574280	как какой-нибудь, там, рейтинг, там,
4574340	4576260	для того, чтобы ему, там, скидку выписать.
4576560	4578580	То есть, там, где нету, как бы, такой агрегации,
4578660	4580220	а есть просто прямой запрос, типа,
4580480	4581780	дай профиль быстро-быстро,
4582300	4584660	обнови профиль быстро-быстро, там, еще что-то.
4584760	4586560	То есть, где, там используются
4586560	4588060	вот эти, вот, k-value базы данных.
4589000	4589200	Значит,
4590440	4593040	они в блокчейнах
4593040	4594220	используются, то есть, они
4594220	4595880	не просто, там, не просто как
4595880	4598040	k-value базы данных, а на самом деле под
4598040	4599920	всеми, как бы, нодами блокчейн,
4599980	4602100	которые вы встретите, там находятся
4602100	4604140	продукты, которые называются LevelDB
4604140	4606020	и
4606020	4607680	ROXDB.
4608280	4609860	Это k-value базы данных,
4610020	4612020	быстрые, как бы, которые специально
4612020	4613280	созданы для таких
4613280	4616200	массированных быстрых апдейтов
4616200	4617900	и легкого отката.
4617900	4619320	Нам же с вами, как бы, нужно
4619320	4621700	еще откатывать, да, у нас идут блоки,
4621760	4623640	как бы, опять появился какой-нибудь анкл,
4624120	4625800	который победил. Нам нужно, значит,
4625820	4627540	все это дело быстро откатить.
4627960	4630100	Вот в k-value базы данных проще делать
4630100	4631660	так называемые снэпшоты.
4632460	4633980	То есть, как бы, кусочек, которому
4633980	4636020	ты можешь очень быстро откатиться
4636020	4637860	и, как бы, начать
4637860	4639280	накатывать новые транзакции.
4640560	4642180	То есть, все данные
4642180	4644200	в блокчейнах вы можете вообще представлять
4644200	4645680	как k-value базы данных.
4645680	4647000	В основном, как бы.
4647000	4648860	Причем ключами являются
4648860	4650840	вот эти вот криптографические адреса.
4651540	4652640	То есть, у Васи
4652640	4654720	10 эфира и такой-то нонс.
4655060	4656560	И там еще там та-та-та,
4656960	4658960	та-та-та, это мы уже, когда про контракты
4658960	4659960	будем с вами говорить.
4660660	4663000	То есть, есть набор данных, которые привязаны
4663000	4664800	к ключу, а ключами являются вот эти
4664800	4665360	вот как раз
4665360	4668820	адреса в блокчейне.
4669520	4670880	И накатывание, по сути,
4670980	4673020	накатывание транзакций
4673020	4674360	из вот этого блока
4674360	4676920	это изменение,
4677000	4679700	ну, это всегда, как бы,
4679700	4681600	набор новых ключей, которые нужно
4681600	4683400	добавить. Да, там, не знаю, там, майнер
4683400	4685300	первый раз в жизни, как бы, произвел блок.
4686040	4687420	Вот. И у него теперь, как бы,
4687460	4689680	встало там два эфира плюс комиссия.
4689980	4691560	Вот. Ну, там, нонс, ноль, там,
4691660	4693200	там, еще там что-то.
4693840	4695620	А там, не знаю, у Васи
4695620	4697840	надо изменить ему баланс.
4697960	4699460	Там, не знаю, там, Пете надо изменить
4699460	4701400	баланс. То есть, каждый, как бы, блок, это
4701400	4702820	набор изменений,
4703500	4705180	такой, как бы, атомарный, вот в этой вот
4705180	4706840	стейт-базе данных.
4707000	4709380	Для того,
4709520	4711240	чтобы, ну,
4711460	4713660	а теперь представьте, что мы хотим зафиксировать
4713660	4715620	состояние вот этой базы данных в хэше.
4716740	4717760	То есть, нам что сделать?
4717880	4719180	Как бы, прям взять, типа, все
4719180	4721560	key-value, отсортировать, фиг знает как,
4721660	4722400	по алфавиту,
4723120	4725420	положить вот там вот такой плоский файл,
4725480	4727360	как бы, от него хэш посчитать.
4727400	4728480	Это неудобно.
4729540	4731420	Вот. И для этого используется
4731420	4733300	структура, которую мы тоже с Вами будем
4733300	4735040	отдельно рассматривать, которая называется
4735040	4736300	Merkle-3.
4737000	4740140	Ну, и вообще,
4740240	4741760	на самом деле, там, деревья, как бы,
4741960	4744060	в этих базах данных, они довольно
4744060	4745840	там часто используются, но
4745840	4747620	дерево Меркла, оно в блокчейнах,
4747620	4749480	у него особая роль.
4750060	4751140	Значит, что это за структура?
4752560	4753720	Тоже мы там про ее
4753720	4755620	свойства отдельно поговорим,
4755680	4756960	пока кратенько.
4757840	4759760	Значит, это структура, которая построена
4759760	4761340	на криптографических хэшах.
4762680	4763600	Ну, предположим,
4763600	4765040	давайте так, как бы,
4766780	4766980	значит,
4767000	4769000	значит, здесь у нас будет адрес Васи,
4769780	4773280	адрес Васи, там, не знаю, там, 10 эфира,
4773800	4775340	ну, то есть, это просто вот данные,
4775560	4777200	как бы, а здесь будет адрес
4777200	4779060	Пети, как бы, 8 эфира,
4779600	4781260	а здесь будет там адрес Майнера,
4781360	4783100	это там 2 эфира, там, и так далее.
4784000	4785500	Значит, от этих данных
4785500	4786520	считаются хэши,
4786960	4787920	криптографические,
4788580	4791200	и строится что-то типа бинарного
4791200	4792900	дерева, но только вот здесь,
4793120	4795000	вот в этих вот узлах
4795680	4796760	этого бинарного
4796760	4797980	дерева, вот здесь вот,
4798440	4799040	находится
4799040	4802460	хэш конкатенации
4802460	4804340	вот этих двух хэшей, то есть,
4804420	4806320	мы их, как бы, там, H1,
4806460	4808720	H2, а здесь находится
4808720	4810720	хэш, как бы, H3,
4811120	4811840	H4.
4812920	4814200	То есть, они слепляются,
4814500	4816440	и, как бы, слепляются уже, как бы,
4816560	4818460	идут до корневого элемента,
4818540	4820000	который, как бы, называется рут.
4820860	4822560	Штука широко используемая,
4822560	4824860	она, кстати, используется и в торрентах,
4824940	4826320	тоже вовсю, как бы, потому что,
4826320	4828340	когда вы качаете
4828340	4830460	с какого-то другого компа
4830460	4832080	кусочек, там, фильма,
4832280	4833760	там, я не знаю, там, небольшой,
4834280	4836200	вам бы по-хорошему нужно доказательство
4836200	4838220	то, что этот кусочек принадлежит, как бы,
4838220	4840240	к этому фильму, а не то, что
4840240	4842340	вам скормили какую-то хренатень.
4843080	4844160	Вот. И вот это
4844160	4845480	доказательство того, что
4845480	4848000	только что скачанные, там, не знаю,
4848120	4849920	несколько килобайт данных,
4850600	4852280	что эти
4852280	4853960	несколько килобайт данных, они, как бы,
4853960	4855860	относятся к фильму, тоже делаются при помощи
4855860	4857300	Меркел-дерева.
4858140	4859180	Значит, чем оно хорошо?
4859820	4861840	Оно хорошо тем, что мы можем все
4861840	4863980	вот эти вот наши значения
4863980	4865760	сохранить, по сути,
4865820	4866620	в одном числе
4866620	4869860	и доказывать то, что эти
4869860	4872200	значения находятся в этом листе при помощи
4872200	4873840	так называемого Меркел-пруф.
4875180	4875460	Значит,
4875760	4877760	как выглядит Меркел-пруф? Я хочу доказать,
4877940	4878580	что Петя,
4878840	4881640	что Петя с балансом 8
4881640	4883920	находится вот в этом вот
4883920	4885840	дереве. И у меня для проверки,
4885860	4887180	у меня есть только вот одно вот это,
4887340	4889220	одно только число.
4889800	4891800	Что я делаю, чтобы доказать, как бы, что я
4891800	4892980	в этом листе нахожусь?
4893780	4895820	Я создаю доказательство
4895820	4897440	следующего вида. Значит, я
4897440	4899740	беру там, соответственно, хэш от
4899740	4901500	моего вот этого Пети, как бы,
4901740	4903620	и восьмерки. Вот он вот этот вот
4903620	4904680	хэш. Это,
4905620	4907540	значит, беру его.
4908780	4909780	Меркел-доказательство
4909780	4910460	это массив.
4911940	4913760	Значит, в этот
4913760	4915100	массив я кладу,
4915860	4918180	вот этот вот хэш, которого мне не хватает,
4918240	4919340	как бы, h1.
4921300	4921780	Теперь
4921780	4923240	я смогу, как бы, взять
4923240	4925560	вот этот хэш, вот этот вот,
4925640	4927600	и вот это вычислить самостоятельно.
4927860	4929660	То есть мне не нужно это сообщать.
4930040	4931660	Но для того, чтобы добраться до рута,
4931700	4933800	мне не хватает вот этого еще хэша.
4934120	4935700	И поэтому я беру еще,
4935800	4936720	как бы, хэш от
4936720	4939420	h3 и h4.
4940820	4941660	Получается такое,
4941660	4942720	как бы. Ну, то есть
4942720	4945480	я, Меркел-доказательство,
4945860	4947740	это массив хэшей, которых
4947740	4949720	не хватает для того, чтобы
4949720	4952320	построить полный путь по Меркел-дереву
4952320	4953000	до рута.
4954580	4955660	И получается, что
4955660	4958620	я таким образом,
4958700	4959580	как бы, доказал,
4960160	4961540	то, что вот этот вот листик
4961540	4963700	принадлежит, как бы, вот этому дереву.
4963980	4966000	И доказал это, предоставив
4966000	4967300	o
4967300	4969900	от, соответственно, логарифм 2n
4969900	4972300	хэшей.
4972300	4974380	То есть уровни
4974380	4975740	в этом дереве, логарифм,
4975860	4977940	2n, вот. И, соответственно, я должен
4977940	4980300	логарифм 2n хэшей, как бы, предоставить
4980300	4981720	для того, чтобы доказать, что
4981720	4983340	какой-то лист находится в этом дереве.
4984560	4985860	То есть, когда
4985860	4987400	я здесь пишу, как бы, state root,
4988020	4989420	это, по сути, как раз, вот,
4989560	4992000	root всех ключей, значений
4992000	4994220	вот этой вот
4994220	4995820	базы данных. У нас
4995820	4997980	произошла какая-то транзакция,
4998180	4999640	значит, с одного списали,
4999640	5001440	там, вот этого, у этого стало
5001440	5003140	8, а у этого стало 10.
5003800	5005840	Хэши изменились, дерево,
5005860	5007760	как бы, изменилось, как бы, и я
5007760	5009040	пишу сюда, как бы, новый
5009040	5010360	state root,
5011660	5013360	вот, потому что, как бы, дерево, оно
5013360	5015720	изменило свою конфигурацию.
5015820	5017700	Там для этого еще есть специальные
5017700	5019440	еще модификации различные, всяких
5019440	5022080	меркл-деревьев, вот, которые используются.
5022880	5023920	Я правильно понимаю, что
5023920	5025760	оно будет персистентное, ну, и
5025760	5027180	то есть копируется каждый раз полностью,
5027460	5029740	новая версия отдельно, или как
5029740	5032000	хранится? Новая версия
5032000	5033660	дерева? Да, да, да.
5034060	5035840	Не, ну, дерево строится, как бы,
5035860	5037780	в самом, как бы, ну, в памяти,
5037880	5039780	как бы, нода, она, конечно, держит, как бы,
5039800	5041720	все вот эти вот листы, как бы, в голове.
5042680	5043680	Я имею в виду, и когда оно
5043680	5045600	обновляется, то старое остается, или только
5045600	5047560	обновляется еще? Не, старое остается в
5047560	5049580	прошлом блоке, ну, то есть
5049580	5051620	где-то в прошлом блоке был, как бы,
5052080	5053800	старый state root.
5056020	5057720	В общем, ну, по сути, это,
5057800	5059720	как бы, хэш базы данных, вот этого,
5059820	5061100	вот этой state database,
5061480	5063560	просто организован при помощи вот такого,
5063560	5065640	такого вида структур данных.
5065860	5066720	Хорошо, спасибо.
5067860	5068800	В принципе,
5069400	5071660	точно так же, как бы, хранятся
5071660	5073420	и tx root,
5074240	5076060	то есть, по похожему
5076060	5077920	же принципу, транзакции
5077920	5080220	в блоке, они тоже организованы
5080220	5081700	в меркл дерева,
5082180	5083380	и тоже у него есть root,
5083740	5085460	и, то есть, вы можете доказать, что
5085460	5087720	моя транзакция, как бы, находится
5087720	5089520	в этом блоке,
5090040	5092140	не предъявляя весь блок,
5092140	5094080	а достаточно, как бы, просто предъявить
5094080	5095800	tx root и доказать,
5095860	5097640	вместо того, что ваша транзакция, как бы,
5097720	5100060	она к этому tx root относится.
5100200	5102260	То есть, не надо, как бы, выкачивать там весь блок,
5102700	5103820	просматривать, смотреть,
5103960	5105540	есть ли там, как бы, транзакция или нет,
5105620	5108000	как бы, вы можете спокойно доказать,
5108000	5109940	что транзакция в этом блоке есть,
5110400	5111760	и сделать это за
5111760	5113920	all log 2n, как бы, транзакции.
5115200	5116580	Не очень страшно.
5117880	5118980	Вот. Значит,
5119280	5121020	так.
5122040	5123740	Там еще вопрос в чате зума был
5123740	5124680	некоторое время назад.
5125860	5128140	Сейчас посмотрим. Так, вы вопросы
5128140	5129760	лучше перебивайте.
5132500	5134040	Похоже на UUID.
5136360	5138400	Это я про хэш спрашивал, когда говорили,
5138540	5140320	что он отличается очень сильно,
5140380	5141820	и что одинаковые там не могут быть.
5141820	5143760	Да, да, да. Так эти все UUID,
5143860	5146480	они на этих хэшах же и построены,
5146560	5147620	как бы, точно так же.
5147960	5150100	На самом деле, вообще-то,
5150100	5151900	здесь ничего прям какого-то там
5151900	5154480	прям супер других алгоритмов
5154480	5155760	нету. Здесь, по сути,
5155860	5158040	просто комбинация большого количества
5158040	5159700	всего, что было до этого сделано.
5160700	5161740	Вот. Ну, и, кстати говоря,
5161840	5164240	говоря о развитии, да, блокчейна,
5164680	5165920	почему раньше-то, как бы,
5165920	5168080	его не было? Да потому,
5168220	5169520	что у вас не было компов, которые
5169520	5171760	могут взять и тысячу электронных подписей
5171760	5173860	проверить. Это офигеть,
5174000	5175300	какая операция. Там вы
5175300	5177540	на Raspberry Pi, короче,
5177640	5179420	замучаетесь подписывать транзакцию.
5179520	5181320	Точнее, на чем-то прям
5181320	5183400	совсем мелком, не знаю, там, на
5183400	5185840	орудина, например, сделать, как бы, подпись,
5185920	5187720	транзакция, очень сложно,
5187860	5189460	потому что, как бы, огромная битность,
5189600	5191460	очень мощные вычисления. Пока
5191460	5193860	компы не доросли, как бы, до вот этих мощностей,
5193940	5195780	блокчейны, по сути, были невозможны.
5196460	5197600	Вот. Они сейчас стали возможны,
5197640	5199640	потому что, чем отличается
5199640	5201580	блокчейн-нода, она
5201580	5203420	с точки зрения софта, это, по сути, как
5203420	5205540	монго, не знаю, как монго,
5205620	5207180	как бы, такая, которая крутится,
5207740	5209480	которая просто с другими монгами
5209480	5211040	соединена через peer-to-peer.
5212080	5213400	И при этом это монго,
5213480	5215420	у которой жрет очень много процессора,
5215860	5217840	что ей постоянно надо криптографические
5217840	5219920	штуки делать. Ей надо хэши вычислять,
5220440	5221700	проверять, как бы, вот эти вот
5221700	5224040	мертвые доказательства, проверять
5224040	5225740	электронные подписи. То есть она все время
5225740	5227820	работает с числами
5227820	5230160	огромной битности. Поэтому все блокчейн-ноды,
5230160	5232000	они потребляют процессор прямо
5232000	5232700	изо всех сил.
5233900	5236300	Так. Зачем при отправке транзакции
5236300	5237740	мы указываем хэш-блока,
5238900	5240340	если блок
5240340	5241920	из транзакции собирает вреда?
5242000	5244220	Нет, мы при отправке транзакции не указываем
5244220	5244900	хэш-блока,
5245860	5247840	и как бы непонятно, как бы, хэш какого
5247840	5249300	блока мы должны, как бы, указать.
5250080	5251740	Вот. Потому что, во-первых, как бы, нас еще
5251740	5252700	в блок не включили.
5253640	5255760	Мы можем, наверное, опционально указать,
5255860	5257360	типа, хочу, как бы, транзакцию
5257360	5259740	после этого блока, как бы, но
5259740	5262060	в транзакциях хэша-блока
5262060	5264060	нет никакого. Там просто
5264060	5264820	написано, типа,
5266040	5267880	вот нонс там есть, как бы, то есть
5267880	5269540	я хочу увеличить счетчик
5269540	5270680	своих транзакций.
5272000	5273880	Вот. Так. На это
5273880	5275840	ответил. Поехали дальше.
5275860	5278020	Так, у нас 13.28.
5280120	5281680	Так, у всех, короче,
5281840	5284060	голова закипит, поэтому предлагаю
5284060	5286080	объявить перерыв. Давайте
5286080	5288840	на 15 минут.
5289960	5291980	Сегодня 13.30,
5292380	5293780	в 13.45 продолжим.
5294740	5296120	Сколько вообще по времени лекция
5296120	5297940	планируется? Ну, вообще,
5298020	5300000	все эти лекции планируются по две
5300000	5301980	пары. Хорошо.
5303140	5304500	Курс здоровый.
5305860	5307860	Спасибо.
5335860	5337860	Спасибо.
5337860	5339860	Спасибо.
5365860	5377860	The end.
5388080	5390080	Спасибо.
5395860	5425840	Субтитры создавал DimaTorzok
5425860	5455840	Добавил субтитры DimaTorzok
5455860	5485840	Субтитры создал DimaTorzok
5485860	5515860	
5515860	5545860	
5545860	5575860	
5575860	5605860	
5605860	5635860	
5635860	5665860	
5665860	5695860	
5695860	5725860	
5725860	5755860	
5755860	5785860	
5785860	5815860	
5815860	5845860	
5845860	5875860	
5875860	5905860	
5905860	5935860	
5935860	5965860	
5965860	5995860	
5995860	6025860	
6025860	6055860	
6055860	6085860	
6085860	6115840	Субтитры создал DimaTorzok
6115860	6145860	
6145860	6175860	
6175860	6205860	
6205860	6235860	
6235860	6265840	Субтитры создал DimaTorzok
6265860	6295840	Субтитры создал DimaTorzok
6295860	6325840	Субтитры создал DimaTorzok
6325860	6355840	Субтитры создал DimaTorzok
6355860	6385840	Субтитры создал DimaTorzok
6385860	6415840	Субтитры создал DimaTorzok
6415860	6445840	Субтитры создал DimaTorzok
6445860	6475840	Субтитры создал DimaTorzok
6475860	6505840	Субтитры создал DimaTorzok
6505860	6529680	Субтитры создал DimaTorzok
6529740	6531660	Субтитры создал DimaTorzok
6531660	6531800	Субтитры создал DimaTorzok
6531800	6534380	Субтитры создал DimaTorzok
6534380	6534480	Субтитры создал DimaTorzok
6534480	6534620	Субтитры создал DimaTorzok
6534620	6534960	Субтитры создал DimaTorzok
6534960	6535000	Субтитры создал DimaTorzok
6535000	6535020	Субтитры создал DimaTorzok
6535020	6535120	Субтитры создал DimaTorzok
6535120	6535160	Субтитры создал DimaTorzok
6535160	6535260	Субтитры создал DimaTorzok
6535260	6535320	Субтитры создал DimaTorzok
6535320	6535340	Субтитры создал DimaTorzok
6535340	6543900	появляется как бы своя собственная цепочка вот то есть это тогда бы вот эта штука рыба
6543900	6551480	отпочковывается история которая была описана с итериум и эфириум классика она выглядела
6551480	6558800	следующим образом там в определенном блоке здесь он был там совершенку и там хак большой что тащили
6558800	6568300	там сок там десятка миллионов долларов и начиная с этого блока команда эфира она сказала как бы там
6568300	6573620	мы соответственно выпилим адреса этого хакера то есть просто добавим типы костыль что начиная с
6573620	6580300	такого-то блока вот это вот там не за баланс этого хакера равен нулю но я утрирую короче того что
6580300	6588700	каким способом ничего не митингирует хак сделать так как будто бы его и не было и попросили как бы
6588700	6595780	всех майнеров эфира как бы обновить этот софт и майнеры обновили из них большинство как бы
6595780	6604600	обновила этот софт и конечно пошла как бы пошла цепочка эфира может работать а другая часть
6604600	6610140	которая назвали себя эфириум классика не сказали нет мы ничего мы вот эти костыли впиливать не
6610140	6617880	будем фиксинг с хаком типа код и зло типа и взломали так взломали как бы все как бы мы
6617880	6618680	будем как бы
6618680	6627080	придерживаться не будем эти костыли впиливать и понятно что у тех которые перешли как бы те
6627080	6634400	которые были и т.х. для них как бы вот блок эти си как бы следующий он для них невалидный потому
6634400	6642820	что в нем как бы есть вот этот адрес то есть то есть он для вот этого как бы для эфира как
6642820	6648680	бы невалидные поэтому майнеры как бы и здесь и они по сути отпачковались начали стартовать
6648680	6650660	про PIP sono
6650660	6652600	realise
6652600	6653740	так
6653740	6655240	сейчас
6655260	6656360	вот
6656360	6657440	туда
6657440	6658240	moved
6658240	6659780	эфир
6659780	6662640	не
6663180	6664200	уверенно что
6664200	6665000	разработка
6665000	6665980	и
6665980	6666780	melt
6666780	6667940	если
6667940	6668820	сейчас
6668820	6671080	не
6673600	6674580	есть
6674580	6675900	так
6675900	6676840	reinstall
6676840	6677640	на
6677640	6678540	этот
6678540	6685540	уже дальше как бы зависит от того как бы как она изменилась то есть она будет она принимать от
6685540	6692040	других майнеров со старой версии как бы их блоки будет или не будет лишь насколько этот хардфорк
6692040	6700020	вот здесь вот как бы нормально там грамотно запрограммирован то есть это рассматривать
6700020	6704820	нужно именно с точки зрения не знаю там архитектуры что я не знаю там базы данных
6704820	6710920	который меняется например там схема данных предположим что у вас там не знаю там 10
6710920	6715320	серверов вас данных они работают как бы с одной и той же базы данных вы в этой базе
6715320	6720600	данных меняете там не знаю там название какой-нибудь колонки и у вас те кто софт
6720600	6725600	не обновили как бы они падают как бы а те кто обновили как бы они они совместные мне
6725600	6731040	не падает вот те которые упали можешь сказать они свой строят и бы хардфорк
6731040	6734760	этой базы в камуф которые конечно не
6734760	6742520	работает но те как бы тем не менее все равно как бы hard for вот из ну соответственно как раз вот
6742520	6750380	после обновления но поскольку мы чуть-чуть как вы посмотрели с вами как хардфорки происходит
6750380	6759760	по сути можно описать как бы как происходит атаки на блокчейна вот ну и над их смысле что означает
6759760	6766080	что блокчейн как бы перестал работать смотрите представьте что у меня есть блок вот я здесь как
6766080	6772540	бы там не знаю там у всех там по два блока и вот я предлагаю как бы свой вот этого третий блок и
6772540	6782920	в нем внутри есть определенная транзакция эта транзакция предположим заставляет ну давайте
6782920	6788980	просто для примера для примера короче пускай она берет и записывает куда-нибудь там вот в
6788980	6789740	нашу вот эту вот
6789740	6802280	табличка короче в которой там типа у вас там не знаю 100 эфира она записывает она дает васи как бы
6802280	6811280	рандомное число эфира там не знаю там плюс короче говоря 03 или там или 04 ну просто как бы
6811280	6818340	предположим такая транзакция существует и возможно как бы блокчейне что произойдет соответственно
6818340	6819680	этот блок он как бы
6819740	6828160	разойдется по другим валидатором они его скачают они возьмут вот эту транзакцию выполнят вот этот
6828160	6837160	вот рандом и запишут каждый запишет свою стоит на датэбэйс разные значения по одному как бы вася как
6837160	6845120	бы у него станет там 10 там и 1 у этого станет 10 и 3 у этого 10 6 там и так далее у всех как рандом
6845120	6848180	а сработает по разному затем что они будут сделать чтобы отnyt Fronk разрыhen clickdata заканчивать
6848180	6854500	сделать что они будут делать они после этого когда начнут настраивать над этим блоком как
6854500	6862820	бы следующий ему нужно будет из предыдущего взять state root то есть состояние как бы база данных
6862820	6873320	она у всех разная она у всех разная и получается как бы что как бы и хэш вот этого блока уже другой
6873320	6878440	то есть надо как бы настраивать другим ним и получится так и ситуация что все как бы начнут
6878440	6886400	строить свой собственный блокчейн свою собственную версию пела бог чейна это был такую вот такую там
6886400	6892960	еще одно если произойдет еще одна транзакция когда он опять раздвоиться постановам на 2
6892960	6897960	там над действие так и так далее так далее но выглядеть это будет очень просто просто
6897960	6903080	либо просто становится производство блоков вот или как бы там не знают а
6903080	6909020	майнер насчет манить блоки как бы сам в себя как бы один но на самом деле сам он это ну то есть
6909020	6917720	не потянет как бы никакой майнеру в одиночку как бы маленького к вот и поэтому как бы был
6917720	6925480	член остановится из этого вытекает такое самое как бы главное такое основное просто требования
6925480	6933580	к процессе лгут транзакции в членах транзакции в членах они процесса строго детерминированно
6933580	6940000	значит что это значит компьютер сайт строго детерминированно это означает что на одном и
6940000	6949120	том же им пути ваша функция у которых не знаю ваша программа грубо говоря исполняется порождает один
6949120	6955420	и только один output в любом на любой архитектуре на любом процессы
6955480	6961780	в любое время там дня и ночи то есть неважно как бы ну помимо импутов давать
6961780	6969400	уж соответственно если мы говорим о блокчейне да то там еще есть предыдущие данные блокчейна
6969400	6976800	блокчейн да это ну то есть там есть то как бы то что мы можем взять там из предыдущих
6976800	6985360	блоков внутри этой программы использовать ну да давайте так просто смотрите например
6985360	6990820	input n квадрат короче output это детерминированная функция
6990820	7008100	да хорошо а если например вот такая вот там не знаю там 10 плюс текущее время нет можно
7008100	7015220	вопрос дизайнерами имеется ввиду пью чисто ешь да нет нет нет как раз здесь кстати говоря
7015360	7021600	в в smart контрактах есть отдельный как бы пьюр это значит что она еще не обращается как бы никуда
7021600	7028640	она не читает никаких внешних данных как бы вопроса там не знаю там работает то есть пьюр функция эта
7028640	7033220	функция которая работает только со своими аргументами вот только с тем что вот здесь
7033220	7040840	находится все больше ничего не делает вот этот пьюр то есть чистая функция да да да это вот
7040840	7045160	smart контрактов у него прям есть модификатор который называется пьюр это там если вы считаете
7045360	7052260	не знаю квадратный корень или там не знаю там математик какую-то а если она лезет соответственно
7052260	7058300	куда-то там блокчейн ну например на предыдущие данные которые были записаны блокчейне ну например
7058300	7068600	ей нужно сделать например баланс там не знаю там баланс вася увеличить на 5 такая функция
7068600	7081500	будет детерминированная ну смотри такая функция будет да еще раз но будет ли функция который
7081500	7087900	увеличивает баланс вася на 5 ну да должна быть но при этом они чистят потому что она
7087900	7093860	это ходит ну а она где она действительно будет детерминированная потому что у нее есть уже как
7093860	7098580	бы до этого как бы вот это вот состояние четко зафиксированы то есть сколько ты
7098580	7104340	там у вас там на балансе это на работе будет всегда одним и тем и тем же способом и самое
7104340	7111460	главное она будет порождать тот же самый вот этот стоит div вот так вот как бы но она будет
7111460	7117720	порождать грубо говоря одни и те один и тот же набор изменений вот этих вот ключей значений то
7117720	7125280	есть там у вас и как бы будет там плюс 5 как бы этому вызывающую чем там комиссия так сейчас
7125280	7128220	пропал то есть
7128580	7137400	надеюсь установилась вот то есть как бы будет порождать один и тот же одно и то же изменения
7137400	7143400	в стейте в точности баланс увеличится на 5 там с кого-то там комиссии снимут и так далее но все
7143400	7148820	это на основании я еще раз как бы подчеркиваю на основании данных которые есть блокчейне то
7148820	7157180	есть никаких там внешних обращений быть не может в этих транзакциях ну и кстати текущее время ну то
7158580	7164840	есть Zero В�ы это действительно не детерминированный история но когда майнер собирает блок и вставляет к
7164840	7172600	него транзакцию которая берет как бы текущее время он же вставляет сюда timestamp поэтому эта штука в
7172600	7178300	принципе годится то есть конечно текущее время разумеется в контрактах есть но просто для всех
7178300	7184980	транзакций в одном блоке оно совершенно одинаково сюда берется время сюда берется время сюда берется
7184980	7188420	время и все это как бы время блока то есть никакого текущего времени так как нет никакого развития
7188580	7196760	времени там нет его получить нельзя вот это все из-за требования детерминизма какие еще
7196760	7206580	функции которые детерминизм нарушают можете вспомнить который на разных компах дадут
7206580	7214020	разные значения любые которые зависят от рандома ну хотя там и соседи одинаковый
7214020	7222680	тоже не факт но рандом да совершенно верно и здесь собственно пускай рандом вычисления
7222680	7233200	с помощью . могут зависеть от процесса системы вот прекрасное замечание и крайне важно вот такое
7233200	7239700	число на разных процессорах вам породит как бы разные бинарные образы то есть как бы с разной
7239700	7243960	точности будут проводиться вычисления и по-хорошему если мы будем прямо добавлять
7244020	7253120	в базу данных напрямую значение вычисленные на процессорах как бы разных архитектур они
7253120	7258960	будут бинарно разные и нам это не годится и поэтому блокчейнах операции с плавающей точкой
7258960	7265640	нативных из которые как бы берут результат процессора грубо говоря и напрямую его как
7265640	7273420	бы куда-то пихают как бы их нету блокчейнах по сути вообще нету как бы никакого операции с
7273420	7274000	плавающей точкой
7274020	7281940	на самом деле конечно же ну то есть понятно что как бы как это как бы нет когда как бы они есть
7281940	7290220	он в кошельке там что-то там с точкой как бы так далее но на самом деле во-первых есть либо
7290220	7296760	которые позволяют делать вычисления с плавающей точкой как бы вот как раз в детерминированном
7296760	7303020	варианте вот но блокчейнах все представляется целыми численно числами вот буквально как бы
7304020	7309880	то что ты будешь отправлять его в подходите только где-то еще полтора тысячи суток то есть
7311800	7316900	здесь вот такие есть все данные это вообще не просто численно численно walnut не цена
7317900	7325980	на все цены мало мне ничего мешать я statue статус это д Styrofoam или эфир как бы вы можете
7325980	7331000	прям сразу готовятся у вас будут просто 32 байта там или там на 256 бит и вот-вот вот вот у них вот
7331000	7339780	uint короче там беззнаковая целая длиной 256 бит это нативный тип данных для в общем-то для всех
7339780	7351040	блокчейнов 256 бит как бы размер он связан тоже с одной важной вещью то есть потому что все вот эти
7351040	7359240	вот вот это вот наша вся как бы база данных state database с ключами там не знаю с эфиром там и так
7359240	7365780	далее и так далее когда туда начинаешь добавлять дополнительные данные различные структуры там
7365780	7372020	какие то там еще что то то есть какие-то структурированные данные которые привязаны
7372020	7382360	к адресу владельца смарт-контракт с ними работает то все эти данные адресуются по хэшам то есть
7382360	7387940	грубо говоря не знаю хранилище грубо говоря контрактов она
7389240	7397680	организовано тоже какие были и все значения как бы которые адресуются не все адресуются по хэшу если
7397680	7403820	мы привыкли как бы что у нас в наших компьютерах там в обычных да у нас есть там указатель для
7403820	7408800	там сишный который ссылается на область там в памяти и там у нас там сколько-то бит как бы
7408800	7417380	находится и вот этот указатель как бы он такой там какой мы там линейный ну такой там 12 потом там не
7419240	7429260	стал 20 там ну и так далее то есть то в блокчейнах специально специально как раз сделано адресация
7429260	7435020	вот это вот все вот эти ссылки они являются хэшами и сделано это опять же за требования
7435020	7441240	детерминизма чтобы любая логика которая пошла там поменяла вот эту переменную поменяла вот
7441240	7449080	эту переменную поменяла вот эту вот переменную то есть сам код чтобы он тоже исполнялся полностью
7449240	7455420	детерминирован чтобы даже как бы оперативной памяти вот эти вот изменения они были они были
7455420	7460540	детерминированы ну что в smart контракт там собственные перемены сохраняются в этого
7460540	7468860	киева или вас данных и так далее вот то есть поэтому отсюда как раз выходит вот это вот
7468860	7477380	из детерминизма выходит истории как бы про то что все данные в блокчейнах они целочисленные
7477380	7479220	все операции как бы целочисленная
7479240	7486780	все остальное как бы делается при помощи целочисленных операций там не знаю там
7486780	7491420	приходит там блокчейн и мы сделали как бы крутой бог чей там со смарт-контрактами там
7491420	7497240	в транзакции можно там поместить там супер там не знаю там чего хочешь как бы написать а вот
7497240	7503740	здесь написать все что хочешь у нас контракт очень простые на джава скрипте пишется вот ну
7503740	7508800	и теперь представьте короче говоря у вас здесь как бы на джава скрипте да вы можете вы на самом
7508800	7514920	деле можете спокойно технически запрограммировать что у вас там не знаю там ваш валидатор взял
7514920	7520620	транзакцию здесь в каждой из них там джава скриптовый код взял как бы выполнил джава
7520620	7525960	скриптовый код накатил там что-то даже сделал но до терминизма вы здесь не получите то есть
7525960	7531600	у вас будет реально рассогласование то что у вас на одном компьютере он вам одно чем это считает
7531600	7537660	как бы на другом компьютере тоже транзакциями сработает какими по-другому на одном было мало
7537660	7538680	памяти он там
7538800	7545640	я не знаю там много там выделял скрипел выполнялся 10 секунд и транзакция здесь она выполнялась там
7545640	7553180	за 0 1 секунды и так далее то есть все вот это вот как бы блокчейнах очень жестко регламентирована
7553180	7562200	то есть под транзакциями всегда стоит какая-то виртуальная машина которая похожа на gm ну то
7562200	7568780	есть на джем которые вот эти вот транзакции исполняют я вам сейчас рисую вот эту
7568800	7574620	то что вася как бы петь и там не знаю там 10 как бы эфира переправлю переправляет но мы-то
7574620	7579600	конечно будем заниматься контрактами которые будут очень подробно там сильно подробнее как
7579600	7586700	бы следующая лекция вы уже можете как бы заранее готовится что здесь конечно не 10 эфиры передается
7586700	7592540	а на самом деле просто вызывается под причем какой-то может быть достаточно значимый под
7592540	7598600	какой-то там серьезный который там из одного баланса заминусует на другой добавит кому-то на
7598800	7606300	числе проценты заплатит короче там не знаю там фито майнеру и так далее так далее вы и может сделать
7606300	7614100	там 10 раз как бы и там в сложных различных комбинациях математику посчитать какой-то то
7614100	7619860	есть этот серьезный блокчейн и которые со смарт-контрактами они про перекладывание
7619860	7628680	как бы циферок ну и могу сказать да что получили разработка это ну я уже говорил до что биткоина там
7628800	7637500	мало вот потому что а эфир это много потому что по факту и солидите ну и соли точнее не солидите а
7637500	7645080	именно то что у него под капотом его эм эфириум виртуал машин который исполняет расход который
7645080	7652500	компилится на солите он уже он стал таким как бы стандартом в индустрии которые реализуются
7652500	7657540	во всех крупных блокчейнах то есть есть там блокчейн и поле только dot который работает
7658800	7665460	так вот называется мун пил вы с ним работаете точно так же как с эфиром вот есть там не знаю
7665460	7673560	это сколько да там в салоне короче есть не он проект такой который делает там прокси который
7673560	7680740	тоже делает работу как все время и здесь как бы очень крутая и культура разработки много best
7680740	7687000	practice то есть здесь уже как бы сложилось за много лет очень большое как бы комьюнити
7688800	7696900	и в общем под эфир очень очень приятно разрабатывать на самом деле очень много все
7696900	7704920	сделано вот это значит то что касается детерминизма исполнения вот поэтому когда вам говорят как бы у
7704920	7711900	нас там блокчейне смарт-контракты на питоне вот на самом деле надо интересоваться скорее
7711900	7718620	как бы такая виртуальная машина исполняет потому что как бы действительно нужен жесткий детерминизм
7718800	7724680	еще одна история как бы блокчейна крайне важны для процесс для понимания как бы процессинга
7724680	7734580	транзакций это ограничение на исполнение транзакций может подходим как бы в этой
7734580	7741960	лекции уже потихонечку как бы завершение смотрите я майнер у меня есть требования по консенсусу что
7741960	7747480	я должен там произвести там следующий блок там в течение короче не знаю там 10 следующих секунд
7748800	7754900	вот ну просто там в разных консенсусах там разным там валидатором назначаются временные слоты ты типа
7754900	7762240	с нулевой секунды до 10 произведи блок ты там тип с 11 до 20 всего у нас там шестеро и так вот там
7762240	7770820	каждую минуту это там в одном виде консенсусов биткойне короче говоря надо там типа чем быстрее
7770820	7777840	тем лучше это и так далее теперь представьте с этими моими волшебными транзакциями которые я
7778800	7784620	написал то есть которые внутри там целую там типа пачку кода исполняет там что-то там делает пересылает
7784620	7793020	вот если вот в этой вот транзакции будет наш любимый wild true ну то есть какой-то программный
7793020	7799140	код как бы который зациклился или просто который пожирает как бы кучу ресурсов в чем в этом случае
7799140	7805620	делать соответственно майнер как бы исполняет вот эту вот программу начинает как бы ее крутить
7808800	7815400	и сеть стала как бы все кто хотят как бы произвести этот блок они все как бы зависли понятно что на
7815400	7823140	на транзакции должно быть применено ограничение какое-то там ну вот если прям совсем по тупому
7823140	7830740	ну давайте короче сделаем что она должна исполняться не дольше чем 0 там 001 могу
7830740	7838640	сказать что на низком уровне вот эти вот ограничения типа по времени исполнения программы они очень хреново реализуются
7838800	7844640	на самом деле очень неудобно как бы есть очень много как бы на всяких вещей которые как бы в
7844640	7849960	точности чтобы вот этому соответствовать и не попасть как бы никакую атаку эксплойтейшн вот
7849960	7858280	этой штуки это нереально еще хотелось бы вообще как можно выброс да да да а вот ограничение по
7858280	7862860	времени они разве не делают не дискриминированную то есть на одной машине он успел он такой не
7862860	7872900	успела ну нет если этот блок был принят вот это ограничил по времени вот я да я потихонечку к
7872900	7879120	этому иду ну то есть как оказалось на самом деле как бы подход по времени он не особо как бы хорош
7879120	7885520	во первых его трудно запробовать вот во вторых как бы тоже компьютер это разная да и скорости
7885520	7891600	и скорости разные и поэтому как бы одного компьютера это типа 001 а у другого 01
7892860	7899300	и вообще по-хорошему то ведь майнер как бы процессе для него представьте вот у этой
7899300	7904200	транзакции я прям буду рисовать трассу представьте что каждый той точечка это ассемблер на инструкция
7904200	7908880	вот прям машины инструкции который исполняет процессор а у этого трасса вот такая вот
7908880	7915240	коротенькая а это вообще эфир перевод переводит там типа два баланса обновил как бы все и гуляй
7915240	7922080	вася и по-хорошему как бы майнеру бы надо бы брать деньги за каждую вот из вот этих вот точек
7922860	7928300	то есть как бы кто написал большую программу как бы с того много берем денег кто написал
7928300	7936600	что-то коротенькое как бы то берем не берем меньше денег вот я и соответственно из этого
7936600	7943140	родилась концепция эфирная газа мы тоже про нее будем там подробно подробно говорить вот
7943140	7952740	там прям очень часто будем к этой штуки обращаться по сути стран транзакция ну транзакция в эфире и
7952860	7960720	это набор обходов то есть набор прямо инструкции машины там не знаю там сложил там чем сложить
7960720	7970260	запушить на стек запушить на стек перемножить если как бы получился ноль там типа их то сделать там
7970260	7976980	джамп но девочкам кто из вас не знаю там микроконтроллеры прогал можете вспоминать
7976980	7982760	как вы здесь до smart контракты в общем-то ну виртуальная машина они так и работают его и
7982860	7989520	это по сути такой микро микроконтроллер как бы стандартный с памятью со счетчиком команд короче
7989520	7997680	со стеком там с выделениями памяти и так далее так далее вот и соответственно идея как бы газа
7997680	8004280	она была в том чтобы просто присвоить каждой из этих инструкций свою цену то есть там от стоит
8004280	8012680	там не знаю 3 push стоит 2 умножение стоит 10 там еще там что-нибудь запись в киев в киеве любого
8012860	8020480	данных нового значения что у вас стало 8 как бы стоит там 20000 20000 попугаев или там как
8020480	8026620	угодно то есть это условные очки трудоемкости исполнения данной инструкции какие-то попроще
8026620	8034280	да там арифметика загнал в два регистра как бы выполнил все здорово как бы push на стек стек
8034280	8042440	штука легковесная как бы операции с ней должны быть дешевые а и в.м. это стек basic основаны на стыке
8042860	8049580	машина запись в сторож это по сути за запись на диск самый тяжелый самый медленный кошмарной
8049580	8056540	операции как бы она стоит прям вот дофига ну и так далее то есть мы еще все эти мы цены как
8056540	8064160	бы эти обсудим и как это все оптимизируется обсудим но но как бы то что я хочу сказать
8064160	8072860	что в блокчейнах оплачивается каждый квант буквально исполнение которые потратили потратили
8072860	8080140	то майнера валидаторы никто никому не доверяет то есть никто никому бесплатно ничего не делает
8080140	8087160	то есть никаких бесплатных транзакций вообще не существует блокчейна вот там любят там не
8087160	8091660	знаю корпоративный был член танк рассказывать или там приходить короче говорить что у нас там
8091660	8097500	бесплатные транзакции бесплатные транзакции это означает что вы можете бесплатно набить
8097500	8101920	блок короче всяким трэшем и по сути заспамить просто весь блокчейн
8102860	8108240	Там, не знаю, приходит какой-нибудь проект и говорит, у нас бесплатные транзакции.
8108540	8109380	Мы такие, да ладно.
8110160	8115420	Он говорит, ну вот у нас человек заморозил токены свои на балансе,
8115440	8118540	у него теперь там ноль, он там 10 тысяч токенов заморозил,
8118880	8120660	и у него теперь бесплатные транзакции.
8120660	8125460	Мы говорим, ну отлично, короче, вот у нас два чувака заморозили по 10 тысяч токенов
8125460	8131780	и друг другу кидают транзакции, пожалуйста, бесплатно,
8131780	8135880	как бы все блоки забиты, как бы мусором, соответственно, блокчейн не работает.
8136660	8142220	То есть все оплачивается обязательно, как бы, то есть ни один майнер или валидатор
8142220	8145700	бесплатно вычислительные ресурсы не предоставляет.
8145700	8150280	При этом как бы диск дороже, процессор, память и так далее.
8150380	8156580	Есть и другие модели оценки ресурсов, и чтобы обратить на них внимание ваше,
8156640	8161200	но это уже немножко из области высоконагруженных приложений,
8161320	8161700	да, вот.
8161780	8167080	У вас, когда какой-то работает там на компьютере, там, демон, не знаю, ваш веб-сервер,
8167220	8171240	там, база данных, вдруг она начала по производительности всасывать,
8171660	8174880	вы, значит, бежите в мониторинг, начинаете, значит, смотреть,
8174880	8181260	что на самом деле происходит, и, по сути, вы должны всегда помнить о четырех ресурсах.
8181400	8183580	Значит, первый ресурс – это процессор.
8184220	8187000	То есть вы прибегаете на компьютер, как бы смотрите, у вас там, типа,
8187440	8191440	какой-нибудь load average, загрузка процессора выросла, стоит там,
8191440	8197520	типа, в 100%, вот, случилось это вчера, как бы, и вы думаете, что произошло,
8197580	8202080	на самом деле, там, кто-то выкатил обновление, которое, не знаю, там, раз в секунду,
8202080	8206020	там, тысячу раз в секунду проверяет электронную подпись, например,
8206220	8209080	или там шифрование какое-нибудь, или математические операции,
8209740	8213980	или там работа с индексами в базе данных, то есть у вас, как бы, процессор потек.
8214820	8218680	Вот, вы начинаете разбираться, то есть это, значит, первая история.
8219160	8221380	То есть как заспамить при помощи процессора?
8221440	8226820	Там, не знаю, блокчейн или распределенную систему заставить, как бы, в своем контракте,
8226840	8229720	вот здесь вот выполнять какую-то сложную математику.
8231120	8234440	Ну, то есть что-то там прям, то, что будет поедать, как бы, процессором.
8235160	8240680	Очень серьезно вот эти возведения там степени, там, перемножения больших чисел и так далее.
8241660	8246420	Следующий ресурс – это у нас, давайте я RAM напишу, ну, давайте, наверное, memory.
8247920	8251420	Это тоже всем из вас, наверное, известно, кто работал.
8251440	8256440	Свои приложения, вы приходите на работу, менеджер говорит, у нас все, как бы, тормозит.
8257480	8264740	Вы смотрите, у вас, как бы, все, вы добрались, как бы, у вас память утекла, как бы, все, вы ушли, там, машина ушла в свап, все упало, как бы, все плохо.
8265620	8273440	Значит, ну, тоже, как бы, там, выкатили какое-нибудь обновление, там, не знаю, которое там в памяти разворачивает массив из миллиона элементов.
8274180	8277280	И таких-то, и в процессах, как бы, таких массивов дофига.
8278160	8281280	Соответственно, внутри вот этого кода, как бы, то есть можно...
8281440	8293440	Можно сделать цикл, который, как бы, постоянно, там, пишет в память, занимает, занимает оперативку, занимает, занимает, там, ее выделяет, как бы, немереное количество оперативки, как бы, и, соответственно, пожирает память.
8293620	8297060	За это надо тоже считать деньги, за CPU, за memory.
8298020	8299780	Следующая штука у нас – storage.
8301540	8306520	Да, это, ну, процессор input-output, то есть общение с внешними устройствами.
8306520	8311100	И тоже вы в своих веб-приложениях увидите, что у меня там все, диск, как бы, встал.
8311440	8318880	Ну, началось немереное количество записей, чтений, и все, как бы, диск не успевает, как бы, тормозит всю остальную систему.
8318980	8326000	Все остальные его ждут, там, процессор кулит, память кулит, как бы, а диск, значит, за всех он дувается.
8326880	8331560	То есть за него обязательно платите, и в блокчейне это самый дорогой ресурс, то есть storage.
8331560	8338480	Почему? Потому что то, что вы сохранили, как бы, в блокчейне, оно тиражируется на тысячи нод.
8338760	8341420	Все это, все, теперь весь мир, как бы, будет ваш эти данные.
8341440	8347120	Постоянно копировать, постоянно дублировать, хранить, как бы, поэтому он стоит крайне дорого.
8347500	8352700	Ну и четвертый ресурс, про который часто забывают, нетворк, то есть сеть.
8353080	8358420	У вас все, как бы, с сервисом хорошо, как бы, но только на сетевом интерфейсе, как бы, немереное количество пакетов.
8358540	8367700	Вас там дедосит, например, там напал кто-то на ваш сайт, или там качает кто-то там с вас, как бы, там немеренно, там, не знаю, там, фоточек каких-нибудь.
8367700	8370700	То есть это, в общем-то, тоже один из ресурсов.
8371440	8374800	И для блокчейнов, как бы, нетворк – это, по сути, размер транзакции.
8375480	8385000	Ну, то есть входные данные, которые здесь используются, которые были в транзакции, чтобы, как бы, нельзя было, там, такую транзакцию огромную, там, не знаю, посылать,
8385680	8393080	или, там, миллионами транзакций заспамить, как бы, ноду, чтобы она их не получала.
8393080	8400800	За все это, как бы, надо брать деньги, и, соответственно, в концепции газа все вот эти вот инструкции, они взвешены.
8401440	8416100	По сути, как бы, по цене и с дополнительными всякими плюшками, типа, что если ты выделяешь память, то тебе придется заплатить за каждый 32-байтный слот, например, за каждый новый, как бы, 32-байтный слот.
8416100	8423760	Знаете, похоже на страничную организацию памяти в операционных системах, вот это выделение слотов.
8424120	8429500	Или если кто читал, как работают всякие малаки, там, все, все, все плюс-плюс.
8430120	8431240	Выделение памяти.
8431440	8432500	С такими, как бы, чанками.
8432680	8437060	Здесь тоже штука, как бы, достаточно похожая и близкая к этому.
8438060	8438420	Вот.
8438540	8445440	Ну, и, соответственно, там, память, понятно, там, сторич тоже, как бы, вот этими кусочками, как бы, своими здесь оценивается деньгами.
8446180	8446500	Вот.
8446640	8448240	Ну, сеть, в общем-то, тоже.
8449580	8450020	Вот.
8450440	8455120	Сеть, это оценивается размер, как бы, данных, которые пришли к транзакциям.
8456120	8456480	Вот.
8456480	8460560	Я правильно понимаю, что смарт-контракты тогда в качестве транзакций,
8461440	8463400	которые отправляются, которые майнеры исполняют?
8463960	8468520	Ну, на самом деле, смарт-контракт, как бы, код заранее размещается в блокчейне,
8469080	8471160	у него тоже, как бы, появляется адрес,
8471720	8477140	а, как бы, пользователь отправляет вызов функции этого контракта.
8477220	8479380	Он говорит, хочу вызвать функцию вот в этом контракте,
8479460	8481500	такую-то, такую-то, с такими-то параметрами.
8482880	8483240	Вот.
8483360	8487580	А как другие ноды валидируют, что майнер правильно его исполнил?
8488200	8489220	Они точно так же.
8489220	8491220	Как каждая нода его исполняет?
8491440	8493920	Каждая нода его исполняет.
8494460	8495400	Именно так.
8496020	8499040	То есть каждая нода исполняет, как бы, вот эту вот транзакцию.
8499040	8501540	Именно поэтому смарт-контракты, они очень небольшие,
8502100	8503960	они очень оптимизированные, как бы,
8504040	8507140	там нету никаких там, типа, больших циклов,
8507300	8509120	там нет, как бы, ничего, что работало.
8509280	8513040	То есть там вся логика, она вывернута, как бы, такая, как бы, на пользователей.
8513660	8515340	Там все действия делают пользователи.
8516680	8517080	Вот.
8517400	8521040	То есть именно так, как бы, то есть каждый транзакт,
8521440	8530300	то есть то что я говорил как бы то что с васи как бы списали 10 эфиры как бы опять и как бы
8530300	8536860	добавили 10 эфира на самом деле это же внутри тоже программа то есть эта программа которая
8536860	8546160	сначала проверит что у вас и баланс больше десяти и упадет если как бы баланс меньше затем как бы
8546160	8553900	она должна записать в storage затем она должна как бы записать петь и storage затем там но и
8553900	8560860	закончить работу обновив соответственно там стоит ру то есть это уже такая как бы нехилой работа вот
8560860	8567580	и собственно виталик то как раз и предложил он где-то давайте вот эту штуку пускай программисты
8567580	8575560	пишут то что мы говорим про газ процент операции это чтобы оценить сколько майнера
8575560	8576160	получает
8576160	8584320	за выполнение да да именно ну то есть валидаторы просто так будет исполнить откат или как нет нет
8584320	8591100	нет но и нет это газ это просто подход к оценке да теперь мы грубо говоря знаем у нас есть какой-то
8591100	8596980	код вот это вот функция да там ну мир большой контракт на мы вызываем в своей транзакции там
8596980	8604500	не знаю там вася обращается к контракту и вызывает функцию не знаю как там
8604500	8606100	функция
8606100	8613120	вызывает там свою пойдет там электронную подпись отправляет ее эта функция отправляется в контракт
8613120	8622000	начинает исполняться вот при этом как бы тратится газ есть какой-то верхний лимит то есть если как
8622000	8628040	бы васи упрется там в 10 миллионов газа он его там потратит то транзакция не будет выполнена
8628040	8634620	вот она упадет как бы с ошибкой а аутов газ и при этом пока она исполняется здесь ведется счетчик
8636100	8644220	плюс 2 плюс 10 плюс 20000 и в результате как бы у него получается количество газа который он потратил
8644220	8651400	на вот это исполнение этой транзакции вот столько с него как бы из пишет майнер просто в эфире сделан
8651400	8662800	так что комиссия она называется газ прайс вот это как бы следующая история то что каждая единичка газа
8666100	8674200	ставите сами я хочу вызвать транзакцию которая потратит 21 тысячу газа и цена газа там не знаю
8674200	8681520	там ноль там типа ноль ноль ноль ноль ноль а там один эфира и манер ее исполняет умножает 21 год
8681520	8689040	на это и столько вам придется заплатить нового майнера заплатим а потом другие но даже им нужно
8689040	8695060	проверить что майнер крик не спал на программу они тоже будут и надо не за это ничего не получать а
8696100	8702360	не втоль да да ну конечно нет они просто валидируют да как бы они просто когда перепроверяют
8702360	8708580	они точно также до накатывают каждую из транзакций исполняют по сути все все смарт-контракты на 10
8708580	8718480	здесь так не очень понятная концепция нет нет нет ну как ну вот вы получили блок вам его нужно
8718480	8724420	проверить вот у вас есть транзакция которую вы просто выполняете вот этот вот код понимаете как
8724420	8725980	бы что этот код потратил 20
8726100	8735660	тысячу газа что пользователь в транзакции указал типа 001 как бы эфира посчитали там комиссию ваш
8735660	8743700	комиссия как бы за эту транзакцию там составила там типа ноль там что-то там 00 21 эфира и все
8743700	8749420	ее приплюсовали как бы к награде мая майнеру который за блок произвел пошли следующую
8749420	8756100	транзакцию следующий разок 100 же тоже выполняет определенный код вы его выполняете проверяете
8756100	8761500	то что вы действительно было столько газа потрачено сколько ему и у майнера как бы
8761500	8771160	берете ту цену как бы транзакции перемножайте получаете комиссию 2 транзакция вот так вот
8771160	8781240	все как бы друг друга перепроверяют если статические анализаторы кода которые могут
8781240	8785500	газ посчитать когда конечно мол ну конечно есть
8786100	8792420	и газ как бы подсчитывается достаточно там просто там в куче как бы это мы еды и как бы
8792420	8802660	то есть здесь единственного что важно как бы что вы не всегда можете предсказать количество газа
8802660	8809340	заранее не зная состояние контракта потому что здесь же программа как бы она может пойти как
8809340	8815780	бы его вход этой ветке а в обход этой ветке она может пойти если например какая-то другая
8816100	8822660	транзакция в то в том же самом контракте что-то изменила то есть как бы здесь и не очень просто
8822660	8829280	как внутри с одной стороны как бы просто другой страны очень-то просто то есть есть да какой то
8829280	8835800	с рукава здесь логических веток как бы этой программы по такому количеству путей как бы
8835800	8843160	она может пойти поэтому отцы газа прогассов не волнуйтесь мы прямо на самом деле очень глубоко
8846100	8853180	штука как бы считается и от чего он зависит вот но что нам важно как бы на этой лекции это то что
8853180	8861820	любая любая транзакция в блокчейне оплачивается и оплачивается за ее именно сложность исполнения
8861820	8869220	вот то есть просто как бы деньги которые доваливаются на транзакцию сверху типа в
8869220	8876420	качестве бонуса как бы это только бонус вот но как бы все базовые штуки обязаны быть оплачена
8876420	8893780	иначе иначе сеть будет просто заспамлено вот так вопрос каждый раз выплачивается манеру который
8893780	8898560	сделал смарт-контракт нет майнер не делает смарт-контракт смарт-контракт делается в
8898560	8899160	пользователям
8899220	8906620	майнер исполняет код этого смарт-контракта и берет деньги за газ потраченный на вот это
8906620	8913500	исполнение вот так вот то есть манер исполняет чужую программу и при этом как бы подсчитывать
8913500	8920840	сколько он потратил на этом процессора памяти все это дело суммирует получает вот эти вот условные
8920840	8928400	единицы типа газ умножает на цену которую ему дал пользователь сколько я готов заплатить за газ и
8929220	8935580	собственно вот абсолютное значение вот этой вот комиссия то есть смотрите у нас есть один
8935580	8936380	смарт-контракт
8936380	8943760	например и его вызывает 10 пользователей значит там например ну какой-нибудь там там вот там
8943760	8950520	там смарт-контракт Короче говоря у него есть какая-то функция вот это там f1 которая чем там
8950520	8957060	делает где там кем деньги причисляет что им забирает какой-нибудь первый пользователь вызывает
8957060	8965280	она исполняется он там насчитал там не знаю там 40 тысяч газа и сказал хочу платить как бы там
8965280	8972960	01 эфира за каждый газ ну и как бы заплатил соответственно такую комиссию второй пользователь
8972960	8982740	тоже вызывает эту функцию f1 вот он тоже потратит 40 40 к газа но хочет заплатить за
8982740	8989100	него меньше там типа 0 там типа 05 там эфира как бы я хочу заплатить за газ и вот это вот
8989100	8994560	произведение является как бы их по сути как бы комиссиями и майнер будет выбирать между
8994560	9000500	этими двумя как бы транзакциями и там наверное решит как бы выполнить сначала вот этого чувака
9000500	9006500	потому что от него больше получится потом вот этого там есть как бы еще там предварительной
9006500	9011300	оценкой газы и так далее но я повторяю что это сильно зависит от порядка транзакций в блоке
9011300	9018320	потому что может быть что случится типа сначала пришел первый пользователь изменил здесь какую
9018320	9025400	переменную и из-за этой переменной второй пользователь когда сюда пришел к но он как
9025400	9029720	бы посмотрел сюда на эту переменную как бы из-за нее как бы ему пришлось пойти как бы
9029720	9040060	исполнять другую ветку кода а здесь например получилось не 40 газа тома 80 кило газа вот
9040060	9041260	то есть здесь все
9041300	9047280	вот на усмотрение как бы программа но программистов смарт-контракты размещают пользователя то есть я
9047280	9055460	моя пишу в смарт-контракт я его диплою в эфир вот мы прямо это будем делать как бы много раз а и он
9055460	9060140	начинает работать и пользователи могут в этот контракт соответственно слать транзакции а манеры
9060140	9069440	берут с них деньги за исполнение кода вот этого смарт-контракта ответил там часть вопрос можно
9071300	9079620	давайте еще посмотрим так но тем не менее награду за предложенный блок выдают только валидатору
9079620	9085520	предложившим эти этот блок а валидаторы кто перепроверять ничего не получают да ничего
9085520	9093440	не получают то есть награды за блок отправляется валидатору просто как бы в консенсусах там сделано
9093440	9100280	так что там есть такое как бы расписание как бы работы валидаторов так называемый там скидил зависит
9101300	9108000	от алгоритмов и например там первый валидатор получил здесь награду за блок как бы в следующем
9108000	9115620	слоте как бы 2 получит среднему все честно будет да да да да да при этом если кто-то из них как
9115620	9122000	косячит там пропустил свой слот дата эта информация в общении она остается ну то есть мы можем по
9122000	9128120	предыдущим блоком понять типа что вот здесь вот он должен был работать как бы ну кто ты на самом
9128120	9131240	деле кто-то из этой группы то здесь кэш и группы там валидаторов
9131300	9138480	у нас же все byzantin фолтолеранс то есть мы не можем оставить как бы сеть не рабочая он пропустил
9138480	9143060	как бы его наказывают потом там деньгами там забирают у него там часть там не знаю вот он
9143060	9149240	стейка там еще что там и так далее то есть это мы будем на консенсусах обсуждать там довольно
9149240	9156800	интересно вот так туда как бы награду за вот получает только тот кто его произвел остальные
9156800	9161120	перепроверяют но и в принципе это тоже выгодно потому что если они не будут делать и сеть по
9161300	9167960	идет в разнос то и они сами не смогут как бы производить блоки главная идея как бы вот
9167960	9178700	этого пруфов стоит она была выглядела так следующим образом пруфов стейк что кому выгоднее всего в
9178700	9185100	блокчейне чтобы он был честным что в нем не было хаков как бы чтобы там все блоки правильно
9185100	9190880	процессоре процессе лись выгоднее всего это тем у кого больше всего токенов этого блокчейна вот у
9191300	9196220	вы больше всего крипты этого блокчейна они сильнее всего пострадают как бы если в нем
9196220	9202520	будут найдены какие-то проблемы то есть они самые серьезные а поэтому как бы раз как бы они от этого
9202520	9208420	сильнее пострадают как бы им можно просто доверить вот это вот там создание блоков валидацию там и
9208420	9215480	так далее и от пруфов стыку но он об этом вы в эфире там заморозили 32 эфира там сейчас не
9215480	9221200	знаю под 50 тысяч долларов заморозили как бы включили компьютер и следить чтобы он как бы не
9221300	9228060	когда у вас не вырубался был стабильно в нужное время как бы он там производил блоки валидировал
9228060	9237900	остальные вы блоки и он получает награду кстати подождите вы написали награду за блок награду за
9237900	9248660	блок до получает как бы получает калидатор этого блока а вторые которые ставят аттестации они тоже
9251300	9257780	то есть им тоже там какая-то копеечка падает интересно спасибо да не на самом деле на самом
9257780	9263300	деле там как бы ну там очень прикольные модели такие интересные как бы сбалансированные там в
9263300	9270800	пруфов стыке сам наверное если вам интересно наверное самый такой ну как по мне продуманный
9270800	9276560	как бы это ncos который в polkadot по нему есть там документ там интересный можно будет экономику
9281300	9286880	то что сейчас в эфире 20 как бы вот эти его 100000 валидаторов из которых выбираются под
9286880	9293300	группы которые там определенные там слоты времени должны печатать эти блоки регулировать тоже очень
9293300	9301220	красивая схема очень грамотно они долго делали вот понятно чего долго делали остальные то стартовали
9301220	9308360	с пруфов стейк с голым как бы блокчейном у эфира на горбу извините 200 миллиардов долларов и надо
9308360	9311280	переехать бесшовно как бы до чтобы ни у кого ничего не
9311300	9317180	ничего не сломалось вот они это его что-то сделали за что большой респект и уважуха
9317180	9326360	вот еще раз а если смарт-контракте какой-то некорректный неверный код до тоже то тоже такой
9326360	9333560	как бы важный вопрос значит во первых как бы смотрите любой смарт-контракт заканчивается
9333560	9341200	двумя кстати говоря именно поэтому я же говорил вам не раз что
9341300	9347520	блокчейн страна идиотских названий как бы да там название кошелек там или еще что-то смарт-контракт
9347520	9354200	значит этот код назвали контрактом потому что в биткоине похожий код тоже из машинных инструкций
9354200	9361460	он возвращает либо true либо false если true то как бы bitcoin из данного адреса тратится целиком
9361460	9369500	вычеркивается если false как бы то ничего не происходит смарт-контракты работают похожим же
9371300	9379580	так закончил свое исполнение функция и сделал окей то тогда вся вся запись как бы встает дебил
9379580	9386420	как бы она фиксируется комит ну то есть все черно здесь на меняла как бы там не все балансы там не
9386420	9393340	знаю там вася там плюс 5 минус там так далее все это записалось и по итогам этой транзакции
9393340	9401140	будет правда еще стоит труд то есть стоит изменился а в случае реверта как в случае с
9401300	9407800	или как бы отката транзакций будет по сути rollback то есть так как будто бы этот контракт никогда и
9407800	9413520	не вызывался то есть никаких изменений в сторону же не будет но при этом смотрите мы ведь до этого
9413520	9419560	реверта можем довольно долго идти дачу там гоняли по циклу там проверяли кому-то на что-то пытались
9419560	9425740	деньги записать там и так далее а потом вам все как бы реверт отменилась как бы все там
9425740	9431180	какое-то условие не сработало но майнер то потратил вычислительные ресурсы
9431300	9438480	и поэтому в эфире это же во всех нормальных его блокчейнах за это придется тоже заплатить здесь
9438480	9445720	тоже есть газ и поэтому здесь в эфире платится даже за упавшую транзакцию если не хватит на
9445720	9452360	счету мы же не знаем заранее сколько платить а тогда как бы ну майнер как бы берет вашу трансу
9452360	9460340	как бы он ее эмулирует накатывает ее на состояние как бы блока если вида что баланса меньше чем как
9461300	9471240	просто ее это свидание я не я не возьму вот а он будет выполнять ее пока будет хватать баланса или
9471240	9478160	он сразу проверяет там же мы не знаем по веткам но вот как раз как раз вот эта вот часть это как
9478160	9484700	раз то чем отличаются разные имплементации not эфира какие-то честно как бы все накатывают
9484700	9491100	какие-то делают там часть проверок предварительных какие-то опираются на предыдущие как бы транзакции
9491300	9497000	в этот смарт-контракт понятно да что вы описали такой может сказать такой вектор атаки то есть я
9497000	9503240	держу маленькую маленькую копеечку у себя как бы а майнеру все время кидаю как бы транзакцию
9503240	9509900	который тратит дофига газа они ее на нее тратит ресурсы а потом типа просто не включает блок и
9509900	9518000	получается что я задохнул вот но как раз вот именно в этом месте раз разные имплементации отличаются
9521300	9530520	что будет не давал true очень просто как бывал true это у вас как бы джамп ну условный как бы
9530520	9538340	джамп на но на какую-то там метку и потом а здесь как бы пусто но вот этот джамп он тоже что он
9538340	9546140	стоит газа там 5 газа на это бы за него заплатить программу должна закончить выполняться она не
9546140	9550200	закончат как долго он будет он будет пока как бы не будет
9551300	9560180	достигнут hard лимит газа hard лимит но имеется там какой там там 10 10 миллионов газа то есть он
9560180	9567420	сделает вам там сколько там 200 тысяч итераций как бы и остановится скажет чувак out of gas то есть
9567420	9574480	он вместо либо напишет а там с ошибкой как бы авто газ как бы закончится газ вот а так как бы
9574480	9580060	каждая операция будет стоить денег ну да и вайлд true ему придется как бы да прокрутить добро
9581300	9591500	вот тут вы как бы ничего не попишет нет я так понимаю что как раз здесь то возможно много
9591500	9597720	много как бы разных подходов вот можно оценить соответственно и стоимость функции заранее как
9597720	9604940	бы примерно вот и прикинуть как бы баланс отправляющего и ну ну как бы сами программисты
9604940	9611120	понимаете что можно как бы дело оптимизировать типа если там совсем копье как бы то не проверять
9611300	9618560	если примерно там на границе какие-то значения, но это один из векторов атаки.
9621560	9631020	Так, это значит, что касается окей, реверта, детерминизма, ожидания финализации, ну да,
9631020	9641220	наверное, смотрите, то есть вот это вот слово финализация, штука как бы довольно важная,
9641220	9649640	она как она используется, я уже там говорил про что в майнинге, там по сути как бы блок,
9649640	9656420	а вот его закрыли вот этим красивым как бы хэшом, я глядя на этот хэш, верю, что как бы на этот хэш
9656420	9660460	было потрачено там электричество, сколько там город потребляет за несколько дней,
9660460	9661000	да, да, да, да.
9661000	9666560	То есть там кучу там тераватт, как бы чтобы просто найти вот этот красивый хэш, и поэтому как бы я,
9666560	9673260	в принципе, уже уверен, что моя транзакция там, она уже не будет откачана, ну может быть,
9673260	9678760	появится там какой-то конкурент, и моя транзакция, ну все равно с большой вероятностью попадет и в
9678760	9684920	этот блок, а если уже прошло там, типа сейчас считается в биткоине, там типа шесть блоков,
9684920	9690440	если прошло назад, то все, этот блок считается, что все, прям он супер надежный, все, вот транзакция
9690440	9690980	уже не корректируется.
9690980	9697160	Тогда не будет откачано, вот, но опять же это только вероятность, то есть математическая,
9697160	9702920	а вот та, которая детерминированная финальность, которая в Proof of Stake как раз используется,
9702920	9709280	там история такая, что если блок является финализированным, то есть вот он собрал вот
9709280	9714380	эти вот больше двух третей аттестации от валидаторов, он уже не откатывается вообще
9714380	9720260	никогда, то есть просто, то есть неважно какая там появится цепочка, более тяжелая, более,
9720980	9727040	еще там какая-то, как бы, то есть все, эта штука уже, как бы, она не откатывается никогда,
9727040	9732560	то есть после нее, как бы, блокчейн идет строго сюда, и поэтому как финализация штука важная,
9732560	9738740	с той точки зрения, что вы гарантированно со 100% вероятностью знаете, что вашу транзакцию включили
9738740	9745700	в блок, она уже не будет выпилена из блокчейна никогда, вот, и поэтому на Proof of Stake сетях,
9745700	9750700	там проще строить, там, не знаю, там, мосты, которые там из ровных блокчейнов активы, там,
9750980	9755840	так далее, им нужен обязательно вот этот факт, типа, что все, вот, в этой сети все железно,
9755840	9762800	прямо вот 100%, как бы, не будет, как бы, отката цепочки, вот, как бы, вот это понятие финализации,
9762800	9769940	как бы, тоже довольно-таки важное. Еще что, наверное, такое из общих, из общей истории,
9769940	9778400	как бы, там, крипты, ну, давайте, да, сначала для прикола, не знаю, там, покажу, как, ну,
9778400	9780960	это вообще очень просто этим пользоваться, у меня есть вот эта, вот эта, вот эта, вот эта, вот эта,
9780980	9793580	вот этот кошелек, это, по сути, расширение в браузере, на самом деле, оно просто, у меня есть
9793580	9798360	тестовый эфир, тестовая сеть, вы в ней тоже, кстати, будете тоже много работать, вот,
9798360	9805760	Герли она называется, их тут несколько, это такой игрушечный эфир, ну, который подняли
9805760	9810360	разработчики, вы можете попросить, как бы, себе, там, тестовый эфир и, там, поиграться с ними,
9810980	9816440	вот это вот мой адрес, он так выглядит, как бы, ну, обычно, как бы, на таких ликбезах это показывают,
9816440	9824300	вот, и вот так я отправляю крипту, не знаю, там, с того адреса на адрес, то есть я думаю,
9824300	9831680	что все это вы можете, там, не знаю, в миллионе туториалов найти, так, давайте сейчас отправить
9831680	9839660	между моими счетами куда-нибудь на другой тест, отправлю какое-то количество, там, в Берли эфира,
9840980	9849040	вот, в этот момент, смотрите, моя транзакция сформирована, здесь написано примерная плата за
9849040	9855860	газ, то есть, вот столько я буду за нее заплачу, как бы, эфира, значит, сейчас где-то подробнее,
9855860	9865820	может, что-нибудь есть, так, ну, здесь все побольше для юзеров, ладно, сейчас отправим,
9865820	9870160	и по самой транзакции посмотрим, вот, в этот момент, когда я нажал подтвердить,
9870980	9878300	метамаск достал мой приватный ключ, поставил, поставил электронную подпись, вот, она пошла,
9878300	9884960	как бы, транзакция, она еще пендинг, то есть, она еще висит в транзакцион-пул, ее еще не включили
9884960	9891680	в блок, то есть, майнеры, типа, еще пока ее только видят, эту транзакцию, но при этом, смотрите,
9891680	9900880	ну, она стоит 21 тысячу газа, вот, здесь, как бы, она гвоздями прибита, потому что отправка эфира,
9900980	9909260	это просто константа 21 тысяча газа, вот, там, вот эта вот цена, это сколько я готов заплатить за газ,
9909260	9919420	это gasprice, то есть, сколько, как бы, мой кошелек поставил, какую цену за один газ, вот, и, а, ну,
9919420	9925960	вот, ее включили, эту транзакцию включили, соответственно, вот этот вот блок, 763-91-17,
9925960	9929980	в котором было еще 116, там, транзакций.
9930980	9933780	Что-то еще интересного такого как бы показать.
9934100	9938300	Ну, вы все равно здесь еще накликаетесь сюда.
9938660	9942340	Включили меня на позицию 49 в блоке.
9942980	9948080	У моего аккаунта нонс 9, то есть я уже там 8 или 9 транзакций с него отправил.
9948940	9952780	Вот. И вместе с этой транзакцией был отправлен 001 эфира.
9952780	9956120	Вот они были переданы на мой другой адрес.
9956120	9962160	Это проводник блоков, который, по сути, показывает всю информацию о блоках и транзакциях.
9962280	9971040	В нем довольно часто приходится сидеть, особенно если разбираешься с платежами, взаимодействием с контрактами и так далее.
9972060	9975180	А вторая история – это вот этот кошелек.
9975400	9983080	И когда я вам говорил в тот раз, почему это, скажем, поудобнее банковских приложений,
9983680	9985880	ну, я вот с этой вот штукой могу ходить.
9986120	9989080	В сотню разных финансовых проектов.
9989420	9996640	То есть, там, не знаю, поменять, там, не знаю, эфир на доллары, доллары, там, на еще какие-нибудь, там, токены.
9997120	10005780	Положить их, там, не знаю, под залог или, там, положить, там, типа, в банк так, что другие, как бы, люди будут брать их в долг, там, за проценты и так далее.
10005780	10007360	То есть здесь очень много всего.
10007940	10013920	И все это делается при помощи вот этого расширения, вообще без логинов, без регистрации, вообще без всего.
10014780	10015980	Это крайне удобно.
10016120	10022600	Это прям вообще, как бы, быстро и, честно говоря, там, ну, не знаю, в Тинькофф лень логиниться, очень сложно.
10023440	10027280	Какие-то там коды, короче, что-то еще, там, какие-то непонятные, в общем, все.
10027520	10027980	Извините.
10028980	10033480	А какой смысл майнерам майнить блоки в тестовой сети?
10034680	10038760	А это разработчики поднимают, как бы, потому что я могу…
10038760	10039520	А, ну, это просто…
10039520	10040320	Да-да-да.
10040320	10044900	Это для работы, собственно, для обучения, для работы очень удобно.
10046120	10051060	Это выкладывать сначала в тестовую сеть, в тестовой сети, как бы, на тестовом эфире все отработать.
10051680	10058740	Можно поднять, короче, прям целый, ну, прям весь сайт полноценный, короче, со всем вообще функционалом полностью, как бы.
10058780	10060420	Он просто будет, как бы, в тестовой сети.
10061260	10066840	А в боевую сеть потом просто скопировать контракты, и все, и, в общем-то, все, как бы, работает.
10068640	10070880	Насколько можно доверять этому расширению?
10072480	10075140	Ну, как бы, много народу, как бы, доверять.
10075140	10081140	Если не доверяете, как бы, можно там двумя строчками на питоне, как бы, пожалуйста, сами себе сгенерируйте, как бы, адреса.
10082280	10083720	Вы это и будете делать.
10084400	10084580	Вот.
10084960	10088060	Сами себе сделайте адреса, подпишите транзакцию, да, отправьте.
10088160	10093480	Хотите питоном, хотите JS, как бы, хотите, там, Java, там, чем угодно, как бы.
10094400	10094800	Вот.
10095100	10096920	То есть здесь, как бы, все просто.
10096980	10101260	Он просто, как бы, облегчает вам работу, а так вы можете делать и с консоли все.
10101260	10104260	А если вообще паранойя, как бы, то можно…
10105140	10107760	Аппаратный кошелек сделать.
10109400	10109800	Вот.
10110500	10124360	Ну, в общем, грубо говоря, с тем, как переводить, там, не знаю, там, эфир, как бы, поиск кошельками, это вы без меня как-нибудь изучайте, потому что здесь материалов, на самом деле, реально дофига.
10125480	10125880	Вот.
10126440	10126840	Так.
10127100	10128880	Что еще, наверное, там интересное?
10131400	10134880	Ну, наверное, важно еще, как бы, заранее, да, сказать, что у контракта…
10135140	10164600	У него есть собственный адрес, и, ну, то есть, когда я говорю, мы отправляем транзакцию в контракт, на самом деле, вот в этой нашей State Database, где у нас был, там, у Васи было 10 эфира, у него был nonce, там, не знаю, там, 9, то после того, как Вася выполнил, ну, Вася или кто-то другой выполнил специальную транзакцию create-контракт, создать контракт, здесь же…
10164600	10177720	Появился контракт, адрес его контракта, у которого тоже есть баланс эфира, то есть, может быть, нулевой, как бы, но, грубо говоря, контракт тоже может иметь, как бы, эфир на своем балансе.
10177720	10193720	У него тоже есть nonce, потому что контракт может создавать другие контракты, и это будет увеличивать nonce, но еще у него есть, соответственно, здесь поле, которое называется код, и вот здесь как раз находится, вот…
10194600	10217940	В бинарном виде, как бы, все, вот, по сути, байт-код вот этого контракта вместе с его функциями. Сам контракт очень похож на C++-ный объект, на C++-ные классы, там используются объектно-ориентированные программирования, там, наследование, как бы, там, на самом деле, к плюсам довольно-таки близко, даже не к плюсам, к C, наверное, как бы, даже ближе.
10218220	10223200	И еще у этого контракта, что, как бы, важно, у него тоже есть свой собственный storage.
10224600	10227380	Хранилище, как бы, в которое он входит, как бы, и может записывать.
10228340	10243140	И все это, конечно, тоже попадает вот в тот самый, как бы, в state root, то есть это тоже считается данными блокчейна, которые тоже обновляются, исполняются, все делается в консенсусе, то есть целиком.
10243140	10252400	То есть, несмотря на то, что здесь какой-то код, какое-то там хранилище, вроде уже, как бы, вещи такие, которые на разных серверах, как бы, разные, здесь это не так.
10252560	10254580	То есть здесь это прям такая единая, очень структура.
10254600	10259600	Прогая такая, монолитная, как бы, штука, вот, которая обновляется в консенсусе.
10261180	10262820	А код контракта можно менять, да?
10263560	10265280	Нет, код контракта менять нельзя.
10266080	10278960	Вот, код контракта менять нельзя, как бы, есть, конечно, паттерны, и мы будем их использовать, как бы, которые позволяют, как бы, менять там, ну, делать другую версию контракта, там, деплоить, соответственно, переключаться на нее.
10279120	10283960	И, как бы, технически получается, что мы меняем, как бы, сам код контракта для использования.
10284600	10290700	страны но так то нет как бы однажды задеплоенный контракт как бы все он как бы гвоздями прибит
10290700	10297860	именно собственно почему как бы такой бунт и как бы айсиота бы вот этого краудфандинга как
10297860	10303840	бы на эфире там все все видят и все видят что у тебя там в краудфандинге нету функции забрать
10303840	10311440	все деньги как бы избежать вот ну то есть потому что ее нету как бы контракт публичный тоже также
10311440	10318340	поэтому как бы дефай называют себя там этом не бант короче мы протокол протокол потому что это
10318340	10323180	просто тут мы код разместили как вы можете убедиться здесь нет нигде функции которые
10323180	10328820	вот мне как бы заберет ваши деньги то есть есть функция которая там под один процент как
10328820	10335580	падет как бы по другой процентов дает как бы и это протокол то так как бы работает а как бы
10335580	10340680	там нет у нее но я туда ничего не могу добавить ничего не могу изменить пусть он
10341440	10350440	здесь еще как бы наверное хорошие базу орды базу орды для блокчейна это паблик ли верифия был
10350440	10358040	то есть она как бы до проверяем и публично то есть вы как бы публично можете проверить этот
10358040	10365340	код у собственно один из профилей как бы компании ну собственно наши как раз аудиты то что мы до
10365340	10370880	убеждаемся что этот код реально делает то что то что описано в документации
10371440	10377260	но помимо как бы до поиска там багов как бы именно безопасности но по-хорошему да как бы
10377260	10383740	убеждаемся что да вот здесь нет там функции закладок там например там каких-нибудь которые
10383740	10393640	позволяют вытащить там все только так далее вот так но на самом деле уже даже не хочется
10393640	10400420	забегать вперед вот потому что там следующий тоже будет мы прям посмотрим с вами контракты тоже так
10401440	10407860	вверх не уровню потыкаемся в разные проекты и про газ соответственно и про сложность про все это
10407860	10414880	обязательно как бы поговорим и ну соответственно и после этого начнем уже потихонечку сами как бы
10414880	10423340	на солидите писать там не знаю выбирать курсовой проект вот делать как бы задания ну а дальше уже
10423340	10431260	когда уже хорошо прям погрузимся солидите во все там паттерны как бы по всю эту историю как бы мы
10431440	10438880	еще копнем как бы с вами в криптографию и в пилинговые сети консенсус и так далее то есть это то что
10438880	10447280	можно изучать на самом деле по ходу вполне ну вот так давайте еще вопросы и наверное на сегодня все
10447280	10456640	еще сегодня наверное сегодня может отформатируем я сегодня опубликую все домашки вот скину ссылку
10456640	10461380	как бы на все домашки как бы чтобы вы могли выбрать что вы хотите как бы делать из этого там
10461440	10469840	вторым третьим что понравится вот что могли получить свой семестр распланировать как и было
10469840	10477400	написано в программе треть ну то есть там 30 баллов из 100 это курсовой проект вот если хотите как бы
10477400	10484300	можете там не знаю опять же там на хакатон если х и если у вас есть как бы там два компонента
10484300	10490580	курсового проекта вы хотите там не знаю там и фронт написать может быть там б короче и контракты
10491440	10496960	то можете объединиться там в команды например там по два человека вот будет отличить соответственно
10496960	10505660	там вдвоем сдачи курсового проекта она похожа как бы на не знаю нам презентацию для инвестора какому
10505660	10513100	технологического пытаетесь продать как бы мне как бы ну соответственно свой проект при этом
10513100	10520180	я еще буду смотреть соответственно как там это все закожено вот и ребят на что же как бы аудитора
10521440	10530320	вот так все по домашним сказал очень сегодня ссылку скину изменение там будут скорее всего
10530320	10538220	только косметические за домашних 70 баллов соответственно сумма вот у меня есть вопрос
10538220	10544080	по by zantin фолк талеранс как мы можем узнать что двум третьим можно доверять это какие-то
10544080	10550740	доверенные надо должны мне это нет это это чисто такое как бы формальное предположение то есть мы
10551440	10561640	это это сеть не будет никогда как бы остановлена и в ней не появится короче небезопасных блоков при
10561640	10568300	условии при строгом условии что больше 2 2 3 следует протоколу мы сказать не можем как бы
10568300	10575620	да там сколько там сейчас то есть это просто по сути ну ну как это такое как бы как ты пишешь
10575620	10581420	что там статье как бы что не знаю это машина будет ехать как бы при условиях
10581440	10588400	если не знаю там градус наклона не больше там 60 градусов а вот азиат но здесь есть прям вот
10588400	10594700	конкретное число типа если вот это число как бы выполняется то такие свойства они как бы со
10594700	10602180	стопроцентной вероятностью протокола исполняются то есть если больше двух трети честных современных
10602180	10610780	пруфов стейках никто не сможет но если под прям если прямо не знаю там шестьдесят семь из девяносто
10611440	10623980	матчей как OS на этот день но только любые такие обзоры да это же порядок существенно
10625460	10633440	то есть dessas vitamin будет к stake świat школа
10633440	10635940	along hd
10635940	10638560	общаться с
10638560	10639120	игровым
10639120	10641280	к
10641280	10641440	R对
10641440	10649480	и такие захваты кстати и были вот уже тоже поговорим интересные истории ну то есть в
10649480	10656280	теории ничего не мешает поднять много зловредных нот ничего не мешает как бы но деньги в пруфов
10656280	10661440	стейки и вы пожалуйста да как бы если у вас есть там много миллиардов долларов кэш можно
10661440	10669180	как бы захватить и так вот что ты делаешь там не вас был там захвачен там например там тут
10669180	10675300	вообще на самом деле происходит куча таких 8 штук получили за что мы как были у которых
10675300	10684180	все аналоги в общем-то нету в таком как бы в централизованном мире и разработка чуть-чуть
10684180	10689240	другая как бы истории там совсем другие и безопасность другая как бы вот она все
10689240	10697020	базируется на тех же принципах там техника практически там тоже как бы но много всего
10697020	10698560	еще мега интересного
10699180	10705860	да там были захваты сетей там тоже были если у нас небольшая сеть как мы можем обеспечить
10705860	10706820	бизонтина фолкторио
10706820	10718940	никак как-то заставить как бы больше двух третий как бы быть честными ну то есть никак если они
10718940	10724220	сговорятся как бы если у вас там три валидатора как бы там или там 5 короче там четверо из них
10724220	10729020	сговорятся как бы сорян ну то есть они могут
10729180	10739800	что хотят делать хорошего смешно было в заметках типа что лучший блокчейн это блокчейн и в которых
10739800	10746760	валидаторы ненавидят друг друга искренне вот как бы там не знаю там прямо где упали прям
10746760	10755340	идеальный блокчейн это не знаю cb китае цб россии цб сша и еще там куча всяких разных
10755340	10758820	они как бы
10759180	10765500	не смогут без задобрения как бы других ничего делать с протоколом при этом он сам при бы нужен
10765500	10772560	для работы для проведения там не знаки международных платежей как бы я не другу не доверяют они себя
10772560	10779400	перепроверяют как бы там все блоки все транзакции как бы следят за ними как бы то есть чем меньше
10779400	10789180	и другую верить и лучше прекрасно как мне кажется очень интересно но вообще вы поэтому в этом
10789180	10795680	курсе узнаете что не эфир не bitcoin на самом-то деле как мне особо не особо-то они децентрализованы
10795680	10804100	сказать как бы и пруфов стейки тоже как бы там здесь там киты с большим количеством денег там
10804100	10811460	как бы майнинговые пулы которые тоже огромные мощи как бы обладают и что bitcoin манится там
10811460	10818400	десятка майнинговых полов всего десяткам никаких там миллионов майнеров нету как бы никто пока не
10819180	10830100	такого вот так что так так ладно все 15 1 все заканчиваем тогда так
