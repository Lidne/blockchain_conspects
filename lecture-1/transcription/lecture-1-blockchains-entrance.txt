всем привет начинаем лекцию сегодня можно нашу самую первую лекцию немножко как бы почему эта
лекция такая в общем то это было обсуждение со студентами то есть прошлый раз мы проходили по
программе проходили там сначала криптографию пиринговой сети там не знаю консенсус и так
далее и так далее и только потом соответственно уже на всем на всей этой базе как бы врывались
там смарт-контракты вот но и оказывалось так что в конце семестра ну то есть самый такой как бы
важный код как бы студенты щупали в конце семестра только уже уже когда уже там сессии на носу вот и
поэтому было решено сначала сделать пару лекций вы такие как бы входные мы прям верхний уровень
его пробежимся как бы что это такое уже посмотрим
на код смарт-контрактов как бы научимся их там запускать а потом уже в течение всего курса
будем все глубже и глубже погружаться вот то есть там не знаю верхний уровень обсудим верхний уровень
обсудим там например там не знаю криптографию потом на лекции и более глубоко рассмотрим вот
ну и то же самое касается там не знаю консенсусов различных там в общем
ну что всего поехали еще это за я немножко рассказал на входной лекции как выглядит
разработка здесь а теперь собственно что собой представляют именно публичные блокчейна вот на
каких собственно основных примитивах они строятся значит такое самое простое объяснение это такое
если вы хотите как бы человеку кому-то объяснить как бы может сказать типа ты торрентами пользуешься
может поrie там понимать какой будет бог чей у нас есть какой-то там пользователь не знаю там вася
который отправляет транзакцию гуда там в неизвестно кому как бы то есть отправляет первым попавшимися
компьютеру который следует протоколу чейна который будет делать как бы то что и этот
компьютер рассказывает с остальным компьютером про транзакцию пользователя а потом не знаю
там может там это деньги в этой транзакции лежат может быть и нет
И вдобавок еще получает информацию о соседях других компьютеров,
то есть они меняются постоянно, информация о конфигурации сети,
кто-то включается, кто-то выключается, часть этой сети можно отрубить,
но она продолжит все равно распространять информацию,
потому что по дефолту, то есть все вот эти, мы их будем называть блокчейн-ноды,
они по дефолту обмениваются друг с другом всей информацией,
которая соответствует формату, то есть пришла, не знаю, транзакция,
она это распространяет.
Здесь ничего сложного особо нет, здесь обычный JSON, RPC,
если кто занимался веб-программированием, интерфейс,
просто в JSON делает какой-то метод send transaction,
отправляется как бы там в пейтабайтики,
и дальше нода начинает про эту транзакцию рассказывать всем остальным
и получать из сети блоки.
Вот.
Значит, в чем фишка вот этого, ну вот всех вот этих вот блокчейн-технологий
от существующих решений?
То есть здесь никакого лучшего места здесь нету,
это блокчейн, это просто по сути как бы такой отдельный вид софта,
немножко как бы, который обладает одним очень-очень важным свойством.
Смотрите, если у нас есть какое-нибудь там банковское приложение,
там какое-нибудь, не знаю, ну, проще всего вообще показывать на финансах,
и это, кстати, один из примеров.
Почему как бы крипта – это именно типа крипта, именно деньги?
Да просто потому, что как бы деньги – это всего лишь на всю информацию.
Вот.
Вам не...
О, господи, я не транслирую экран.
Все, понял.
Так, надо было меня оттянуть.
Так, давайте вот так вот.
Все, вот теперь я транслирую экран.
Так, да.
Я, собственно, да, рисую здесь.
Такую штуку.
У нас Вася, да, отправляет транзакцию в какую-то сеть,
и вот здесь вот как бы ноды меняются друг с другом информацией.
Значит, если мы работаем с каким-нибудь банк-клиентом,
не знаю, там, со Сбером, как бы Тиньковым,
мы говорим, там, отправь там 100 долларов,
там, к тому-то, к тому-то, как бы,
и в банке есть табличка,
где написано, что у Васи было там 200 долларов,
как бы, и стало у него как бы 100 долларов,
а у Пети как бы стало плюс 100 долларов,
как на балансе.
То есть, по сути,
финансовые приложения, они оперируют только информацией,
поэтому они такие довольно простые.
Ну, то есть, с точки зрения надежности,
как бы, там, и требования к ним.
Вот.
И, предположим, этот банк расположен на нескольких континентах,
и, как бы, вот это вот расстояние между компьютерами,
между этими базами, оно достаточно существенное.
А вам нужно поддерживать консистентную базу.
У вас и здесь у Васи,
должно стать 100 долларов,
а у Пети, как бы, там, соответственно,
добавится 100 долларов на баланс.
И здесь вам надо как-то распространить эту информацию.
Здесь достаточно целостно.
И здесь есть прям, как бы, ключевая проблема безопасности.
Она в блокчейнах называется double spend,
ну, двойная трата.
Но относится она, конечно же,
ну, не только к блокчейну,
а вообще к распределенным системам.
То есть, если Вася вот здесь, вот, как бы,
потратит свои 100 долларов,
и одновременно вот здесь,
вот, потратит свои 100 долларов,
а у него на балансе всего, как бы, 100 долларов,
то, соответственно, возникнет конфликт.
Надо будет что-то делать там.
Соответственно, надо будет выяснить,
какая здесь транзакция была первая.
Здесь они могли, как бы, пока они там встретятся,
эти два сервера,
может, там, не знаю, интернет пропал в этот момент.
То есть проблем довольно много, как бы, существует.
И для этого в базах данных существуют механизмы,
которые называются репликация.
То есть реплики,
а вот эти вот, как бы, компьютеры,
которые принимают транзакции от пользователя,
причем, как бы, именно пишущие транзакции.
Пишущие – это инсерты, апдейты, делиты.
Кстати, базы данных, наверное, как бы, у многих, да, были, как бы, там,
более-менее, как бы, может быть, там, знаете, как бы, там, SQL.
В общем, все транзакции, которые записывают информацию в базу данных,
как бы, пишущие, там, вставка, апдейт и удаление,
информации, как бы, в базе данных,
они попадают в так называемые мастер-реплики.
То есть мастер – тот, кто пишет базу данных.
Потому что у сервисов может быть, там, не знаю, там, тысячи слейв-реплик,
то есть которые только отдают информацию только на чтение,
то есть они не записывают.
И вот эти вот алгоритмы называются алгоритмы репликации.
И в распределенных базах данных, как бы, в таких больших, там,
соответственно, они есть, если вам интересно про эти алгоритмы почитать,
это алгоритм известный Raft.
И второй, как бы, Paxos.
То есть он, ну, говорит о том, что, там, Noda, там, пошла сюда,
предложила, там, закоммитить какой-то блок транзакций,
это ей говорит «да, я согласна», значит, это все, там, за это голосуются,
собираются, там, голоса с других, как бы, реплик.
И там, если какой-то порог перевален, то, соответственно,
транзакция считается закоммитченной.
И есть, там, формальные доказательства, что, как бы, это надежно.
Вот. Но у всех этих алгоритмов,
которые используются в банках, они устойчивы только к падениям вот этих вот нод.
То есть к тому, что, там, где-то вырубится интернет или какой-то мусор будет отдан
в данном случае, они не защищены от, так называемого, византийского поведения.
Византин, там, ключевое слово «византин», Fault Tolerance.
То есть устойчивость к византийскому поведению.
У них этот парадигма называется Crush Fault Tolerance.
То есть, если что, они не могут, они не могут, они не могут, они не могут, они не могут, они не могут, они не могут.
Если что-то упадет и сломается, как бы, то, как бы, систему сдюжат, как бы, да.
Там, если осталось достаточное количество серверов, то потом DevOps включит новую реплику,
и она автоматически других догонится, как бы, и заполнится валидными данными.
Но если в этой сети появляется византийский участник,
а византийский имеется в виду такой, как бы, предатель, то есть, который намеренно действует зло,
то есть он не просто, как бы, выключает компьютер, хотя может, конечно, и просто выключить,
а он начинает дезинформировать другие ноды.
То есть он, у него захвачен вот этот компьютер, как бы, и он говорит, там,
Вася потратил здесь 30 долларов, этому, говорит, потратил 50 долларов.
То есть он вносит, как бы, хаос в работу, и система перестает работать.
Вот эта вот консистентность вот этих баз данных, как бы, она нарушается.
То есть они могут, ну, прийти, как бы, в состояние, что там на разных репликах разные данные.
Это можно эксплуатить.
Вот блокчейны, они являются, ну, то есть, как бы, истинным, там,
настоящим, они являются Byzantine Fault Tolerance.
То есть они устойчивы к тому, что в них находятся, прям, намеренно злые участники,
которые прям хотят, как бы, атаковать сеть, которые хотят, как бы, всех, там, завалить, как бы,
я не знаю, там, найти какой-то баг и заставить всю сеть остановиться.
Вот, поэтому, как бы, в блокчейнах требования к безопасности вот этих протоколов, они сильно выше.
Вот, ну, и эту безопасность обеспечивают они за счет экономики.
Там есть часть, как бы, именно, которая, по сути, как бы, является экономической безопасностью, вот.
То есть, там, будешь действовать, как бы, плохо, будешь, там, что-то не то делать,
будешь либо терять ресурсы вычислительные, как бы, если, там, нечестный майнер,
либо тебя будут наказывать, там, деньгами и так далее.
Обо всем этом мы очень подробно с вами поговорим.
То есть вот это вот самое, наверное, важное, как бы, свойство блокчейнов.
BFT, то есть, как бы, Byzantine Fault Tolerance, устойчивость к византийскому поведению.
При этом надо не забывать, что...
Требования, вот, к этому византийскому поведению, они, у них есть специальные численные параметры,
то есть соглашения, то есть, например, если взять современные алгоритмы консенсуса,
которые, там, типа, не майнинг, а такие детерминированные, то есть,
то там есть прям жесткое требование, что больше двух третей участников, вот этих, вот, как бы, нод,
которые протокол, которые производят блоки, которые обрабатывают транзакции,
они являются честными, то есть, честными имеется в виду, просто следуют протоколу,
то есть, скачали код с гитхаба и, как бы, в ключевых местах ничего не меняли, как бы, запустили ноду,
вот она работает, вот, в точности, как бы, так, как предписано протоколом.
Вот в случае, если вот это требование выполняется, то есть, если больше двух третей, как бы, являются честными,
то есть, по сути, формальное доказательство того, что сам блокчейн является византийско устойчивым.
Вот это вот оставшиеся меньше одной трети, как бы, участников, они могут быть сколь угодно, как бы, злыми,
там, любые действия предпринимать, как бы, пытаться, там, не знаю, там, что угодно сетью сделать, как бы, у них ничего не получится.
А вот если кто-то захватил больше двух третей, как бы, тогда, да, он, там, контролирует эту сеть.
Вот, если, как бы, злоумышленники захватили одну треть, прям ровно, если у вас, там, 99 нод, как бы, у злоумышленников есть 33,
то они в современных системах, они могут...
остановить блокчейн, то есть, они не могут, как бы, подсунуть, там, неверные данные, не могут, там, изменить, соответственно, там, код,
но они могут, по сути, просто остановить процессинг, вот, ну, просто вырубив свою одну треть, как бы, выключив ее,
и сеть, как бы, дальше не пойдет.
Вот, в общем, про все это поговорим, то есть, нам сегодня с вами, как бы, не важно, как они вот здесь вот договорились,
то есть, у них есть вот эти протоколы консенсуса, мы их будем рассматривать, там, proof of work, proof of stake, там,
и так далее, но нам для... с вами, как бы, важнее гораздо сегодня, как бы, процесс распространения транзакции в блокчейне,
то есть, и вообще для чего, ну, и как все внутри происходит.
Значит, сами блокчейны, их основная задача, вот у нас есть, там, не знаю, там, куча компьютеров, которые согласились следовать протоколу,
вы скачали с гитхаба, там, не знаю, ноду блокчейн, запустили ее, и вы, типа, согласились, типа,
сети, там, себя, там, честно вести, как бы, будут там, будут там что-то делать, значит, соответственно,
ради чего они все это делают.
На самом деле, во всех, все, биткоин, эфир, там, не знаю, там, полк и дот,
для нас с вами, как пользователей, мы заходим с вас, там, не знаю, там, на сайт на какой-нибудь крипту,
там, спрашиваем, там, какие там балансы, что там, какие там, не знаю, проценты, какие есть проекты,
регистрируем что-то в смарт-контрактах.
Мы общаемся с какой-то из вот этих нод, и откуда она берет информацию?
У нее есть на борту своя собственная база данных, вот, мы ее будем называть state database,
вот, state db, как бы, или даже просто там state, как бы, можно сказать, как бы, состояние блокчейна.
И вот эта вот база в блокчейнах, она ровно одна и та же с точностью до последнего бита,
то есть там нету, ну, если это рассматривать как табличку,
там, не знаю, там, у Васи, там, не знаю, 100 долларов, там, у Пети, там, 200 долларов,
ну, там, понятно, что там куча, может, разной инфы, как бы, хранится,
но вот эта вот база, она одна и только одна на всех абсолютных компьютерах сети,
которые следуют протоколу, вот, которые, как бы, честные, вот эти вот,
то есть если они все правильно сделали, как бы, с самого начала до самого конца,
у них будет ровно одна и та же версия вот этой базы, причем без лишних ключей,
то есть ничего.
Не часть базы будет верна, там, там, не, там, не с точностью, там, до каких-то копеек,
а вот просто чисто прямо в бинарном виде, то есть вот само битовое, как бы, представление,
если взять там все ключи значения, как бы, разложить их в один файл,
то он будет один и тот же.
И все это, вся вот эта вот база, как бы, она одна и та же при условии наличия на ноде,
вот на этой, одного и того же набора блоков.
И теперь уже переходим, как бы, к тому, как бы, что такое блоки.
Значит, пользователи отправляют свои транзакции сюда, там, не знаю, в какую-то ноду,
они там, как-то там, здесь распространяются по сети, и транзакция, ну, там, не знаю, там, Вася,
с адреса Васи на адрес Пети, как бы, переводит 10 эфира, подписывает это все электронной подписью,
сейчас про нее, как бы, тоже поговорим.
Отправляет куда-то в сеть.
Значит, что происходит в сети?
Эта транзакция распространяется по куче других компьютеров, пока не добирается до компьютера,
который будет производить следующий блок.
К этому моменту на всех этих машинах уже, как бы, какое-то количество блоков есть, там, не знаю, там, есть, там,
все, там, до какого-то этапа, как бы, дошли.
Блоки точно так же по вот этой пиринговой сети распространяются,
то есть, как только какая-то нода видит блок,
она его проверяет, говорит, что он валит, ну, и если он хороший, как бы, то она его передает всем остальным.
Она говорит, я увидела, как бы, новый блок, вот этот, ну, вот здесь вот по два,
там, не знаю, там, 47, 48 блок номера, а вот у этой появился 49.
Она говорит, о, ребята, у меня есть 49, как бы, вот, забирайте, как бы, он хороший, я его проверил.
Вот. Соответственно, если блок, как бы, корявый, то нода, конечно, его просто не пересылает, как бы, поэтому, по сути, как бы, ну, то есть, если кто-то произвел,
какой-то, там, поддельный, как бы, блок, ну, такой, или блок с ошибкой, или блок, который, там, не следует протоколу, короче.
В общем, хотя бы, там, на шаг отступил, как бы, от процедуры, вот, этой проверки блока, то, как бы, его софт, как бы, он даже передавать не будет дальше этот блок, то есть, он так и будет, как бы, там, сидеть.
Ну, он, конечно, может насильно его передать другим нодам, но, как бы, он его запихал в другую ноду, она тоже его проверила, она честно, она говорит, а я дальше не буду распространять, вот.
Соответственно, в блоках находятся пачки транзакций от пользователей, тоже это все, прям, отдельная, большая, как бы, песня, как они процессятся, значит, что там происходит.
И вот эти транзакции, когда нода получает хороший валидный блок, они накатываются на вот эту state database последовательно, причем на каждой из вот этих вот машин.
То есть, любой компьютер в сети, как бы, он скачал блок, берет оттуда транзакции, конечно, проверяет их.
И накатывает на эту базу данных.
Вот здесь где-нибудь наша вот эта транзакция, Вася, который переводит Петя, 10 эфира, и у Васи, соответственно, списывается 10 эфира, а Пете добавляется 10 эфира.
То есть, это одна транзакция, потом вторая, потом третья, где-то здесь, там, добавляются еще, там, какие-то, там, операции, там, в балансе с данными и так далее.
То есть, все это вот так вот, как бы, накатывается на базу данных.
Далее, как бы, в блокчейнах есть процедура отката блока, и это не...
Ну, не что-то такое прям страшное, как бы, это совершенно штатная процедура.
Потому что все компьютеры в этой сети видят друг друга в разное время.
И вот у нас один произвел блок, номер там, ну, давайте, 50-й блок он произвел.
Давайте я, собственно, как в обычных там лекциях, да, как бы, я, в общем, говорю, что пиринговую сеть с транзакцией можно рассматривать просто как доску объявлений.
Публичную совершенно.
То есть, везде, как бы, все видят абсолютно, как бы, все транзакции.
Вот. Ну, через какое-то время, понятно, разные в разное время, как бы, видят разных версий, но, тем не менее, как бы, все.
Транзакция, как бы, она улетела в P2P, она там полностью доступна, как бы, кто угодно ее может скачать.
И точно такой же у нас блок с пул.
То есть, такой же, как бы, пиринговый, по сути, как бы, пул, в котором те, кто хотят произвести блок, они его публикуют.
Вот мы дошли там до блока...
Блок номер 49.
Вот наша, как бы, транзакция, вот эта Васина, как бы, она, вроде бы, должна попасть в блок номер 49.
У нас есть, появился майнер, который пошел в транзакцион-пул, набрал себе в нем, там, сколько-то транзакций, не знаю, там, тысячу, две, как бы, как протоколом определено.
Наберет себе 10 тысяч транзакций, как бы, все остальные, как бы, его блок выкинут.
Скажет, типа, чувак, по правилам, по спецификации, по коду, как бы, в блоке должно быть не больше, там, двух тысяч транзакций.
Как бы, так что, твой блок невалидный, как бы, сам дурак.
Вот, поэтому он берет, там, не знаю, там, две тысячи транзакций и создает блок номер 50.
Там все эти транзакции перечислены, там, и так далее.
Собственно, само слово, как бы, блокчейн, как бы, цепочка блоков, она построена на том, что хэш предыдущего блока включается в хэш следующего блока.
То есть, например, в 50-м блоке.
Вот здесь, вот, как бы, там, давайте его покрупнее нарисуем.
Вот.
Здесь находится хэш 49-го блока.
А у 49-го, как бы, 48-го, 47-го.
Из природы хэширования, сейчас тоже про нее даже чуть-чуть поговорим.
Понятно, что, испортив хотя бы один бит вот в этом вот блоке, мы испортим очень сильный его хэш.
Соответственно, испортили бит и в этом блоке, испортили бит и в этом блоке.
И так вот, как бы, по цепочке вся эта штука прошла.
А валидировать блокчейн мы можем, начиная с самого первого блока, с нулевого.
У него есть название, специальное, Genesis называется.
Genesis.
Вот, нулевой блок.
И, начиная с него, можно перепроиграть весь блокчейн, вот, прямо все транзакции, начиная, как бы, с первого блока и вот до текущего.
Когда вы ставите, как бы, ноду эфира или ноду биткоина, она, ну, понятно, там.
Есть куча всяких технических ухищрений, как ускорить этот процесс, но, как бы, в теории, самый, как бы, такой, самый секьюрный и надежный из этих процессов, это прямо берем первый блок, накатываем все транзакции из него, берем первый блок, накатываем все транзакции, второй, третий, миллионный, миллиардный блок и, наконец, доходим до того, который, вот, прямо вот сейчас, как бы, создается.
И у нас консистентная StateDB, точно такая же, как у остальных, как бы, все остальные, как бы, видят в этой StateDB ровно то же самое, что и вы.
Вот, ну и проверяется, да, вот это наследование блоков проверяется за счет включения хэша предыдущего блока.
Вот, значит, вот у нас, как бы, вот этот вот, я его назвал M-Miner, но уже можете отучаться, как бы, от этого слова, вот, уже это так не так уж особо, как бы, популярный эфир, буквально несколько дней было огромное событие в эфире, прям очень серьезное, как бы, это он перешел на Proof of Stake, поэтому никого майнинга не было.
И теперь, как бы, в эфире на видеокартах, ну, радостная новость, как бы, да, видеокарты теперь сильно подешевеют, вот, потому что майнить эфир уже будет не нужно.
Называются вот эти вот ноды, которые производят блоки, там, не знаю, валидаторы, Validators, там, в эфире во многих сетях, как бы, называются валидаторы, как бы, ну, и еще самое, наверное, точное название было Block Producers, то есть, в одной из сетей, как бы, это было.
И, по мне, самое точное название, то есть, это ноды, которые хотят произвести блок в блокчейнах, так как это большая публичная пилинговая система, вы можете, кто угодно может произвести блок, там, ну, при наличии, там, у него определенных ресурсов, если это майнинг, у него должна быть, там, огромная вышлитная мощность, если это Proof of Stake, у него должны быть, там, замороженные, там, деньги на балансе, там, и так далее, и так далее.
Вот.
Производит вот этот наш майнер 50-й блок.
В этот момент второй майнер, глядя тоже на блокчейн вот в этом состоянии, то есть, он тоже докачал пока до 49-го, он тоже производит 50-й блок, он берет другие, как бы, транзакции, ему они, не знаю, больше понравились, и более того, он видит, как бы, этот транзакцион-пул со своего ракурса, то есть, он там, не знаю, в Китае, как бы, а первый майнер в Америке, они видят разные наборы транзакций.
Он создал, короче говоря, свой собственный 50-й блок.
И в блокчейне, ну, то есть, те, кто следует протоколу, еще раз повторяю, как бы, ноды, они качают этот блок тоже, номер 50-й.
И в этот момент как раз начинает работать алгоритм консенсуса, который выбирает из этой цепочки одну и только одну истину.
То есть, ну, в разных алгоритмах сделано по-разному, вот, но все вот эти блоки, они все сохраняются.
То есть, ну, приходится за безопасность, как бы, да, так платить, как бы, блокчейн.
И даже вот эти вот ошметки боковые сохраняют, тем не менее.
Значит, почему?
Представьте ситуацию, значит, сначала 50-й наш, как бы, ну, сначала первый майнер, как бы, создал блок номер 50.
Сеть его приняла.
Вот, в этом 50-м блоке была Васина транзакция.
Вот она, как бы, Вася доволен, значит, он отправил там кому-то там 10 эфира или недоволен.
Вот.
А потом пришел второй майнер, и он Васину транзакцию не...
Не видел.
Он создал 50-й блок без этой транзакции.
Но алгоритм консенсуса выбрал его блок как правильный.
То есть, в этот момент происходит откат.
То есть, если кто в базах данных, то там это называется rollback, откат транзакции.
Там, не знаю, в смарт-контракте называется revert.
Значит, все эффекты вот этого блока полностью удаляются.
То есть, база данных откатывается к предыдущему состоянию, которое было.
На 49-й блок.
И накатывается, как бы, то, что было в 50-м.
То есть, теперь в этом state db состояние новое.
Понятно, что не все успели, не все увидели, как бы, вот этот вот 50-й блок.
Вот.
Но все равно при одном и том же наборе блоков, когда все скачают вот это вот все,
у них все равно, как бы, будет вот этот вот state db в одном и только одном состоянии.
Возможна ситуация, когда, значит, первый наш майнер не сдается,
создает блок номер 51, указывая в качестве родителя, родительского блока, блок 50.
Вот этот, кстати, блок называется uncle.
Uncle blocks, как бы, они называются, как бы, то есть, дяди.
Там, типа, братья-папы.
Вот.
Или там, мама.
Соответственно, он продолжает, короче, майнить и, как бы, создает 51-й блок на основе 50-го блока.
И консенсус может спокойно выбрать.
Что вот теперь, когда появился 50-й блок, мне уже вот эта цепочка не нравится,
а нравится вот эта цепочка.
И тогда тоже вот здесь происходит откат, как бы, и накатываются транзакции вот из этой подцепочки.
Вот.
То есть, такая ситуация здесь тоже возможна.
То есть, блокчейн на конце, он такой, как бы, разлохмаченный.
Вот.
И производители блоков, они соревнуются между собой, чей блок будет принят.
Вот.
Понятно, что там...
В каком-то прошлом, может, не очень, как бы, далеком, уже, как бы, смысла, там, пытаться намайнить такую, как бы, здоровую цепочку.
А это, может, и технически вычислительно невозможно, как бы, или там нереально, там, по другим причинам.
Это мы с вами в консенсусах посмотрим.
Вот.
Но важно понимать, во-первых, что блокчейн, что блоки – это вот такая вот структура.
Она правильно называется DAG – Direct Acyclic Graph, то есть направленный ациклический граф.
У которого все связи направлены в одну сторону, поэтому он направленный, и нету кольцевых связей, то есть нету замкнутых конкурсов, поэтому он ациклический.
Вот.
Такой, как, не знаю, как канат, разлохмаченный, как бы, на конце.
Ну, вот здесь есть, да, какие-то старые ответвления, как бы, там, может, там, где-то здесь, там, не знаю, какие-то старые, как бы, цепочки.
Вот.
Ну, вот такого вида, как бы, блокчейн собой представляет.
То есть любой момент имеет...
Как бы, какой-то набор блоков, вы всегда можете по нему пройти, и пройти по одной и только одной цепочке.
Причем, опять же, что важно, никакие внешние данные здесь не работают.
То есть никаких внешних сервисов, никто ничего не опрашивает.
То есть все решения принимаются строго на тех данных, которые есть в блоках.
То есть алгоритм по-другому не работает.
То есть блокчейн опирается строго на то, что есть только в блокчейне.
Все.
И это с внешним миром никак не связано.
Данные из внешнего мира, там, специальным искусственным способом, там, добавляются в блоки,
но решения о консенсусе, о том, какой блок следующий, какие транзакции валидные, какие нет,
как бы, принимаются только на основании протокола блокчейна и данных, которые есть в блоках.
Вот.
Соответственно, транзакции с этих блоков, как я сказал, как бы, накатываются на этот, как бы, state db,
и в конце концов появляется...
Кто-то, уж не важно, кто там, 50-ый блок, там, или вот этот 51-ый победил,
в конце концов, 51-ый блок доезжает, таки, как бы, уже возвращается обратно из пилинговой сети в тот компьютер,
к которому обращался Вася, когда отправлял твою транзакцию.
Этот компьютер получает блок номер 51, вот, ну, предположим, вот здесь, в 51-ом блоке его транзакция была.
Ну или там, мы в 50-ом договорились, как бы, вот здесь, что была транзакция.
Ну, соответственно, победила вот эта вот цепочка, вот.
И Вася, соответственно, обращается сюда и видит, так, все, 51-ый блок был накачан на state db,
и он просто спрашивает баланс, как бы, у этой базы данных, как бы, и она ему говорит, Вася, у тебя теперь 90,
а у Пети теперь, там, не знаю, 110, там, эфира, например.
Вот.
Это вот такая, как бы, общая схема процессинга транзакций в блокчейнах.
Она стоит на трех таких китах криптографических, там, ну, вот, если, там, пример, короче говоря, там, транзакции,
ну, это мы с вами еще, как бы, посмотрим, как бы, тут, наверное, интересно, как бы, там, индекс транзакции,
то есть, кому она отправлена, вот, то, что есть хэш-блока, которому она принадлежит, как бы, от кого она отправлена, там, и так далее.
Номер блока тоже.
То, что я вам пишу 4950, у этого есть название в блокчейне «высота», то есть, это, как бы, высота блока, хэй.
И, может быть, много блоков, как бы, с одной и той же высотой.
Вот.
Значит, поехали дальше.
Значит, как вот эта вот вся история организована?
То есть, на чем вообще вся безопасность этой штуки зиждется?
Первый слон, на котором это все стоит, это хэширование.
У нас будет лекция по симметричной криптографии, мы обязательно глубоко посмотрим, как строятся, как бы, эти правильные протоколы,
но, как бы, что такое криптографический хэш, вы должны, прям, знать, прям, ну, на зубок.
То есть, изначально эта история пришла из симметричных криптосистем, где у нас было какое-то открытое сообщение, значит, Алиса Боб,
они знают какое-то секретное слово или, там, паролька.
Которое мы будем называть ключом.
Алиса зашифровывает свое сообщение секретное, точнее, зашифровывает вот это M, открытый месседж, секретным ключом.
Получает шифротекст, вот этот вот C, отправляет его Бобу.
Боб, соответственно, делает декрипшн.
И тем же самым секретным ключом расшифровывает шифротекст и получает открытые сообщения обратно.
Такая, как бы...
Ну, общая схема.
И вот эти все алгоритмы, они очень широко используются.
Сейчас там любой там трафик, как бы, шифруется, как бы, все эти, все вы, как бы, эти, наверное, как бы, уже многие, как бы, про эти алгоритмы слышали.
Но очень важно, как бы, понимание математических свойств, которые называются рассеивание и перемешивание.
Мы еще раз на них, как бы, остановимся, чтобы у вас не было никогда...
Каких-то иллюзий.
Но смотрите, я смотрю на EtherScan.
Вот здесь вот.
Вижу, короче, какой-нибудь хэш-транзакция.
Вот у меня есть транзакция, а вот ее криптографический хэш.
Вот как думаете, можно найти где-нибудь в эфире или в мире, как бы, хэш, который расположен там в радиусе, там, не знаю, там, ну, в диапазоне, там, хотя бы, там, не знаю, там, 100 миллиардов, как бы, от этого хэша?
Ну, я, как бы, к тому, что криптографические это такие, как бы, штуки, что вы не найдете два даже близко похожих хэша, которые отличаются там на 10, на 100, на миллион, на миллиард, на 100 тысяч миллиардов.
То есть числа слишком большие, и сделано это так, чтобы хэши были уникальными цифровыми идентификаторами любой информации.
То есть взяли букву А, получили от нее хэш, взяли букву Б, взяли от нее хэш, они вообще не похожи, как бы, вот эти хэши криптографические.
Сделано это за счет вот этого рассеивания и перемешивания информации.
Это вот то, над чем работал Тюринг, Шеннон и так далее, собственно, криптографы-математики, которые сделали аппарат математический для шифрования.
В чем суть этих штук?
Смотрите, у нас есть открытые сообщения, какая-то цепочка бит, ну, прям уже симметричные.
Криптографии работают исключительно с битами.
У нас есть какой-то ключ секретный, там, 0, 1, 1, 1, там, 0, 0, 0, неважно.
Затем мы делаем наше какое-то там зашифрование, расшифрование, то есть какой-то хитрый алгоритм придумали и получили шифротекст.
Он тоже там 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, там, 1.
Вот, значит, что такое рассеивание и перемешивание?
Это свойство хорошего шифра, то есть в чем суть вот этого аппарата, который разработал Тюринг и Шеннер?
Вы придумали хитрый способ шифрования, хотите проверить, он хороший или плохой, или вы где-то накосячили, у вас в математике есть какие-то перекосы.
Как понять, хороший шифр или плохой?
И вот как бы хороший шифр обеспечивает вот это вот рассеивание и перемешивание.
Значит, что такое рассеивание?
Рассеивание говорит о том, что если я изменю 1 бит...
Даже 1 бит в исходном тексте и проведу вот эту вот операцию, этот бит повлияет на все биты очень сильно шифротекста.
То есть он должен так типа рассеяться как бы по ним.
Значит, что значит очень сильно повлияет?
Очень сильно повлияет, это означает то, что каждый бит вот этого сообщения поменяет свое значение, инвертируется с вероятностью 1, 2.
То есть это тоже, в принципе...
Очень как бы легко на пальцах понять.
То есть я изменил здесь буквально 1 бит, и где-то примерно 50% битов шифротекста должны измениться, должны измениться в свое значение.
Не знаю, какие как бы.
Понятно, что детерминированные, ведь мне же надо обратно восстановить, да?
То есть алгоритм должен уметь обратно как бы это дело восстанавливать, а не просто там взять рандомные биты, как бы поменять.
Он должен специальным как бы способом сделать так, чтобы изменение одного бита повлияло...
Вот на вот эти вот все, максимально.
Причем именно как бы с вероятностью 1, 2.
Потому что если будут какие-то перекосы, например, там только последние биты изменятся, или только первый бит изменится,
это все позволит как бы проводить такой как бы частотный криптоанализ,
очень там, соответственно, хотя бы примерно угадывать, что там находится как бы за шифротекстом.
Вот.
А этого не должно быть.
Поэтому...
Это рассеивается.
Рассеивание, перемешивание, это тоже свойство, но оно касается ключа.
То есть я не трогаю вообще как бы исходное сообщение, я как бы меняю в нем один бит,
и точно так же это делает это сильнейшее влияние как бы на весь шифротекст.
То есть неважно как бы, если я букву А как бы зашифровал как бы одним ключом,
и получил как бы какой-то шифротекст, и такую же букву А зашифровал ключом,
который на один бит отличается от этого, у меня будут совершенно разные шифротексты.
Вот они прямо-прямо-прямо-прямо совсем никак не сравнимы.
Хотя как бы ключи на один бит всего отличаются.
Ну и то же самое касается как бы и открытых текстов.
Вот это два таких очень мощных свойства, из которых еще можно довольно интересную штуку углядеть.
Если вы будете смотреть на зашифрованные данные современными хорошими криптопротоколами
и начнете в них как бы мерить количество единичек и ноликов,
то вы увидите, что их примерно поровну.
Ну вот из того, что...
Я сказал, да, что типа примерно с вероятностью одна-вторая должны поменять значение,
выглядят эти шифротексты так, как будто кто-то монетку сидит и подбрасывает.
Орел-решка, орел-решка, орел-решка в разных комбинациях,
но никакой статистики отсюда вы вывести не можете.
То есть малейший перепост там куда-нибудь, там не знаю,
если здесь больше ноликов, то вот и здесь как бы больше ноликов.
Это уже дыра в криптопротоколах.
То есть это уже как бы позволяет криптоаналитикам уже что-то там,
какие-то предположения как бы о внутреннем документе шифровальному иметь.
И вот это вот свойство как раз хэширования построено как раз на вот этих вот алгоритмах.
Ну по большей части там очень-очень похожая история.
Значит для того, чтобы достичь вот такой штуки,
в мире битов, знаете, не так много хороших операций обратимых.
Там есть ксор какой-нибудь, есть там циклический сдвиг,
то есть можно там циклически сдвигать там вправо-влево,
можно поделить на куски как бы и снова собрать одну половину,
там не знаю, поксорить как бы, а другую сдвинуть.
То есть на самом деле операций, которые можно сделать бинарных,
их не так уж и много.
Вот, потому что да, когда у вас есть как бы вся вселенная из двух чисел состоит,
вы не так много.
Вы с ними можете делать.
И поэтому как бы все вот эти вот алгоритмы современного шифрования,
они вот берут исходный текст, там что-то его разделяют на куски,
там ксорят с ключом, потом сдвигают там на три позиции влево,
потом опять ксор, потом на пять позиций вправо,
потом там что-то замены и так далее.
Все это как раз с вами как бы обсудим.
Но получается вот такая вот каша как бы из битов.
И если мы, например, возьмем с вами какой-нибудь алгоритм шифрования,
скажем, современный, и начнем им шифровать один,
потом двойку зашифруем, тройку зашифруем, четверку, пятерку и так далее,
с одним и тем же как бы ключом,
то у нас будет получаться вот такая последовательность чисел,
которая называется псевдослучайная.
То есть она снаружи, если вы начнете статистику мерить этих чисел,
она будет как будто выбрасывать случайные числа, как в лотерею как бы играете.
Вот, они будут с равными вероятностями.
То есть абсолютно ровно размазанные по числовой кривой.
Это следует как раз из свойства как бы хорошего криптоалгоритма.
И на основе как бы вот этих вот симметричных шифрований построены генераторы случайных чисел,
которые вы используете в своих программах на всякие ранды и так далее.
То есть они все как бы вот эти механизмы используют.
А хэширование, ну смотрите, хэширование, оно тоже строится на вот этих симметричных,
алгоритмах, оно говорит, но это алгоритм полностью публичный.
То есть он вообще открытый, то есть ключ все знают, например, ключ равен 1, 2, 3, 4, 5.
И алгоритм хэширования может выглядеть так.
Берем файл произвольной длины или файл в строчку бит, как бы неважно,
там 1 петабайт, 1 мегабайт, 1 килобайт, неважно, как бы огромной длины.
Берем как бы его поблочно, берем первый блок, зашифровываем его,
этим вот нашим как бы ключиком, получаем какой-то зашифрованный текст,
сцепляем его со следующим блоком, проводим еще одно там шифрование,
сцепляем его со следующим блоком, вот.
И у нас получается такой последний как бы блочок,
вот, ну пускай длина будет, ну современные как бы алгоритмы шифрования,
хорошие там AES, как бы они работают с блоками длиной 256 бит.
То есть такая как бы сейчас считается как бы секьюрная битность,
в современных криптоалгоритмах.
Размер ключа 256 бит, размер блока там 256 бит, и так далее, это вам обсудим.
И вот у нас получился вот такой вот последний блок.
И смотрите, какой он интересный, он зависит от всех битов вот этого файла.
Причем неважно, даже если этот файл петабайт занимает,
то есть если он просто немеренно огромный,
стоит вам тронуть один бит в любом из этих блоков,
у вас разломается вот этот вот, разломается вот этот вот, разломается.
Вот этот вот, и вы получите совершенно другой хэш, абсолютно.
То есть прям, который будет отличаться очень сильно.
Отличаться очень сильно, вы уже тоже знаете, как бы, что значит очень сильно.
Очень сильная в криптографии, это означает, что примерно половина битов,
как бы, поменяла свое значение.
Вот, и вот эта вот штука является таким прекрасным цифровым отпечатком,
таким идентификатором данных.
Используется вообще повсеместно, как бы, хэширование где угодно,
там, не знаю.
В файловых системах, в телекоммуникациях, там, ой, ну, как бы,
очень широко используемые алгоритмы, вот.
Ну, и, конечно же, как бы, как раз вот эти вот в крипте,
это хэши блоков, это хэши транзакций.
То есть, если вы видите, как бы, хэш-транзакции,
вы можете, как бы, самостоятельно проверить,
что вот тело этой транзакции, вот оно там с точностью до бита,
там, ну, прям вот ее, типа, RAW-образ,
который, как бы, там, не знаю, там, пачка,
это байт, что она, ну, не была, там, не знаю, подделана,
что она была, как бы, представлена и так далее.
И, в принципе, когда кто-то кому-то криптой платит,
он обычно кидает, как бы, вот я тебе заплатил, как бы, не знаю,
вот хэш-транзакции, иди, как бы, посмотри по нему.
Я могу сходить на сайт, но могу, в общем-то, и сам обратиться
к своей собственной ноде блокчейна и сказать,
типа, найди мне по хэшу эту транзакцию.
В торрентах файлы ищутся по хэшам, вот.
Во всех, там, не знаю, там, облаках и так далее.
Для исключения дубликатов тоже, как бы, файлы обязательно хэшируют,
сохранятся, как бы, их хэши цифровые, в первую очередь.
Это, вот, собственно, такой первый, как бы, такой криптографический слон,
на котором все это строится.
Второй слон – это цифровая подпись.
Тоже мы, тоже бежим, как бы, галопом по Европам в данном случае.
Это концепция асимметричной криптографии.
Появилась она, там, в 70-х годах.
Значит, там, мы с вами посмотрим, как бы, и Диффи Хелм,
и так далее.
Используется тоже крайне широко.
Там кто-то любит приводить, не знаю, сдачу бухгалтерской отчетности,
там, ЭЦП, которые получают, как бы, в центрах.
Но, на самом деле, самое широкое применение вот здесь, вот.
Вот в этом замочке, как бы.
Когда вы соединяетесь с сайтом по протоколу HTTPS,
то есть, когда вы, как бы, я захожу на Google.com,
мой браузер просит Google.com доказать, как бы,
что это он мне сейчас отдает.
Вот веб-страницу.
То есть, он его просит подписать данные, которые подготовил мой браузер.
Ну, грубо говоря, мой браузер кидает в Google рандом и говорит,
а подпиши-ка своим публичным ключом.
Вот.
И, соответственно, Google подписывает, и тогда мой браузер уверен,
что попал туда, куда надо.
Значит, сама концепция вот этих вот публичных, приватных ключей.
Там под капотом, на самом деле, ну, значит, представьте,
у меня есть там у нас, опять же,
Алиса и Боб, они могут при помощи некого математического алгоритма
создать пару чисел, значит, одну из них назовем публичный ключ,
а другую назовем секретный ключ.
Публичный ключ, типа, можно шарить, можно там куда угодно, там, не знаю,
показывать как угодно, а секретный ключ всегда лежит приватный,
сохраненный, как бы, никогда не покидает там устройство, там,
то есть его Алиса хранит в секрете.
Вот, значит, строятся они.
Ну, на самом деле, пара этих чисел, как бы, строится на основании так называемых
односторонних функций.
Например, как бы, зная секретный ключ, получить публичный ключ легко вычислить,
а зная публичный ключ, вычислить секретный ключ вычислить невозможно.
Ну, можно привести в качестве примера вот такую функцию g степени x по модулю p.
Это криптсистема RCA строится на основе такой вот, как бы, функции.
Значит, предположим, y – это у нас публичный ключ, а вот это у нас секретный ключ x.
Значит, зная x, ну, это публичные параметры, просто огромные числа, там, не знаю,
типа вот такие 2 в 2048, ну, то есть прям огроменные.
Зная x, ой, зная x, да, получить y очень просто, потому что возведение в степень,
если кто-то там с логарифмами дело имел, да, то возведение в степень, оно такое,
очень здорово оптимизировано.
То есть там берутся, возводятся степени, там, близкие к степени двойки, вот, в общем,
там этот логарифм работает реально быстро.
А вот обратно посчитать так называемый дискретный логарифм, а пупайка, нельзя.
Для таких чисел, как бы, это безумное вычисление, как бы, и сейчас это сделать невозможно.
Есть там алгоритм Шора, который на квантум-компьютере в теории, как бы, позволяет,
как бы, вот это дело, как бы, крэкать.
Вот ломать, там, считать эти дискретные логарифмы, но, как бы, пока еще до этого далеко.
Вот, в общем, это такая, как бы, пример односторонней функции.
Вот у нас есть вот такая вот пара чисел.
А теперь представьте, что мы их приспособили для того, чтобы зашифровывать и расшифровывать информацию.
То есть, как бы, спрятали информацию, получили какой-то шифротекст, раскрыли ее.
Значит, в этих криптосистемах, так они и так и называются, асимметричные,
публикация.
Вот личный ключ, если что-то мы зашифровываем публичным ключом,
то мы его можем расшифровать при помощи секретного.
И наоборот.
То есть, если мы что-то зашифровали при помощи секретного, мы можем разшифровать при помощи
публичного.
Ну, такой, как бы, сделали, ребята такой математический аппарат, который позволяет
сгенерировать два числа, которые обладают такими свойствами и описали, как при помощи
публичного ключа расшифровать, а секретного расшифровать.
Соответственно, то, что зашифровано публичным ключом, расшифровать может только тот, кто знает секретный ключ.
Остальные не могут.
Первая схема, которая здесь напрашивается, эта схема называется секретной передачей информации.
Это когда Алиса говорит, Боб, вот тебе мой публичный ключ.
Здесь у нас будет Алиса и секретный ключ Алиса.
Давай зашифровывай для меня данные при помощи моего публичного ключа.
И Боб, собственно, вот это и делает.
То есть, по сути, и только Алиса, соответственно, может их расшифровать.
Чем эта схема удобна?
Еще с точки зрения телекома, это тем, что Алиса может рассказать свой публичный ключ вообще всем, всему миру.
Алиса, например.
Алиса, например, это Google.
И говорит, кто хотите, можете для меня информацию зашифровывать моим публичным ключом.
Любую, как бы.
И нам не нужно вот этот вот обмен ключами, там что-то там еще делать.
Она позволяет такие неинтерактивные схемы строить.
Но нам эта история не сильно, как бы, интересна.
Нам интересно вот это вот.
То есть смена ролей этой штуки.
Это схема электронной подписи.
Значит, вот ее тоже надо.
Нам очень хорошо, как бы, понимать, как она работает.
Итак, у Алисы есть публичный ключ, есть секретный ключ Алисы.
Она Бобу, как бы, сообщает, каким образом, каким-то образом, свой публичный ключ.
Говорит, Боб, проверяй мою электронную подпись при помощи него, при помощи моего публичного ключа.
Затем у нее есть какой-то документ.
Я юристам люблю вот так вот рисовать, да, какой-то, не знаю, файл, транзакция, как бы, неважно.
Какой-то бинарный буфер.
Вот.
И она хочет.
Она хочет его подписать.
Подписать.
То есть она хочет продемонстрировать всем, у кого есть публичный ключ Алисы, что она запроцессила вот этот файл, как бы, до последнего бита.
То есть она либо документ в Варде глазами посмотрела, либо ее сервер, как бы, провалидировал вот эту транзакцию и сказал, типа, ок.
Значит, что она делает?
Она считает криптографический хэш от вот этой штуки.
Затем она этот хэш зашифровывает своим секретным ключом.
Вот этот вот хэш.
И получившаяся вот эта штука, как бы, является электронной подписью этого документа.
Сам документ не секретный, так как схема, как бы, подписи.
Нам там прятать ничего не надо.
И вот эта вот штуковина, она полностью, как бы, отправляет Бобу.
Боб получает, как бы, документ.
Возможно, его перехватили, там, что-нибудь поправили здесь, там, 10 тысяч на 100 тысяч, там, и так далее, и так далее.
Вот.
Вот.
Получает ее электронную подпись и делает обратную.
То есть он берет электронную подпись, берет публичный ключ Алисы, который ей тоже понадобится.
Затем он расшифровывает публичным ключом Алисы вот эту подпись.
И должен, по идее, получить хэш документа, если все верно.
Вот.
Но он его считает, конечно, и самостоятельно.
И потом сравнивает.
Соответственно, если они равны, то только Алиса при помощи своего секретного ключа могла поставить, как бы, вот эту электронную подпись.
Ну, соответственно, если, как бы, подпись неверна, то Боб ничего не может сказать точно, потому что у него то ли здесь что-то испортилось, то ли здесь что-то испортилось, может, здесь что-то испортилось.
То есть просто неверна и неверна.
Вот.
И, как бы, понятно, что по свойствам, как бы, шифрования, да, вот, отличия этих хэшей, они будут очень большие.
То есть там какие-то прям очень серьезные, как бы, потому что есть рассеивание, перемешивание.
Вот.
Это электронная.
Это электронная подпись.
Значит, да.
Не могли бы еще раз повторить про электронную подпись?
С момента подписания?
С момента, да, того, как, ну, после получения ее.
А, еще раз, после получения.
Значит, Алиса сделала как раз вот эту вот электронную подпись.
Так вот.
Отправила этот документ Бобу.
Вот.
Ну, и я там, не знаю, там, хотите, если еще.
Если еще аналогию, то это какая-нибудь компания, которая сдала бухгалтерскую отчетность, сделала зип-файл.
У этой компании есть секретный ключ.
Она этим секретным ключом этот зип-файл подписала и отправила в налоговую.
Здесь, как бы, налоговая.
А в налоговой есть табличка, как бы, что ООО там такое-то, такое-то.
У него вот такой-то публичный ключ.
Вот.
И, соответственно, значит, налоговая скачивает этот зип-файл,
который ей прислали, получает электронную подпись.
У нее есть публичный ключ этой компании, то есть там зарегистрированный в реестре.
Она при помощи публичного ключа проверяет электронную подпись.
И когда мы с вами рисовали то, что зашифровано при помощи секретного ключа
может быть расшифровано при помощи публичного ключа,
здесь делается декрипшн при помощи публичного ключа,
расшифровывается именно сама электронная подпись, как и SIG.
После этого должен получиться хэш документа криптографический,
потому что до этого подпись – это зашифрованный хэш документа,
который зашифрован секретным ключом.
И при проверке БОП, наша налоговая, она сама считает криптографический хэш
и сравнивает с тем, что получилось вот здесь при проверке подписи.
Если они равны, то подпись верна, потому что только владелец секретного ключа
мог бы сгенерировать вот такую вот подпись.
Можно вопрос?
Да.
Получается, у нас смысл в том, чтобы публичный ключ и данные от А,
ну, от Алисы, мы получили из разных источников.
Иначе, если мы от одного и того же источника это получаем,
то можно подменить и то, и другое. Разве нет?
Да.
Можно.
Ну, именно поэтому и существует в HTTPS эта система сертификатов,
которую я показал, как бы, поэтому, как бы, надо вот эта регистрация
публичных ключей называется, при сдаче электронной отчетности называется
на стране, типа, мне надо сходить, получить ЭЦП.
Вот.
Вот это вот получить ЭЦП – это, по сути, зарегистрировать публичный ключ.
Вот.
Поэтому, да, как бы, из разных источников.
Но, как бы, в блокчейнах это не сильно важно.
Я как раз сейчас перейду, как раз, как это используется в блокчейнах.
Вот.
В блокчейнах все на самом деле находится на борту.
Транзакция.
Значит, смотрите, как это работает в блокчейне.
Там, я не знаю, мы уже давайте, я буду правильно уже называть, как бы, вещь своими именами,
а я буду вот эти вот адреса называть, как бы, адресами в блокчейне.
Вот этот вот from, как бы, to.
Значит, у нас есть Вася.
У Васи есть секретный ключ Вася, у него есть публичный ключ Вася, вот этот, как бы, публичный ключ.
И вот из этого публичного ключа получается адрес Вася.
Есть некоторая путаница, потому что в некоторых блокчейнах, как бы, адресом является прямо публичный ключ.
И мне проще сильно объяснять вам, если я скажу, что в блокчейнах все пользователи адресуются, как бы, при помощи своих публичных ключей.
Вот.
Ну, как бы, чисто технически, как бы, там, скажем, в эфире, как бы, адрес – это…
160 бит, по-моему, первых или последних от хэша, от публичного ключа.
Вот так, то есть берется публичный ключ, от него берется хэш, от него берется, как бы, 160 бит, и получается такая вот строчка.
Ну, там есть, там, собственно, основание, как бы, почему так сделано.
В биткоине тоже, как бы, но тоже все наследуется от публичного ключа.
И когда Вася хочет отправить кому-то транзакцию, он создает, там, транзакцию типа файлик.
Я, Вася, это вот мой адрес, хочу на адрес Пети отправить, там, не знаю, там, 10 эфира, и вот, соответственно, моя электронная подпись от этой штуки.
И подпись просто, она сделана таким образом, что из нее можно достать публичный ключ Вася из этой подписи.
Ну, просто она так, как бы, организована вот здесь, вот в этих вот значениях, ВРС, вот это, собственно, подпись, как бы, транзакция.
Из нее, как бы, при помощи, там, определенной операции извлекается прям публичный ключ.
Вот, ну, просто так сделано для удобства, чтобы не надо было дописывать еще сюда публичный ключ Вася для проверки.
Вот.
То есть я под подписью теперь буду подразумевать, как бы, там, не знаю, там, в эфире в биткоине, как бы, подпись, из которой извлекается публичный ключ.
Вот.
Значит, почему, типа, кто угодно не может это сделать?
Ну, во-первых, как бы, кто угодно не может.
Подписать транзакцию от имени Вася, не зная секретного ключа Вася.
Вот.
А во-вторых, он не сможет забрать у него 10 эфира, потому что Вася, когда, как бы, 10 эфира тратит, там, в таблице, как бы, написано, как бы, что у Вася, как бы, есть, там, не знаю, там, 50 ЕТХ.
А у, там, Пети, короче, есть 3, 3 эфира.
И, конечно, там, типа, если, ну, здесь ничего не подменишь, как бы, Петя не может, как бы, взять, сказать.
Я, Петя, как бы, хочу, там, не знаю, кому-нибудь, там, Миша, отправить, там, 10 эфира с адреса Вася.
И поставить, как бы, подпись Вася, как бы, это не сработает.
Вот.
Так что, как бы, каждая транзакция в блокчейне обязательно подписывается, прям, строго подписывается электронной подписью.
Это вообще повсеместно.
И когда я говорю, что майнер или, там, блок-продюсер, как бы, он формирует блок и вставляет сюда транзакции.
А кто-то там, типа, другой, получив новый блок, он его валидирует.
То, на самом деле, это означает, что он бежит, как бы, по транзакциям.
И, конечно же, обязательно, как бы, проверяет электронную подпись каждой из вот этих вот транзакций.
То есть, ему, прям, надо, короче говоря, проверить.
Опять же, я чуть-чуть, как бы, кривлю душой, потому что я вам рассказываю, как бы, про, как бы, блокчейн,
на который, как бы, сверху мне наложили еще, там, различные, там, оптимизации и так далее.
Об этом мы будем отдельно говорить.
А говорю о таком, как бы, об абстрактном, как бы, блокчейне, который, прям, вот, там, самый, как бы, надежный,
и где задачи, прям, в лоб решаются.
То есть, при формировании блока майнер, конечно, проверяет обязательно вот эти подписи,
потому что сделает он, как бы, блок, в котором где-нибудь, вот здесь, вот, какая-нибудь фейковая транзакция,
или Вася переводит кому-нибудь, там, миллиард эфира, как бы, а у него на балансе их просто нету.
То есть, он еще, как бы, каждую транзакцию проверяет обязательно, как бы, майнер.
Но этот блок просто выкинут.
То есть, кто-то, ну, другие компьютеры в сети, как бы, его возьмут, начнут накатывать транзакции,
обнаружат, как бы, что у Васи нет эфира, что еще что-то скажут, а, блок фигня, как бы, все откатывается, как бы, просто его откатят.
Вот.
И при этом, значит, почему здесь еще, ну, так, уже чуть-чуть так смещаясь еще в сторону, наверное, экономической безопасности,
а почему, как бы, в блокчейнах, в эфире, как бы, выгодно производить блоки,
потому что по той же, как бы, спецификации, то есть, по тому, как бы, как вот этот блок, как бы, валидируется,
в блоке в конце последней транзакции должна быть обязательно, так называемая, у нее есть специальное даже название,
Coinbase называется транзакция, это вот в биткоине, в эфире,
которая, по сути, представляет собой транзакцию из никуда, из воздуха, на адрес майнера, точнее, просто на адрес, который укажет,
тот, кто произвел этот блок, то есть, неважно, кто там произвел, как бы, он может указать любой адрес,
положить, добавить, короче, не знаю, там, 6, там, 25 биткоина, что ли, сейчас наград за блок, вот.
То есть, как бы, обязательно последней должна быть транзакция награды, как бы, майнеру за то, что он произвел блок.
Поэтому майнеру выгодно, что его блок будет принят сетью, что никто, как бы, его не выкинет, что он здесь нигде не ошибся, как бы,
что его будут продолжать распространять, как бы, по другим.
И другие машины, как бы, будут на основе его блока уже начинать строить, как бы, следующее.
Таким образом, как бы, закрепляя вот этот вот блок, как бы, в консенсусе.
Вот, то есть, формируется почка поверх него.
Тут много от алгоритмов, от консенсуса зависит, вот, но, тем не менее, то есть, произвести блок выгодно.
Вот, в общем, это вот то, что касается, соответственно, электронной подписи.
То есть, все, как бы, все строится на электронной подписи, как бы, здесь.
Она постоянно используется.
Более того, где она еще используется, это, опять же, если говорить о консенсусах,
когда происходит, ну, когда у нас есть вот эти вот уже там наши, не знаю, валидаторы, давайте их называть,
как бы, уже правильно, как бы, там, майнеры, валидаторы, блок-продюсеры,
то есть, те, кто производит блоки, каждый из них периодически предлагает блок всем остальным.
Он говорит, типа, ребят, я согласен.
Я создал, как бы, новый блок.
Как вы его там примете, не примете.
В случае майнинга он прилагает к этой штуке, там, специальный хэш, как бы, который, по которому понятно, что он потратил, там, кучу, там, мегаватт, тераватт, как бы, энергии на то, чтобы такой хэш просто получить.
То есть, он просто, и остальные его просто принимают, этот блок, как бы, если этот хэш достаточно сложный.
А вот в алгоритмах Proof of Stake, Proof of Authority, как бы, в нормальных, как бы,
в таких вот, цивилизованных, которые, считаю, там ставятся, так называемые, аттестации на блоки.
То есть, валидатор предлагает блок, другой валидатор его скачивает, он его проверяет и говорит, да, чувак, твой блок правильный.
Затем второй, как бы, перепроверяет, говорит, да, твой блок правильный, мне нравится.
Третий, как бы, отвалился, у него интернета нету.
Четвертый подключился, он говорит, да, твой блок правильный.
И вот эти вот штуки, это тоже является, по сути, ну, как бы транзакциями, тоже являются электронными подписями.
То есть они просто подписывают блок, то есть ставят электронную подпись на вот этом блоке.
И когда этот блок набирает, как бы там, не знаю, больше там, ну, пускай там больше двух третей голосов, он считается все финализированным.
То есть считается, что он все закрепляется в цепочке.
В принципе, данные из этого блока можно начать оптимистично использовать и заранее, то есть пока его не приняли.
То есть у нас идет цепочка, давайте уже как бы в рамках вот нашего как бы нода, то есть наш собственный блокчейн, не знаю, нода.
Вот у меня здесь есть, например, там, не знаю, там, кошелек.
Сейчас его.
Вот он, собственно, смотрит куда-то там в какой-то компьютер.
Ну, обращается к нему и спрашивает, типа, какой баланс сейчас у адреса там у такого-то?
Вот там, какой баланс вот у этого адреса?
Он на самом деле по JSON-RPC сейчас как бы пингует какую-то блокчейн-ноду.
И как бы обращается к ней в ее K-value базу данных и говорит, а какой баланс вот у этого адреса?
Она ей отвечает.
Затем как бы эта нода выкачивает новый блок.
И этот блок еще не финализирован.
На нем еще не поставлены как бы вот эти вот аттестации.
То есть она его скачала, она его сама как бы проверяет, она его сама проверяет как бы на корректность,
но на самом деле ждет до тех пор, пока не будет собрано достаточное количество вот этих вот аттестаций.
В этот момент блок считается финализированным.
И довольно важная вещь, которую мы будем разбирать как бы в консенсусах,
то, что...
Сети, которые построены как старый как бы эфир, proof-of-work, майнинг в биткоине,
это так называемый пробабилистический консенсус.
То есть там, ну, в теории, если где-то сидит какой-то инопланетянин с огромным суперкомпьютером
и подмайнивает там как бы цепочку биткоина, да, и нам ее не показывает как бы эту цепочку биткоина,
но у него огромные вычислительные мощности, он там вот эти красивые...
как бы хэши как бы ищет в лед, то если он опубликует эту цепочку вдруг неожиданно,
то есть все в пиринговой сети ее увидят, они про текущий биткоин вообще забудут как бы.
То есть они его выкинут целиком, как бы возьмут более вычислительно сложную цепочку.
То есть выберут то, что как бы более вычислительно сложно.
И вот эти вот...
А вот если цепочка обновляется, что с транзакциями?
Откатываются.
Откатываются.
Откатываются.
А если...
А деньги, если уже потрачены, переведены, то это все тоже...
Они перестают существовать.
То есть, ну, то есть, как бы здесь, ну, как бы блокчейны здесь как раз не надо думать как финансист, вот.
Надо думать как разработчик.
Вот есть табличка, там где у Васи как бы там 100, как бы, да, а у Пети 10.
Вот транзакция, как бы, Вася Петя перевел 10, да, как бы у него стало 90,
а у этого стало 20.
Вот накатили блок, накатили блок, он добрался до финализации.
То есть, как бы его там оттестовали, или прошло какое-то время в пруфо-форке после майнинга.
И вот эти вот изменения, они в базе данных как бы считаются валидными, зафиксированными.
Но если блок откачан, откатывается, то все обратно возвращается.
То есть никакой, ну, никакой Петя ничего не получал, как бы.
Вот.
Все остались как бы при своих.
Просто когда я рисовал еще вот эти вот блок-спул,
почему мы с вами, как бы, вот этого не видим, как бы, вот этого борьбы, как бы, такой, как бы, балансов?
Да потому что, когда у нас майнер производил 50-й блок,
он, скорее всего, ну, точнее, два майнера, и они конкурировали, как бы, за этот блок,
они, скорее всего, оба взяли нашу транзакцию, и тот, и другой.
И поэтому то, что мы, как бы, откатили и накатили другую версию блока,
все равно, как бы, от Васи Пети, как бы, 10 эфира перешло.
Потому что майнеру выгодно включить транзакцию в блок.
Он получает еще комиссии, как бы, с этих транзакций.
То есть, вот.
Понятно ответил?
То есть, просто, а, прямо вот, чисто откатываются все транзакции в блоке.
Вот так, как будто бы их не было.
Да, да, да, да, да, да.
Что там, кто там, куда там деньги делись, это отдельный вопрос.
Это как раз отдельный, это как раз и есть атака, так называемой, двойной траты,
которую там...
А там еще говорят, там, атака 51%, там, и так далее, и так далее.
Это все там, курс, мы все это посмотрим обязательно.
То есть, на это удобно смотреть, как на базу данных,
как бы, на которую накатываются последовательно, как бы, транзакции.
Накатываются они вот такими вот пачками,
и могут откатываться пачками, как бы, обратно, и, соответственно, накатываются дальше.
С той аналогичной бутшей, можно все откатить.
А?
С той аналогичной бутшей, можно все откатить, спасибо.
Да, да.
Брончейн.
можно откатить до любого блока
назад, как бы, и полностью перепроиграть
как бы там заново вот эту вот цепочку.
И, кстати, когда мы будем пробовать,
у вас будут задания
по сути, типа, остановиться
вот на этом блоке, прямо вот в текущем
состоянии, и
там что-то наменять, как бы, то есть
притвориться каким-то там узлом, там еще
что-нибудь там, значит, поделать.
То есть здесь повторяемость и вот
это replayability, она как бы
полная. То есть мы можем
всю историю эфира до последней
транзакции, до последнего бита
полностью проиграть, как бы, с нулевого
блока, что биткоина,
как бы, что эфира, вот, абсолютно
как бы остановившись на любом блоке
и всегда будем получать консистентную
вот эту вот базу данных, как бы,
state db.
Вот. Так,
значит, про genesis,
значит, про
такой какой-то такой базовый
отбор.
Про это рассказал.
Так, теперь, соответственно,
уже, да, еще, короче говоря,
еще глубже, как бы, да,
соответственно, погружаемся в эту
историю. Значит, про вот эту
вот валидацию блоков.
То есть про создание, про создание
и валидацию блоков.
Что тут важно?
То есть сам протокол
биткоина или протокол
эфира или там еще
что-то, как бы, это же, это по сути,
не знаю,
PDF-документ.
Я не знаю, там, PDF, там, или как бы
MD. Потому что, по сути, это просто
как бы спецификация.
А эти блокчейны тоже
отличаются от традиционного софта.
То есть там
Ethereum, грубо говоря, вот эти
вот там его ноды,
их штук пять или шесть разных.
Из них там две на Go
написаны имплементации. Там что-то
одна на Rusty, как бы, одна на Java,
одна на C-Sharp.
Там ее какие-то куски,
как бы, вот этой логики, как бы, там,
написаны буквально на всех языках.
То есть они все просто, по сути,
следуют вот этой вот спецификации.
А спецификация, она как раз
и говорит о том, как
валидировать блок. Значит,
я производитель блоков.
Значит, я хочу этот блок
произвести. Что я делаю?
Сейчас я уже буду, наверное, как бы
говорить про майнинг,
потому что, ну, это такая, как бы,
классическая штука. Но если вы смотрели
программу курса, то там биткоин
на самом деле находится в самом конце,
вот,
потому что, ну, во-первых, как бы, с точки
зрения кода, там, не очень, как бы,
сильный, там, это
интересно, вот, но тем не менее,
как бы, он очень красивый, такой
минималистичный, секьюрный, как бы, и
такой, как бы, клевый.
Вот. Но конкретно блокчейн-разработчики
под биткоин особо-то
не пробуют. Вот. Ну, там,
ну, есть там, да, там, часть определенная.
Вот. Сейчас по большей части
все занимаются именно смарт-контрактами,
и мы будем с вами заниматься именно смарт-контрактами.
Вот. Значит,
что делает, соответственно, майнер?
Он пошел, соответственно, в
вот этот вот пул, TX-пул,
набрал, как бы,
транзакций, значит,
в каждой
транзакции, при этом, как бы,
в каждой транзакции находится
комиссия для майнера,
которая устанавливается чисто
пользователями. То есть,
вы, когда шлете
куда-то там криптовалюту, вам, вы
указываете, сколько вы за это готовы
заплатить, и вы платите, конечно же,
в этой же, как бы, родной криптовалюте.
Это, на самом деле, довольно важный,
как бы, поинт. То есть, вы не
какие-то там деньги платите за транзакцию,
а у вас строго
списывается баланс нативной
криптовалюты, то есть родной для
данного, для данного
блокчейна. Там, в эфире это эфир,
в биткоине это биткоин, там, в пулько-доте
это дот, там, в салане
сол, и так далее. То есть, там есть
в каждом из таких блокчейнов
есть, как бы, своя, своя
нативная криптовалюта.
В общем, просто ее определить, это та,
в которой платятся комиссии за транзакцию.
Вот. Потому что майнерам,
на самом деле, пофигу, что там, какие там
токены внутри, кто кому там передает,
каких проектов, им это
совершенно не важно, как бы, они работают
исключительно в эфире.
Поэтому у каждой транзакции есть вот здесь
вот
размер комиссии.
Это будет довольно, довольно
сложная, на самом деле, штука, мы будем ее
разбирать, то есть, как это
сделано.
Он суммирует,
соответственно, все, как бы, вот эти вот комиссии,
получает там
сумму со всех транзакций,
добавляет себе coinbase транзакцию,
там, не знаю, два эфира в подарок,
вот себе там за блок,
плюс вот эта вот сумма,
соответственно,
всех вот этих вот комиссий.
Затем он в блок ставит
обязательно таймстэмп,
значит, время данного
блока, потому что у нас, когда
идет с вами цепочка,
у нас понятно, что, как бы,
в каждом блоке есть таймстэмп,
и он не может быть из
прошлого, он не может быть далеко из
будущего, это тоже, как бы, в спецификацию
внесено. Но при этом
майнер может немножко его, как бы,
двигать, вот здесь вот у него уж там,
как бы,
разное время. Он может
по-хорошему выбрать, как бы, там, текущее время,
или там, минус две секунды, или там,
плюс десять секунд, то есть это как ему нравится.
Но самое главное,
что вот этот вот таймстэмп,
он зафиксирован в блоке.
Затем обязательно
хэш предыдущего
блока в качестве, да, как бы,
мета-дана.
Следующая крайне, как бы,
важная штуковина,
это, так называемый,
state root.
Про это тоже,
как бы, надо отдельно поговорить.
Значит, когда мы с вами обсуждали
вот эту вот нашу state
базу данных,
я там рисовал, соответственно, табличку.
Я рисовал табличку
с адресами,
адрес Васи, как бы,
баланс эфира его.
Значит,
вот эта вот структура
внутренняя, на самом деле, там есть еще, как бы,
разные там служебные поля, например,
вот важное поле nonce. Это такой
монотонный счетчик,
который у Васи считается,
с каждой транзакцией. То есть, каждый раз,
когда Вася отправляет транзакцию,
у него, как бы,
было там единичка, потом стало
двойка, потом тройка.
Как думаете, зачем?
Чтобы не учесть дважды одну транзакцию?
Да, совершенно верно.
Чтобы не было атак реплей.
А то мы взяли, как бы, эту Васину
транзакцию, которую 10 эфира
Петя отправляет,
и, как бы, еще раз отправили, еще раз
отправили, еще раз отправили.
И, как бы, и, соответственно, весь эфир
у него высосали, весь передали Пете.
Вот. Поэтому обязательно нужен
nonce. И, конечно же, nonce вот сюда, как бы,
в транзакцию тоже, как бы,
тоже включается.
То есть, для того, чтобы каждая транзакция, как бы,
она была новой, чтобы электронная подпись,
как бы, подписывала новую пачку данных.
И вот эта вот
внутренняя штуковина, она внутри
представлена как
k-value базы данных.
k-value
database.
database.
Ну, я не знаю, насколько много
из вас, как бы, имели с ними дело. Скорее всего,
прям очень много людей, как бы, из вас
знают, что такое Mongo, или что
такое Redis, или там
что такое Tarantula. Ну, то есть,
это базы данных,
которые k-value.
У нас есть
SQL, там, базы данных,
большие там, всякие там, MySQL
с правильными движками, Postgres,
там, и так далее.
То есть, это те, у которых прям
такая прям табличная организация,
которая работает с кортежами,
значит, там, всякие инсерты, апдейты,
делиты, там есть
транзакции. k-value
базы данных, они, как бы, сильно проще,
они сделаны сильно проще
в угоду скоростям.
То есть, их используют, чтобы, например,
там, не знаю, там,
держать ваш профиль,
ну, не знаю, там, ваш юзернейм,
хэш пароля,
там, не знаю, там, дату рождения. То есть,
такие, как бы, данные, по которым
не нужно делать агрегацию. То есть,
k-value базы данных, это, в первую очередь,
базы данных, в которых не нужно сделать
выборку, выбери мне, там,
тысячу последних покупок
вот у этого человека, и еще
посчитай от этого, там, среднее,
а потом используй это, там, не знаю,
как какой-нибудь, там, рейтинг, там,
для того, чтобы ему, там, скидку выписать.
То есть, там, где нету, как бы, такой агрегации,
а есть просто прямой запрос, типа,
дай профиль быстро-быстро,
обнови профиль быстро-быстро, там, еще что-то.
То есть, где, там используются
вот эти, вот, k-value базы данных.
Значит,
они в блокчейнах
используются, то есть, они
не просто, там, не просто как
k-value базы данных, а на самом деле под
всеми, как бы, нодами блокчейн,
которые вы встретите, там находятся
продукты, которые называются LevelDB
и
ROXDB.
Это k-value базы данных,
быстрые, как бы, которые специально
созданы для таких
массированных быстрых апдейтов
и легкого отката.
Нам же с вами, как бы, нужно
еще откатывать, да, у нас идут блоки,
как бы, опять появился какой-нибудь анкл,
который победил. Нам нужно, значит,
все это дело быстро откатить.
Вот в k-value базы данных проще делать
так называемые снэпшоты.
То есть, как бы, кусочек, которому
ты можешь очень быстро откатиться
и, как бы, начать
накатывать новые транзакции.
То есть, все данные
в блокчейнах вы можете вообще представлять
как k-value базы данных.
В основном, как бы.
Причем ключами являются
вот эти вот криптографические адреса.
То есть, у Васи
10 эфира и такой-то нонс.
И там еще там та-та-та,
та-та-та, это мы уже, когда про контракты
будем с вами говорить.
То есть, есть набор данных, которые привязаны
к ключу, а ключами являются вот эти
вот как раз
адреса в блокчейне.
И накатывание, по сути,
накатывание транзакций
из вот этого блока
это изменение,
ну, это всегда, как бы,
набор новых ключей, которые нужно
добавить. Да, там, не знаю, там, майнер
первый раз в жизни, как бы, произвел блок.
Вот. И у него теперь, как бы,
встало там два эфира плюс комиссия.
Вот. Ну, там, нонс, ноль, там,
там, еще там что-то.
А там, не знаю, у Васи
надо изменить ему баланс.
Там, не знаю, там, Пете надо изменить
баланс. То есть, каждый, как бы, блок, это
набор изменений,
такой, как бы, атомарный, вот в этой вот
стейт-базе данных.
Для того,
чтобы, ну,
а теперь представьте, что мы хотим зафиксировать
состояние вот этой базы данных в хэше.
То есть, нам что сделать?
Как бы, прям взять, типа, все
key-value, отсортировать, фиг знает как,
по алфавиту,
положить вот там вот такой плоский файл,
как бы, от него хэш посчитать.
Это неудобно.
Вот. И для этого используется
структура, которую мы тоже с Вами будем
отдельно рассматривать, которая называется
Merkle-3.
Ну, и вообще,
на самом деле, там, деревья, как бы,
в этих базах данных, они довольно
там часто используются, но
дерево Меркла, оно в блокчейнах,
у него особая роль.
Значит, что это за структура?
Тоже мы там про ее
свойства отдельно поговорим,
пока кратенько.
Значит, это структура, которая построена
на криптографических хэшах.
Ну, предположим,
давайте так, как бы,
значит,
значит, здесь у нас будет адрес Васи,
адрес Васи, там, не знаю, там, 10 эфира,
ну, то есть, это просто вот данные,
как бы, а здесь будет адрес
Пети, как бы, 8 эфира,
а здесь будет там адрес Майнера,
это там 2 эфира, там, и так далее.
Значит, от этих данных
считаются хэши,
криптографические,
и строится что-то типа бинарного
дерева, но только вот здесь,
вот в этих вот узлах
этого бинарного
дерева, вот здесь вот,
находится
хэш конкатенации
вот этих двух хэшей, то есть,
мы их, как бы, там, H1,
H2, а здесь находится
хэш, как бы, H3,
H4.
То есть, они слепляются,
и, как бы, слепляются уже, как бы,
идут до корневого элемента,
который, как бы, называется рут.
Штука широко используемая,
она, кстати, используется и в торрентах,
тоже вовсю, как бы, потому что,
когда вы качаете
с какого-то другого компа
кусочек, там, фильма,
там, я не знаю, там, небольшой,
вам бы по-хорошему нужно доказательство
то, что этот кусочек принадлежит, как бы,
к этому фильму, а не то, что
вам скормили какую-то хренатень.
Вот. И вот это
доказательство того, что
только что скачанные, там, не знаю,
несколько килобайт данных,
что эти
несколько килобайт данных, они, как бы,
относятся к фильму, тоже делаются при помощи
Меркел-дерева.
Значит, чем оно хорошо?
Оно хорошо тем, что мы можем все
вот эти вот наши значения
сохранить, по сути,
в одном числе
и доказывать то, что эти
значения находятся в этом листе при помощи
так называемого Меркел-пруф.
Значит,
как выглядит Меркел-пруф? Я хочу доказать,
что Петя,
что Петя с балансом 8
находится вот в этом вот
дереве. И у меня для проверки,
у меня есть только вот одно вот это,
одно только число.
Что я делаю, чтобы доказать, как бы, что я
в этом листе нахожусь?
Я создаю доказательство
следующего вида. Значит, я
беру там, соответственно, хэш от
моего вот этого Пети, как бы,
и восьмерки. Вот он вот этот вот
хэш. Это,
значит, беру его.
Меркел-доказательство
это массив.
Значит, в этот
массив я кладу,
вот этот вот хэш, которого мне не хватает,
как бы, h1.
Теперь
я смогу, как бы, взять
вот этот хэш, вот этот вот,
и вот это вычислить самостоятельно.
То есть мне не нужно это сообщать.
Но для того, чтобы добраться до рута,
мне не хватает вот этого еще хэша.
И поэтому я беру еще,
как бы, хэш от
h3 и h4.
Получается такое,
как бы. Ну, то есть
я, Меркел-доказательство,
это массив хэшей, которых
не хватает для того, чтобы
построить полный путь по Меркел-дереву
до рута.
И получается, что
я таким образом,
как бы, доказал,
то, что вот этот вот листик
принадлежит, как бы, вот этому дереву.
И доказал это, предоставив
o
от, соответственно, логарифм 2n
хэшей.
То есть уровни
в этом дереве, логарифм,
2n, вот. И, соответственно, я должен
логарифм 2n хэшей, как бы, предоставить
для того, чтобы доказать, что
какой-то лист находится в этом дереве.
То есть, когда
я здесь пишу, как бы, state root,
это, по сути, как раз, вот,
root всех ключей, значений
вот этой вот
базы данных. У нас
произошла какая-то транзакция,
значит, с одного списали,
там, вот этого, у этого стало
8, а у этого стало 10.
Хэши изменились, дерево,
как бы, изменилось, как бы, и я
пишу сюда, как бы, новый
state root,
вот, потому что, как бы, дерево, оно
изменило свою конфигурацию.
Там для этого еще есть специальные
еще модификации различные, всяких
меркл-деревьев, вот, которые используются.
Я правильно понимаю, что
оно будет персистентное, ну, и
то есть копируется каждый раз полностью,
новая версия отдельно, или как
хранится? Новая версия
дерева? Да, да, да.
Не, ну, дерево строится, как бы,
в самом, как бы, ну, в памяти,
как бы, нода, она, конечно, держит, как бы,
все вот эти вот листы, как бы, в голове.
Я имею в виду, и когда оно
обновляется, то старое остается, или только
обновляется еще? Не, старое остается в
прошлом блоке, ну, то есть
где-то в прошлом блоке был, как бы,
старый state root.
В общем, ну, по сути, это,
как бы, хэш базы данных, вот этого,
вот этой state database,
просто организован при помощи вот такого,
такого вида структур данных.
Хорошо, спасибо.
В принципе,
точно так же, как бы, хранятся
и tx root,
то есть, по похожему
же принципу, транзакции
в блоке, они тоже организованы
в меркл дерева,
и тоже у него есть root,
и, то есть, вы можете доказать, что
моя транзакция, как бы, находится
в этом блоке,
не предъявляя весь блок,
а достаточно, как бы, просто предъявить
tx root и доказать,
вместо того, что ваша транзакция, как бы,
она к этому tx root относится.
То есть, не надо, как бы, выкачивать там весь блок,
просматривать, смотреть,
есть ли там, как бы, транзакция или нет,
как бы, вы можете спокойно доказать,
что транзакция в этом блоке есть,
и сделать это за
all log 2n, как бы, транзакции.
Не очень страшно.
Вот. Значит,
так.
Там еще вопрос в чате зума был
некоторое время назад.
Сейчас посмотрим. Так, вы вопросы
лучше перебивайте.
Похоже на UUID.
Это я про хэш спрашивал, когда говорили,
что он отличается очень сильно,
и что одинаковые там не могут быть.
Да, да, да. Так эти все UUID,
они на этих хэшах же и построены,
как бы, точно так же.
На самом деле, вообще-то,
здесь ничего прям какого-то там
прям супер других алгоритмов
нету. Здесь, по сути,
просто комбинация большого количества
всего, что было до этого сделано.
Вот. Ну, и, кстати говоря,
говоря о развитии, да, блокчейна,
почему раньше-то, как бы,
его не было? Да потому,
что у вас не было компов, которые
могут взять и тысячу электронных подписей
проверить. Это офигеть,
какая операция. Там вы
на Raspberry Pi, короче,
замучаетесь подписывать транзакцию.
Точнее, на чем-то прям
совсем мелком, не знаю, там, на
орудина, например, сделать, как бы, подпись,
транзакция, очень сложно,
потому что, как бы, огромная битность,
очень мощные вычисления. Пока
компы не доросли, как бы, до вот этих мощностей,
блокчейны, по сути, были невозможны.
Вот. Они сейчас стали возможны,
потому что, чем отличается
блокчейн-нода, она
с точки зрения софта, это, по сути, как
монго, не знаю, как монго,
как бы, такая, которая крутится,
которая просто с другими монгами
соединена через peer-to-peer.
И при этом это монго,
у которой жрет очень много процессора,
что ей постоянно надо криптографические
штуки делать. Ей надо хэши вычислять,
проверять, как бы, вот эти вот
мертвые доказательства, проверять
электронные подписи. То есть она все время
работает с числами
огромной битности. Поэтому все блокчейн-ноды,
они потребляют процессор прямо
изо всех сил.
Так. Зачем при отправке транзакции
мы указываем хэш-блока,
если блок
из транзакции собирает вреда?
Нет, мы при отправке транзакции не указываем
хэш-блока,
и как бы непонятно, как бы, хэш какого
блока мы должны, как бы, указать.
Вот. Потому что, во-первых, как бы, нас еще
в блок не включили.
Мы можем, наверное, опционально указать,
типа, хочу, как бы, транзакцию
после этого блока, как бы, но
в транзакциях хэша-блока
нет никакого. Там просто
написано, типа,
вот нонс там есть, как бы, то есть
я хочу увеличить счетчик
своих транзакций.
Вот. Так. На это
ответил. Поехали дальше.
Так, у нас 13.28.
Так, у всех, короче,
голова закипит, поэтому предлагаю
объявить перерыв. Давайте
на 15 минут.
Сегодня 13.30,
в 13.45 продолжим.
Сколько вообще по времени лекция
планируется? Ну, вообще,
все эти лекции планируются по две
пары. Хорошо.
Курс здоровый.
Спасибо.
Спасибо.
Спасибо.
The end.
Спасибо.
Субтитры создавал DimaTorzok
Добавил субтитры DimaTorzok
Субтитры создал DimaTorzok




















Субтитры создал DimaTorzok




Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
Субтитры создал DimaTorzok
появляется как бы своя собственная цепочка вот то есть это тогда бы вот эта штука рыба
отпочковывается история которая была описана с итериум и эфириум классика она выглядела
следующим образом там в определенном блоке здесь он был там совершенку и там хак большой что тащили
там сок там десятка миллионов долларов и начиная с этого блока команда эфира она сказала как бы там
мы соответственно выпилим адреса этого хакера то есть просто добавим типы костыль что начиная с
такого-то блока вот это вот там не за баланс этого хакера равен нулю но я утрирую короче того что
каким способом ничего не митингирует хак сделать так как будто бы его и не было и попросили как бы
всех майнеров эфира как бы обновить этот софт и майнеры обновили из них большинство как бы
обновила этот софт и конечно пошла как бы пошла цепочка эфира может работать а другая часть
которая назвали себя эфириум классика не сказали нет мы ничего мы вот эти костыли впиливать не
будем фиксинг с хаком типа код и зло типа и взломали так взломали как бы все как бы мы
будем как бы
придерживаться не будем эти костыли впиливать и понятно что у тех которые перешли как бы те
которые были и т.х. для них как бы вот блок эти си как бы следующий он для них невалидный потому
что в нем как бы есть вот этот адрес то есть то есть он для вот этого как бы для эфира как
бы невалидные поэтому майнеры как бы и здесь и они по сути отпачковались начали стартовать
про PIP sono
realise
так
сейчас
вот
туда
moved
эфир
не
уверенно что
разработка
и
melt
если
сейчас
не
есть
так
reinstall
на
этот
уже дальше как бы зависит от того как бы как она изменилась то есть она будет она принимать от
других майнеров со старой версии как бы их блоки будет или не будет лишь насколько этот хардфорк
вот здесь вот как бы нормально там грамотно запрограммирован то есть это рассматривать
нужно именно с точки зрения не знаю там архитектуры что я не знаю там базы данных
который меняется например там схема данных предположим что у вас там не знаю там 10
серверов вас данных они работают как бы с одной и той же базы данных вы в этой базе
данных меняете там не знаю там название какой-нибудь колонки и у вас те кто софт
не обновили как бы они падают как бы а те кто обновили как бы они они совместные мне
не падает вот те которые упали можешь сказать они свой строят и бы хардфорк
этой базы в камуф которые конечно не
работает но те как бы тем не менее все равно как бы hard for вот из ну соответственно как раз вот
после обновления но поскольку мы чуть-чуть как вы посмотрели с вами как хардфорки происходит
по сути можно описать как бы как происходит атаки на блокчейна вот ну и над их смысле что означает
что блокчейн как бы перестал работать смотрите представьте что у меня есть блок вот я здесь как
бы там не знаю там у всех там по два блока и вот я предлагаю как бы свой вот этого третий блок и
в нем внутри есть определенная транзакция эта транзакция предположим заставляет ну давайте
просто для примера для примера короче пускай она берет и записывает куда-нибудь там вот в
нашу вот эту вот
табличка короче в которой там типа у вас там не знаю 100 эфира она записывает она дает васи как бы
рандомное число эфира там не знаю там плюс короче говоря 03 или там или 04 ну просто как бы
предположим такая транзакция существует и возможно как бы блокчейне что произойдет соответственно
этот блок он как бы
разойдется по другим валидатором они его скачают они возьмут вот эту транзакцию выполнят вот этот
вот рандом и запишут каждый запишет свою стоит на датэбэйс разные значения по одному как бы вася как
бы у него станет там 10 там и 1 у этого станет 10 и 3 у этого 10 6 там и так далее у всех как рандом
а сработает по разному затем что они будут сделать чтобы отnyt Fronk разрыhen clickdata заканчивать
сделать что они будут делать они после этого когда начнут настраивать над этим блоком как
бы следующий ему нужно будет из предыдущего взять state root то есть состояние как бы база данных
она у всех разная она у всех разная и получается как бы что как бы и хэш вот этого блока уже другой
то есть надо как бы настраивать другим ним и получится так и ситуация что все как бы начнут
строить свой собственный блокчейн свою собственную версию пела бог чейна это был такую вот такую там
еще одно если произойдет еще одна транзакция когда он опять раздвоиться постановам на 2
там над действие так и так далее так далее но выглядеть это будет очень просто просто
либо просто становится производство блоков вот или как бы там не знают а
майнер насчет манить блоки как бы сам в себя как бы один но на самом деле сам он это ну то есть
не потянет как бы никакой майнеру в одиночку как бы маленького к вот и поэтому как бы был
член остановится из этого вытекает такое самое как бы главное такое основное просто требования
к процессе лгут транзакции в членах транзакции в членах они процесса строго детерминированно
значит что это значит компьютер сайт строго детерминированно это означает что на одном и
том же им пути ваша функция у которых не знаю ваша программа грубо говоря исполняется порождает один
и только один output в любом на любой архитектуре на любом процессы
в любое время там дня и ночи то есть неважно как бы ну помимо импутов давать
уж соответственно если мы говорим о блокчейне да то там еще есть предыдущие данные блокчейна
блокчейн да это ну то есть там есть то как бы то что мы можем взять там из предыдущих
блоков внутри этой программы использовать ну да давайте так просто смотрите например
input n квадрат короче output это детерминированная функция
да хорошо а если например вот такая вот там не знаю там 10 плюс текущее время нет можно
вопрос дизайнерами имеется ввиду пью чисто ешь да нет нет нет как раз здесь кстати говоря
в в smart контрактах есть отдельный как бы пьюр это значит что она еще не обращается как бы никуда
она не читает никаких внешних данных как бы вопроса там не знаю там работает то есть пьюр функция эта
функция которая работает только со своими аргументами вот только с тем что вот здесь
находится все больше ничего не делает вот этот пьюр то есть чистая функция да да да это вот
smart контрактов у него прям есть модификатор который называется пьюр это там если вы считаете
не знаю квадратный корень или там не знаю там математик какую-то а если она лезет соответственно
куда-то там блокчейн ну например на предыдущие данные которые были записаны блокчейне ну например
ей нужно сделать например баланс там не знаю там баланс вася увеличить на 5 такая функция
будет детерминированная ну смотри такая функция будет да еще раз но будет ли функция который
увеличивает баланс вася на 5 ну да должна быть но при этом они чистят потому что она
это ходит ну а она где она действительно будет детерминированная потому что у нее есть уже как
бы до этого как бы вот это вот состояние четко зафиксированы то есть сколько ты
там у вас там на балансе это на работе будет всегда одним и тем и тем же способом и самое
главное она будет порождать тот же самый вот этот стоит div вот так вот как бы но она будет
порождать грубо говоря одни и те один и тот же набор изменений вот этих вот ключей значений то
есть там у вас и как бы будет там плюс 5 как бы этому вызывающую чем там комиссия так сейчас
пропал то есть
надеюсь установилась вот то есть как бы будет порождать один и тот же одно и то же изменения
в стейте в точности баланс увеличится на 5 там с кого-то там комиссии снимут и так далее но все
это на основании я еще раз как бы подчеркиваю на основании данных которые есть блокчейне то
есть никаких там внешних обращений быть не может в этих транзакциях ну и кстати текущее время ну то
есть Zero В�ы это действительно не детерминированный история но когда майнер собирает блок и вставляет к
него транзакцию которая берет как бы текущее время он же вставляет сюда timestamp поэтому эта штука в
принципе годится то есть конечно текущее время разумеется в контрактах есть но просто для всех
транзакций в одном блоке оно совершенно одинаково сюда берется время сюда берется время сюда берется
время и все это как бы время блока то есть никакого текущего времени так как нет никакого развития
времени там нет его получить нельзя вот это все из-за требования детерминизма какие еще
функции которые детерминизм нарушают можете вспомнить который на разных компах дадут
разные значения любые которые зависят от рандома ну хотя там и соседи одинаковый
тоже не факт но рандом да совершенно верно и здесь собственно пускай рандом вычисления
с помощью . могут зависеть от процесса системы вот прекрасное замечание и крайне важно вот такое
число на разных процессорах вам породит как бы разные бинарные образы то есть как бы с разной
точности будут проводиться вычисления и по-хорошему если мы будем прямо добавлять
в базу данных напрямую значение вычисленные на процессорах как бы разных архитектур они
будут бинарно разные и нам это не годится и поэтому блокчейнах операции с плавающей точкой
нативных из которые как бы берут результат процессора грубо говоря и напрямую его как
бы куда-то пихают как бы их нету блокчейнах по сути вообще нету как бы никакого операции с
плавающей точкой
на самом деле конечно же ну то есть понятно что как бы как это как бы нет когда как бы они есть
он в кошельке там что-то там с точкой как бы так далее но на самом деле во-первых есть либо
которые позволяют делать вычисления с плавающей точкой как бы вот как раз в детерминированном
варианте вот но блокчейнах все представляется целыми численно числами вот буквально как бы
то что ты будешь отправлять его в подходите только где-то еще полтора тысячи суток то есть
здесь вот такие есть все данные это вообще не просто численно численно walnut не цена
на все цены мало мне ничего мешать я statue статус это д Styrofoam или эфир как бы вы можете
прям сразу готовятся у вас будут просто 32 байта там или там на 256 бит и вот-вот вот вот у них вот
uint короче там беззнаковая целая длиной 256 бит это нативный тип данных для в общем-то для всех
блокчейнов 256 бит как бы размер он связан тоже с одной важной вещью то есть потому что все вот эти
вот вот это вот наша вся как бы база данных state database с ключами там не знаю с эфиром там и так
далее и так далее когда туда начинаешь добавлять дополнительные данные различные структуры там
какие то там еще что то то есть какие-то структурированные данные которые привязаны
к адресу владельца смарт-контракт с ними работает то все эти данные адресуются по хэшам то есть
грубо говоря не знаю хранилище грубо говоря контрактов она
организовано тоже какие были и все значения как бы которые адресуются не все адресуются по хэшу если
мы привыкли как бы что у нас в наших компьютерах там в обычных да у нас есть там указатель для
там сишный который ссылается на область там в памяти и там у нас там сколько-то бит как бы
находится и вот этот указатель как бы он такой там какой мы там линейный ну такой там 12 потом там не
стал 20 там ну и так далее то есть то в блокчейнах специально специально как раз сделано адресация
вот это вот все вот эти ссылки они являются хэшами и сделано это опять же за требования
детерминизма чтобы любая логика которая пошла там поменяла вот эту переменную поменяла вот
эту переменную поменяла вот эту вот переменную то есть сам код чтобы он тоже исполнялся полностью
детерминирован чтобы даже как бы оперативной памяти вот эти вот изменения они были они были
детерминированы ну что в smart контракт там собственные перемены сохраняются в этого
киева или вас данных и так далее вот то есть поэтому отсюда как раз выходит вот это вот
из детерминизма выходит истории как бы про то что все данные в блокчейнах они целочисленные
все операции как бы целочисленная
все остальное как бы делается при помощи целочисленных операций там не знаю там
приходит там блокчейн и мы сделали как бы крутой бог чей там со смарт-контрактами там
в транзакции можно там поместить там супер там не знаю там чего хочешь как бы написать а вот
здесь написать все что хочешь у нас контракт очень простые на джава скрипте пишется вот ну
и теперь представьте короче говоря у вас здесь как бы на джава скрипте да вы можете вы на самом
деле можете спокойно технически запрограммировать что у вас там не знаю там ваш валидатор взял
транзакцию здесь в каждой из них там джава скриптовый код взял как бы выполнил джава
скриптовый код накатил там что-то даже сделал но до терминизма вы здесь не получите то есть
у вас будет реально рассогласование то что у вас на одном компьютере он вам одно чем это считает
как бы на другом компьютере тоже транзакциями сработает какими по-другому на одном было мало
памяти он там
я не знаю там много там выделял скрипел выполнялся 10 секунд и транзакция здесь она выполнялась там
за 0 1 секунды и так далее то есть все вот это вот как бы блокчейнах очень жестко регламентирована
то есть под транзакциями всегда стоит какая-то виртуальная машина которая похожа на gm ну то
есть на джем которые вот эти вот транзакции исполняют я вам сейчас рисую вот эту
то что вася как бы петь и там не знаю там 10 как бы эфира переправлю переправляет но мы-то
конечно будем заниматься контрактами которые будут очень подробно там сильно подробнее как
бы следующая лекция вы уже можете как бы заранее готовится что здесь конечно не 10 эфиры передается
а на самом деле просто вызывается под причем какой-то может быть достаточно значимый под
какой-то там серьезный который там из одного баланса заминусует на другой добавит кому-то на
числе проценты заплатит короче там не знаю там фито майнеру и так далее так далее вы и может сделать
там 10 раз как бы и там в сложных различных комбинациях математику посчитать какой-то то
есть этот серьезный блокчейн и которые со смарт-контрактами они про перекладывание
как бы циферок ну и могу сказать да что получили разработка это ну я уже говорил до что биткоина там
мало вот потому что а эфир это много потому что по факту и солидите ну и соли точнее не солидите а
именно то что у него под капотом его эм эфириум виртуал машин который исполняет расход который
компилится на солите он уже он стал таким как бы стандартом в индустрии которые реализуются
во всех крупных блокчейнах то есть есть там блокчейн и поле только dot который работает
так вот называется мун пил вы с ним работаете точно так же как с эфиром вот есть там не знаю
это сколько да там в салоне короче есть не он проект такой который делает там прокси который
тоже делает работу как все время и здесь как бы очень крутая и культура разработки много best
practice то есть здесь уже как бы сложилось за много лет очень большое как бы комьюнити
и в общем под эфир очень очень приятно разрабатывать на самом деле очень много все
сделано вот это значит то что касается детерминизма исполнения вот поэтому когда вам говорят как бы у
нас там блокчейне смарт-контракты на питоне вот на самом деле надо интересоваться скорее
как бы такая виртуальная машина исполняет потому что как бы действительно нужен жесткий детерминизм
еще одна история как бы блокчейна крайне важны для процесс для понимания как бы процессинга
транзакций это ограничение на исполнение транзакций может подходим как бы в этой
лекции уже потихонечку как бы завершение смотрите я майнер у меня есть требования по консенсусу что
я должен там произвести там следующий блок там в течение короче не знаю там 10 следующих секунд
вот ну просто там в разных консенсусах там разным там валидатором назначаются временные слоты ты типа
с нулевой секунды до 10 произведи блок ты там тип с 11 до 20 всего у нас там шестеро и так вот там
каждую минуту это там в одном виде консенсусов биткойне короче говоря надо там типа чем быстрее
тем лучше это и так далее теперь представьте с этими моими волшебными транзакциями которые я
написал то есть которые внутри там целую там типа пачку кода исполняет там что-то там делает пересылает
вот если вот в этой вот транзакции будет наш любимый wild true ну то есть какой-то программный
код как бы который зациклился или просто который пожирает как бы кучу ресурсов в чем в этом случае
делать соответственно майнер как бы исполняет вот эту вот программу начинает как бы ее крутить
и сеть стала как бы все кто хотят как бы произвести этот блок они все как бы зависли понятно что на
на транзакции должно быть применено ограничение какое-то там ну вот если прям совсем по тупому
ну давайте короче сделаем что она должна исполняться не дольше чем 0 там 001 могу
сказать что на низком уровне вот эти вот ограничения типа по времени исполнения программы они очень хреново реализуются
на самом деле очень неудобно как бы есть очень много как бы на всяких вещей которые как бы в
точности чтобы вот этому соответствовать и не попасть как бы никакую атаку эксплойтейшн вот
этой штуки это нереально еще хотелось бы вообще как можно выброс да да да а вот ограничение по
времени они разве не делают не дискриминированную то есть на одной машине он успел он такой не
успела ну нет если этот блок был принят вот это ограничил по времени вот я да я потихонечку к
этому иду ну то есть как оказалось на самом деле как бы подход по времени он не особо как бы хорош
во первых его трудно запробовать вот во вторых как бы тоже компьютер это разная да и скорости
и скорости разные и поэтому как бы одного компьютера это типа 001 а у другого 01
и вообще по-хорошему то ведь майнер как бы процессе для него представьте вот у этой
транзакции я прям буду рисовать трассу представьте что каждый той точечка это ассемблер на инструкция
вот прям машины инструкции который исполняет процессор а у этого трасса вот такая вот
коротенькая а это вообще эфир перевод переводит там типа два баланса обновил как бы все и гуляй
вася и по-хорошему как бы майнеру бы надо бы брать деньги за каждую вот из вот этих вот точек
то есть как бы кто написал большую программу как бы с того много берем денег кто написал
что-то коротенькое как бы то берем не берем меньше денег вот я и соответственно из этого
родилась концепция эфирная газа мы тоже про нее будем там подробно подробно говорить вот
там прям очень часто будем к этой штуки обращаться по сути стран транзакция ну транзакция в эфире и
это набор обходов то есть набор прямо инструкции машины там не знаю там сложил там чем сложить
запушить на стек запушить на стек перемножить если как бы получился ноль там типа их то сделать там
джамп но девочкам кто из вас не знаю там микроконтроллеры прогал можете вспоминать
как вы здесь до smart контракты в общем-то ну виртуальная машина они так и работают его и
это по сути такой микро микроконтроллер как бы стандартный с памятью со счетчиком команд короче
со стеком там с выделениями памяти и так далее так далее вот и соответственно идея как бы газа
она была в том чтобы просто присвоить каждой из этих инструкций свою цену то есть там от стоит
там не знаю 3 push стоит 2 умножение стоит 10 там еще там что-нибудь запись в киев в киеве любого
данных нового значения что у вас стало 8 как бы стоит там 20000 20000 попугаев или там как
угодно то есть это условные очки трудоемкости исполнения данной инструкции какие-то попроще
да там арифметика загнал в два регистра как бы выполнил все здорово как бы push на стек стек
штука легковесная как бы операции с ней должны быть дешевые а и в.м. это стек basic основаны на стыке
машина запись в сторож это по сути за запись на диск самый тяжелый самый медленный кошмарной
операции как бы она стоит прям вот дофига ну и так далее то есть мы еще все эти мы цены как
бы эти обсудим и как это все оптимизируется обсудим но но как бы то что я хочу сказать
что в блокчейнах оплачивается каждый квант буквально исполнение которые потратили потратили
то майнера валидаторы никто никому не доверяет то есть никто никому бесплатно ничего не делает
то есть никаких бесплатных транзакций вообще не существует блокчейна вот там любят там не
знаю корпоративный был член танк рассказывать или там приходить короче говорить что у нас там
бесплатные транзакции бесплатные транзакции это означает что вы можете бесплатно набить
блок короче всяким трэшем и по сути заспамить просто весь блокчейн
Там, не знаю, приходит какой-нибудь проект и говорит, у нас бесплатные транзакции.
Мы такие, да ладно.
Он говорит, ну вот у нас человек заморозил токены свои на балансе,
у него теперь там ноль, он там 10 тысяч токенов заморозил,
и у него теперь бесплатные транзакции.
Мы говорим, ну отлично, короче, вот у нас два чувака заморозили по 10 тысяч токенов
и друг другу кидают транзакции, пожалуйста, бесплатно,
как бы все блоки забиты, как бы мусором, соответственно, блокчейн не работает.
То есть все оплачивается обязательно, как бы, то есть ни один майнер или валидатор
бесплатно вычислительные ресурсы не предоставляет.
При этом как бы диск дороже, процессор, память и так далее.
Есть и другие модели оценки ресурсов, и чтобы обратить на них внимание ваше,
но это уже немножко из области высоконагруженных приложений,
да, вот.
У вас, когда какой-то работает там на компьютере, там, демон, не знаю, ваш веб-сервер,
там, база данных, вдруг она начала по производительности всасывать,
вы, значит, бежите в мониторинг, начинаете, значит, смотреть,
что на самом деле происходит, и, по сути, вы должны всегда помнить о четырех ресурсах.
Значит, первый ресурс – это процессор.
То есть вы прибегаете на компьютер, как бы смотрите, у вас там, типа,
какой-нибудь load average, загрузка процессора выросла, стоит там,
типа, в 100%, вот, случилось это вчера, как бы, и вы думаете, что произошло,
на самом деле, там, кто-то выкатил обновление, которое, не знаю, там, раз в секунду,
там, тысячу раз в секунду проверяет электронную подпись, например,
или там шифрование какое-нибудь, или математические операции,
или там работа с индексами в базе данных, то есть у вас, как бы, процессор потек.
Вот, вы начинаете разбираться, то есть это, значит, первая история.
То есть как заспамить при помощи процессора?
Там, не знаю, блокчейн или распределенную систему заставить, как бы, в своем контракте,
вот здесь вот выполнять какую-то сложную математику.
Ну, то есть что-то там прям, то, что будет поедать, как бы, процессором.
Очень серьезно вот эти возведения там степени, там, перемножения больших чисел и так далее.
Следующий ресурс – это у нас, давайте я RAM напишу, ну, давайте, наверное, memory.
Это тоже всем из вас, наверное, известно, кто работал.
Свои приложения, вы приходите на работу, менеджер говорит, у нас все, как бы, тормозит.
Вы смотрите, у вас, как бы, все, вы добрались, как бы, у вас память утекла, как бы, все, вы ушли, там, машина ушла в свап, все упало, как бы, все плохо.
Значит, ну, тоже, как бы, там, выкатили какое-нибудь обновление, там, не знаю, которое там в памяти разворачивает массив из миллиона элементов.
И таких-то, и в процессах, как бы, таких массивов дофига.
Соответственно, внутри вот этого кода, как бы, то есть можно...
Можно сделать цикл, который, как бы, постоянно, там, пишет в память, занимает, занимает оперативку, занимает, занимает, там, ее выделяет, как бы, немереное количество оперативки, как бы, и, соответственно, пожирает память.
За это надо тоже считать деньги, за CPU, за memory.
Следующая штука у нас – storage.
Да, это, ну, процессор input-output, то есть общение с внешними устройствами.
И тоже вы в своих веб-приложениях увидите, что у меня там все, диск, как бы, встал.
Ну, началось немереное количество записей, чтений, и все, как бы, диск не успевает, как бы, тормозит всю остальную систему.
Все остальные его ждут, там, процессор кулит, память кулит, как бы, а диск, значит, за всех он дувается.
То есть за него обязательно платите, и в блокчейне это самый дорогой ресурс, то есть storage.
Почему? Потому что то, что вы сохранили, как бы, в блокчейне, оно тиражируется на тысячи нод.
Все это, все, теперь весь мир, как бы, будет ваш эти данные.
Постоянно копировать, постоянно дублировать, хранить, как бы, поэтому он стоит крайне дорого.
Ну и четвертый ресурс, про который часто забывают, нетворк, то есть сеть.
У вас все, как бы, с сервисом хорошо, как бы, но только на сетевом интерфейсе, как бы, немереное количество пакетов.
Вас там дедосит, например, там напал кто-то на ваш сайт, или там качает кто-то там с вас, как бы, там немеренно, там, не знаю, там, фоточек каких-нибудь.
То есть это, в общем-то, тоже один из ресурсов.
И для блокчейнов, как бы, нетворк – это, по сути, размер транзакции.
Ну, то есть входные данные, которые здесь используются, которые были в транзакции, чтобы, как бы, нельзя было, там, такую транзакцию огромную, там, не знаю, посылать,
или, там, миллионами транзакций заспамить, как бы, ноду, чтобы она их не получала.
За все это, как бы, надо брать деньги, и, соответственно, в концепции газа все вот эти вот инструкции, они взвешены.
По сути, как бы, по цене и с дополнительными всякими плюшками, типа, что если ты выделяешь память, то тебе придется заплатить за каждый 32-байтный слот, например, за каждый новый, как бы, 32-байтный слот.
Знаете, похоже на страничную организацию памяти в операционных системах, вот это выделение слотов.
Или если кто читал, как работают всякие малаки, там, все, все, все плюс-плюс.
Выделение памяти.
С такими, как бы, чанками.
Здесь тоже штука, как бы, достаточно похожая и близкая к этому.
Вот.
Ну, и, соответственно, там, память, понятно, там, сторич тоже, как бы, вот этими кусочками, как бы, своими здесь оценивается деньгами.
Вот.
Ну, сеть, в общем-то, тоже.
Вот.
Сеть, это оценивается размер, как бы, данных, которые пришли к транзакциям.
Вот.
Я правильно понимаю, что смарт-контракты тогда в качестве транзакций,
которые отправляются, которые майнеры исполняют?
Ну, на самом деле, смарт-контракт, как бы, код заранее размещается в блокчейне,
у него тоже, как бы, появляется адрес,
а, как бы, пользователь отправляет вызов функции этого контракта.
Он говорит, хочу вызвать функцию вот в этом контракте,
такую-то, такую-то, с такими-то параметрами.
Вот.
А как другие ноды валидируют, что майнер правильно его исполнил?
Они точно так же.
Как каждая нода его исполняет?
Каждая нода его исполняет.
Именно так.
То есть каждая нода исполняет, как бы, вот эту вот транзакцию.
Именно поэтому смарт-контракты, они очень небольшие,
они очень оптимизированные, как бы,
там нету никаких там, типа, больших циклов,
там нет, как бы, ничего, что работало.
То есть там вся логика, она вывернута, как бы, такая, как бы, на пользователей.
Там все действия делают пользователи.
Вот.
То есть именно так, как бы, то есть каждый транзакт,
то есть то что я говорил как бы то что с васи как бы списали 10 эфиры как бы опять и как бы
добавили 10 эфира на самом деле это же внутри тоже программа то есть эта программа которая
сначала проверит что у вас и баланс больше десяти и упадет если как бы баланс меньше затем как бы
она должна записать в storage затем она должна как бы записать петь и storage затем там но и
закончить работу обновив соответственно там стоит ру то есть это уже такая как бы нехилой работа вот
и собственно виталик то как раз и предложил он где-то давайте вот эту штуку пускай программисты
пишут то что мы говорим про газ процент операции это чтобы оценить сколько майнера
получает
за выполнение да да именно ну то есть валидаторы просто так будет исполнить откат или как нет нет
нет но и нет это газ это просто подход к оценке да теперь мы грубо говоря знаем у нас есть какой-то
код вот это вот функция да там ну мир большой контракт на мы вызываем в своей транзакции там
не знаю там вася обращается к контракту и вызывает функцию не знаю как там
функция
вызывает там свою пойдет там электронную подпись отправляет ее эта функция отправляется в контракт
начинает исполняться вот при этом как бы тратится газ есть какой-то верхний лимит то есть если как
бы васи упрется там в 10 миллионов газа он его там потратит то транзакция не будет выполнена
вот она упадет как бы с ошибкой а аутов газ и при этом пока она исполняется здесь ведется счетчик
плюс 2 плюс 10 плюс 20000 и в результате как бы у него получается количество газа который он потратил
на вот это исполнение этой транзакции вот столько с него как бы из пишет майнер просто в эфире сделан
так что комиссия она называется газ прайс вот это как бы следующая история то что каждая единичка газа
ставите сами я хочу вызвать транзакцию которая потратит 21 тысячу газа и цена газа там не знаю
там ноль там типа ноль ноль ноль ноль ноль а там один эфира и манер ее исполняет умножает 21 год
на это и столько вам придется заплатить нового майнера заплатим а потом другие но даже им нужно
проверить что майнер крик не спал на программу они тоже будут и надо не за это ничего не получать а
не втоль да да ну конечно нет они просто валидируют да как бы они просто когда перепроверяют
они точно также до накатывают каждую из транзакций исполняют по сути все все смарт-контракты на 10
здесь так не очень понятная концепция нет нет нет ну как ну вот вы получили блок вам его нужно
проверить вот у вас есть транзакция которую вы просто выполняете вот этот вот код понимаете как
бы что этот код потратил 20
тысячу газа что пользователь в транзакции указал типа 001 как бы эфира посчитали там комиссию ваш
комиссия как бы за эту транзакцию там составила там типа ноль там что-то там 00 21 эфира и все
ее приплюсовали как бы к награде мая майнеру который за блок произвел пошли следующую
транзакцию следующий разок 100 же тоже выполняет определенный код вы его выполняете проверяете
то что вы действительно было столько газа потрачено сколько ему и у майнера как бы
берете ту цену как бы транзакции перемножайте получаете комиссию 2 транзакция вот так вот
все как бы друг друга перепроверяют если статические анализаторы кода которые могут
газ посчитать когда конечно мол ну конечно есть
и газ как бы подсчитывается достаточно там просто там в куче как бы это мы еды и как бы
то есть здесь единственного что важно как бы что вы не всегда можете предсказать количество газа
заранее не зная состояние контракта потому что здесь же программа как бы она может пойти как
бы его вход этой ветке а в обход этой ветке она может пойти если например какая-то другая
транзакция в то в том же самом контракте что-то изменила то есть как бы здесь и не очень просто
как внутри с одной стороны как бы просто другой страны очень-то просто то есть есть да какой то
с рукава здесь логических веток как бы этой программы по такому количеству путей как бы
она может пойти поэтому отцы газа прогассов не волнуйтесь мы прямо на самом деле очень глубоко
штука как бы считается и от чего он зависит вот но что нам важно как бы на этой лекции это то что
любая любая транзакция в блокчейне оплачивается и оплачивается за ее именно сложность исполнения
вот то есть просто как бы деньги которые доваливаются на транзакцию сверху типа в
качестве бонуса как бы это только бонус вот но как бы все базовые штуки обязаны быть оплачена
иначе иначе сеть будет просто заспамлено вот так вопрос каждый раз выплачивается манеру который
сделал смарт-контракт нет майнер не делает смарт-контракт смарт-контракт делается в
пользователям
майнер исполняет код этого смарт-контракта и берет деньги за газ потраченный на вот это
исполнение вот так вот то есть манер исполняет чужую программу и при этом как бы подсчитывать
сколько он потратил на этом процессора памяти все это дело суммирует получает вот эти вот условные
единицы типа газ умножает на цену которую ему дал пользователь сколько я готов заплатить за газ и
собственно вот абсолютное значение вот этой вот комиссия то есть смотрите у нас есть один
смарт-контракт
например и его вызывает 10 пользователей значит там например ну какой-нибудь там там вот там
там смарт-контракт Короче говоря у него есть какая-то функция вот это там f1 которая чем там
делает где там кем деньги причисляет что им забирает какой-нибудь первый пользователь вызывает
она исполняется он там насчитал там не знаю там 40 тысяч газа и сказал хочу платить как бы там
01 эфира за каждый газ ну и как бы заплатил соответственно такую комиссию второй пользователь
тоже вызывает эту функцию f1 вот он тоже потратит 40 40 к газа но хочет заплатить за
него меньше там типа 0 там типа 05 там эфира как бы я хочу заплатить за газ и вот это вот
произведение является как бы их по сути как бы комиссиями и майнер будет выбирать между
этими двумя как бы транзакциями и там наверное решит как бы выполнить сначала вот этого чувака
потому что от него больше получится потом вот этого там есть как бы еще там предварительной
оценкой газы и так далее но я повторяю что это сильно зависит от порядка транзакций в блоке
потому что может быть что случится типа сначала пришел первый пользователь изменил здесь какую
переменную и из-за этой переменной второй пользователь когда сюда пришел к но он как
бы посмотрел сюда на эту переменную как бы из-за нее как бы ему пришлось пойти как бы
исполнять другую ветку кода а здесь например получилось не 40 газа тома 80 кило газа вот
то есть здесь все
вот на усмотрение как бы программа но программистов смарт-контракты размещают пользователя то есть я
моя пишу в смарт-контракт я его диплою в эфир вот мы прямо это будем делать как бы много раз а и он
начинает работать и пользователи могут в этот контракт соответственно слать транзакции а манеры
берут с них деньги за исполнение кода вот этого смарт-контракта ответил там часть вопрос можно
давайте еще посмотрим так но тем не менее награду за предложенный блок выдают только валидатору
предложившим эти этот блок а валидаторы кто перепроверять ничего не получают да ничего
не получают то есть награды за блок отправляется валидатору просто как бы в консенсусах там сделано
так что там есть такое как бы расписание как бы работы валидаторов так называемый там скидил зависит
от алгоритмов и например там первый валидатор получил здесь награду за блок как бы в следующем
слоте как бы 2 получит среднему все честно будет да да да да да при этом если кто-то из них как
косячит там пропустил свой слот дата эта информация в общении она остается ну то есть мы можем по
предыдущим блоком понять типа что вот здесь вот он должен был работать как бы ну кто ты на самом
деле кто-то из этой группы то здесь кэш и группы там валидаторов
у нас же все byzantin фолтолеранс то есть мы не можем оставить как бы сеть не рабочая он пропустил
как бы его наказывают потом там деньгами там забирают у него там часть там не знаю вот он
стейка там еще что там и так далее то есть это мы будем на консенсусах обсуждать там довольно
интересно вот так туда как бы награду за вот получает только тот кто его произвел остальные
перепроверяют но и в принципе это тоже выгодно потому что если они не будут делать и сеть по
идет в разнос то и они сами не смогут как бы производить блоки главная идея как бы вот
этого пруфов стоит она была выглядела так следующим образом пруфов стейк что кому выгоднее всего в
блокчейне чтобы он был честным что в нем не было хаков как бы чтобы там все блоки правильно
процессоре процессе лись выгоднее всего это тем у кого больше всего токенов этого блокчейна вот у
вы больше всего крипты этого блокчейна они сильнее всего пострадают как бы если в нем
будут найдены какие-то проблемы то есть они самые серьезные а поэтому как бы раз как бы они от этого
сильнее пострадают как бы им можно просто доверить вот это вот там создание блоков валидацию там и
так далее и от пруфов стыку но он об этом вы в эфире там заморозили 32 эфира там сейчас не
знаю под 50 тысяч долларов заморозили как бы включили компьютер и следить чтобы он как бы не
когда у вас не вырубался был стабильно в нужное время как бы он там производил блоки валидировал
остальные вы блоки и он получает награду кстати подождите вы написали награду за блок награду за
блок до получает как бы получает калидатор этого блока а вторые которые ставят аттестации они тоже
то есть им тоже там какая-то копеечка падает интересно спасибо да не на самом деле на самом
деле там как бы ну там очень прикольные модели такие интересные как бы сбалансированные там в
пруфов стыке сам наверное если вам интересно наверное самый такой ну как по мне продуманный
как бы это ncos который в polkadot по нему есть там документ там интересный можно будет экономику
то что сейчас в эфире 20 как бы вот эти его 100000 валидаторов из которых выбираются под
группы которые там определенные там слоты времени должны печатать эти блоки регулировать тоже очень
красивая схема очень грамотно они долго делали вот понятно чего долго делали остальные то стартовали
с пруфов стейк с голым как бы блокчейном у эфира на горбу извините 200 миллиардов долларов и надо
переехать бесшовно как бы до чтобы ни у кого ничего не
ничего не сломалось вот они это его что-то сделали за что большой респект и уважуха
вот еще раз а если смарт-контракте какой-то некорректный неверный код до тоже то тоже такой
как бы важный вопрос значит во первых как бы смотрите любой смарт-контракт заканчивается
двумя кстати говоря именно поэтому я же говорил вам не раз что
блокчейн страна идиотских названий как бы да там название кошелек там или еще что-то смарт-контракт
значит этот код назвали контрактом потому что в биткоине похожий код тоже из машинных инструкций
он возвращает либо true либо false если true то как бы bitcoin из данного адреса тратится целиком
вычеркивается если false как бы то ничего не происходит смарт-контракты работают похожим же
так закончил свое исполнение функция и сделал окей то тогда вся вся запись как бы встает дебил
как бы она фиксируется комит ну то есть все черно здесь на меняла как бы там не все балансы там не
знаю там вася там плюс 5 минус там так далее все это записалось и по итогам этой транзакции
будет правда еще стоит труд то есть стоит изменился а в случае реверта как в случае с
или как бы отката транзакций будет по сути rollback то есть так как будто бы этот контракт никогда и
не вызывался то есть никаких изменений в сторону же не будет но при этом смотрите мы ведь до этого
реверта можем довольно долго идти дачу там гоняли по циклу там проверяли кому-то на что-то пытались
деньги записать там и так далее а потом вам все как бы реверт отменилась как бы все там
какое-то условие не сработало но майнер то потратил вычислительные ресурсы
и поэтому в эфире это же во всех нормальных его блокчейнах за это придется тоже заплатить здесь
тоже есть газ и поэтому здесь в эфире платится даже за упавшую транзакцию если не хватит на
счету мы же не знаем заранее сколько платить а тогда как бы ну майнер как бы берет вашу трансу
как бы он ее эмулирует накатывает ее на состояние как бы блока если вида что баланса меньше чем как
просто ее это свидание я не я не возьму вот а он будет выполнять ее пока будет хватать баланса или
он сразу проверяет там же мы не знаем по веткам но вот как раз как раз вот эта вот часть это как
раз то чем отличаются разные имплементации not эфира какие-то честно как бы все накатывают
какие-то делают там часть проверок предварительных какие-то опираются на предыдущие как бы транзакции
в этот смарт-контракт понятно да что вы описали такой может сказать такой вектор атаки то есть я
держу маленькую маленькую копеечку у себя как бы а майнеру все время кидаю как бы транзакцию
который тратит дофига газа они ее на нее тратит ресурсы а потом типа просто не включает блок и
получается что я задохнул вот но как раз вот именно в этом месте раз разные имплементации отличаются
что будет не давал true очень просто как бывал true это у вас как бы джамп ну условный как бы
джамп на но на какую-то там метку и потом а здесь как бы пусто но вот этот джамп он тоже что он
стоит газа там 5 газа на это бы за него заплатить программу должна закончить выполняться она не
закончат как долго он будет он будет пока как бы не будет
достигнут hard лимит газа hard лимит но имеется там какой там там 10 10 миллионов газа то есть он
сделает вам там сколько там 200 тысяч итераций как бы и остановится скажет чувак out of gas то есть
он вместо либо напишет а там с ошибкой как бы авто газ как бы закончится газ вот а так как бы
каждая операция будет стоить денег ну да и вайлд true ему придется как бы да прокрутить добро
вот тут вы как бы ничего не попишет нет я так понимаю что как раз здесь то возможно много
много как бы разных подходов вот можно оценить соответственно и стоимость функции заранее как
бы примерно вот и прикинуть как бы баланс отправляющего и ну ну как бы сами программисты
понимаете что можно как бы дело оптимизировать типа если там совсем копье как бы то не проверять
если примерно там на границе какие-то значения, но это один из векторов атаки.
Так, это значит, что касается окей, реверта, детерминизма, ожидания финализации, ну да,
наверное, смотрите, то есть вот это вот слово финализация, штука как бы довольно важная,
она как она используется, я уже там говорил про что в майнинге, там по сути как бы блок,
а вот его закрыли вот этим красивым как бы хэшом, я глядя на этот хэш, верю, что как бы на этот хэш
было потрачено там электричество, сколько там город потребляет за несколько дней,
да, да, да, да.
То есть там кучу там тераватт, как бы чтобы просто найти вот этот красивый хэш, и поэтому как бы я,
в принципе, уже уверен, что моя транзакция там, она уже не будет откачана, ну может быть,
появится там какой-то конкурент, и моя транзакция, ну все равно с большой вероятностью попадет и в
этот блок, а если уже прошло там, типа сейчас считается в биткоине, там типа шесть блоков,
если прошло назад, то все, этот блок считается, что все, прям он супер надежный, все, вот транзакция
уже не корректируется.
Тогда не будет откачано, вот, но опять же это только вероятность, то есть математическая,
а вот та, которая детерминированная финальность, которая в Proof of Stake как раз используется,
там история такая, что если блок является финализированным, то есть вот он собрал вот
эти вот больше двух третей аттестации от валидаторов, он уже не откатывается вообще
никогда, то есть просто, то есть неважно какая там появится цепочка, более тяжелая, более,
еще там какая-то, как бы, то есть все, эта штука уже, как бы, она не откатывается никогда,
то есть после нее, как бы, блокчейн идет строго сюда, и поэтому как финализация штука важная,
с той точки зрения, что вы гарантированно со 100% вероятностью знаете, что вашу транзакцию включили
в блок, она уже не будет выпилена из блокчейна никогда, вот, и поэтому на Proof of Stake сетях,
там проще строить, там, не знаю, там, мосты, которые там из ровных блокчейнов активы, там,
так далее, им нужен обязательно вот этот факт, типа, что все, вот, в этой сети все железно,
прямо вот 100%, как бы, не будет, как бы, отката цепочки, вот, как бы, вот это понятие финализации,
как бы, тоже довольно-таки важное. Еще что, наверное, такое из общих, из общей истории,
как бы, там, крипты, ну, давайте, да, сначала для прикола, не знаю, там, покажу, как, ну,
это вообще очень просто этим пользоваться, у меня есть вот эта, вот эта, вот эта, вот эта, вот эта,
вот этот кошелек, это, по сути, расширение в браузере, на самом деле, оно просто, у меня есть
тестовый эфир, тестовая сеть, вы в ней тоже, кстати, будете тоже много работать, вот,
Герли она называется, их тут несколько, это такой игрушечный эфир, ну, который подняли
разработчики, вы можете попросить, как бы, себе, там, тестовый эфир и, там, поиграться с ними,
вот это вот мой адрес, он так выглядит, как бы, ну, обычно, как бы, на таких ликбезах это показывают,
вот, и вот так я отправляю крипту, не знаю, там, с того адреса на адрес, то есть я думаю,
что все это вы можете, там, не знаю, в миллионе туториалов найти, так, давайте сейчас отправить
между моими счетами куда-нибудь на другой тест, отправлю какое-то количество, там, в Берли эфира,
вот, в этот момент, смотрите, моя транзакция сформирована, здесь написано примерная плата за
газ, то есть, вот столько я буду за нее заплачу, как бы, эфира, значит, сейчас где-то подробнее,
может, что-нибудь есть, так, ну, здесь все побольше для юзеров, ладно, сейчас отправим,
и по самой транзакции посмотрим, вот, в этот момент, когда я нажал подтвердить,
метамаск достал мой приватный ключ, поставил, поставил электронную подпись, вот, она пошла,
как бы, транзакция, она еще пендинг, то есть, она еще висит в транзакцион-пул, ее еще не включили
в блок, то есть, майнеры, типа, еще пока ее только видят, эту транзакцию, но при этом, смотрите,
ну, она стоит 21 тысячу газа, вот, здесь, как бы, она гвоздями прибита, потому что отправка эфира,
это просто константа 21 тысяча газа, вот, там, вот эта вот цена, это сколько я готов заплатить за газ,
это gasprice, то есть, сколько, как бы, мой кошелек поставил, какую цену за один газ, вот, и, а, ну,
вот, ее включили, эту транзакцию включили, соответственно, вот этот вот блок, 763-91-17,
в котором было еще 116, там, транзакций.
Что-то еще интересного такого как бы показать.
Ну, вы все равно здесь еще накликаетесь сюда.
Включили меня на позицию 49 в блоке.
У моего аккаунта нонс 9, то есть я уже там 8 или 9 транзакций с него отправил.
Вот. И вместе с этой транзакцией был отправлен 001 эфира.
Вот они были переданы на мой другой адрес.
Это проводник блоков, который, по сути, показывает всю информацию о блоках и транзакциях.
В нем довольно часто приходится сидеть, особенно если разбираешься с платежами, взаимодействием с контрактами и так далее.
А вторая история – это вот этот кошелек.
И когда я вам говорил в тот раз, почему это, скажем, поудобнее банковских приложений,
ну, я вот с этой вот штукой могу ходить.
В сотню разных финансовых проектов.
То есть, там, не знаю, поменять, там, не знаю, эфир на доллары, доллары, там, на еще какие-нибудь, там, токены.
Положить их, там, не знаю, под залог или, там, положить, там, типа, в банк так, что другие, как бы, люди будут брать их в долг, там, за проценты и так далее.
То есть здесь очень много всего.
И все это делается при помощи вот этого расширения, вообще без логинов, без регистрации, вообще без всего.
Это крайне удобно.
Это прям вообще, как бы, быстро и, честно говоря, там, ну, не знаю, в Тинькофф лень логиниться, очень сложно.
Какие-то там коды, короче, что-то еще, там, какие-то непонятные, в общем, все.
Извините.
А какой смысл майнерам майнить блоки в тестовой сети?
А это разработчики поднимают, как бы, потому что я могу…
А, ну, это просто…
Да-да-да.
Это для работы, собственно, для обучения, для работы очень удобно.
Это выкладывать сначала в тестовую сеть, в тестовой сети, как бы, на тестовом эфире все отработать.
Можно поднять, короче, прям целый, ну, прям весь сайт полноценный, короче, со всем вообще функционалом полностью, как бы.
Он просто будет, как бы, в тестовой сети.
А в боевую сеть потом просто скопировать контракты, и все, и, в общем-то, все, как бы, работает.
Насколько можно доверять этому расширению?
Ну, как бы, много народу, как бы, доверять.
Если не доверяете, как бы, можно там двумя строчками на питоне, как бы, пожалуйста, сами себе сгенерируйте, как бы, адреса.
Вы это и будете делать.
Вот.
Сами себе сделайте адреса, подпишите транзакцию, да, отправьте.
Хотите питоном, хотите JS, как бы, хотите, там, Java, там, чем угодно, как бы.
Вот.
То есть здесь, как бы, все просто.
Он просто, как бы, облегчает вам работу, а так вы можете делать и с консоли все.
А если вообще паранойя, как бы, то можно…
Аппаратный кошелек сделать.
Вот.
Ну, в общем, грубо говоря, с тем, как переводить, там, не знаю, там, эфир, как бы, поиск кошельками, это вы без меня как-нибудь изучайте, потому что здесь материалов, на самом деле, реально дофига.
Вот.
Так.
Что еще, наверное, там интересное?
Ну, наверное, важно еще, как бы, заранее, да, сказать, что у контракта…
У него есть собственный адрес, и, ну, то есть, когда я говорю, мы отправляем транзакцию в контракт, на самом деле, вот в этой нашей State Database, где у нас был, там, у Васи было 10 эфира, у него был nonce, там, не знаю, там, 9, то после того, как Вася выполнил, ну, Вася или кто-то другой выполнил специальную транзакцию create-контракт, создать контракт, здесь же…
Появился контракт, адрес его контракта, у которого тоже есть баланс эфира, то есть, может быть, нулевой, как бы, но, грубо говоря, контракт тоже может иметь, как бы, эфир на своем балансе.
У него тоже есть nonce, потому что контракт может создавать другие контракты, и это будет увеличивать nonce, но еще у него есть, соответственно, здесь поле, которое называется код, и вот здесь как раз находится, вот…
В бинарном виде, как бы, все, вот, по сути, байт-код вот этого контракта вместе с его функциями. Сам контракт очень похож на C++-ный объект, на C++-ные классы, там используются объектно-ориентированные программирования, там, наследование, как бы, там, на самом деле, к плюсам довольно-таки близко, даже не к плюсам, к C, наверное, как бы, даже ближе.
И еще у этого контракта, что, как бы, важно, у него тоже есть свой собственный storage.
Хранилище, как бы, в которое он входит, как бы, и может записывать.
И все это, конечно, тоже попадает вот в тот самый, как бы, в state root, то есть это тоже считается данными блокчейна, которые тоже обновляются, исполняются, все делается в консенсусе, то есть целиком.
То есть, несмотря на то, что здесь какой-то код, какое-то там хранилище, вроде уже, как бы, вещи такие, которые на разных серверах, как бы, разные, здесь это не так.
То есть здесь это прям такая единая, очень структура.
Прогая такая, монолитная, как бы, штука, вот, которая обновляется в консенсусе.
А код контракта можно менять, да?
Нет, код контракта менять нельзя.
Вот, код контракта менять нельзя, как бы, есть, конечно, паттерны, и мы будем их использовать, как бы, которые позволяют, как бы, менять там, ну, делать другую версию контракта, там, деплоить, соответственно, переключаться на нее.
И, как бы, технически получается, что мы меняем, как бы, сам код контракта для использования.
страны но так то нет как бы однажды задеплоенный контракт как бы все он как бы гвоздями прибит
именно собственно почему как бы такой бунт и как бы айсиота бы вот этого краудфандинга как
бы на эфире там все все видят и все видят что у тебя там в краудфандинге нету функции забрать
все деньги как бы избежать вот ну то есть потому что ее нету как бы контракт публичный тоже также
поэтому как бы дефай называют себя там этом не бант короче мы протокол протокол потому что это
просто тут мы код разместили как вы можете убедиться здесь нет нигде функции которые
вот мне как бы заберет ваши деньги то есть есть функция которая там под один процент как
падет как бы по другой процентов дает как бы и это протокол то так как бы работает а как бы
там нет у нее но я туда ничего не могу добавить ничего не могу изменить пусть он
здесь еще как бы наверное хорошие базу орды базу орды для блокчейна это паблик ли верифия был
то есть она как бы до проверяем и публично то есть вы как бы публично можете проверить этот
код у собственно один из профилей как бы компании ну собственно наши как раз аудиты то что мы до
убеждаемся что этот код реально делает то что то что описано в документации
но помимо как бы до поиска там багов как бы именно безопасности но по-хорошему да как бы
убеждаемся что да вот здесь нет там функции закладок там например там каких-нибудь которые
позволяют вытащить там все только так далее вот так но на самом деле уже даже не хочется
забегать вперед вот потому что там следующий тоже будет мы прям посмотрим с вами контракты тоже так
вверх не уровню потыкаемся в разные проекты и про газ соответственно и про сложность про все это
обязательно как бы поговорим и ну соответственно и после этого начнем уже потихонечку сами как бы
на солидите писать там не знаю выбирать курсовой проект вот делать как бы задания ну а дальше уже
когда уже хорошо прям погрузимся солидите во все там паттерны как бы по всю эту историю как бы мы
еще копнем как бы с вами в криптографию и в пилинговые сети консенсус и так далее то есть это то что
можно изучать на самом деле по ходу вполне ну вот так давайте еще вопросы и наверное на сегодня все
еще сегодня наверное сегодня может отформатируем я сегодня опубликую все домашки вот скину ссылку
как бы на все домашки как бы чтобы вы могли выбрать что вы хотите как бы делать из этого там
вторым третьим что понравится вот что могли получить свой семестр распланировать как и было
написано в программе треть ну то есть там 30 баллов из 100 это курсовой проект вот если хотите как бы
можете там не знаю опять же там на хакатон если х и если у вас есть как бы там два компонента
курсового проекта вы хотите там не знаю там и фронт написать может быть там б короче и контракты
то можете объединиться там в команды например там по два человека вот будет отличить соответственно
там вдвоем сдачи курсового проекта она похожа как бы на не знаю нам презентацию для инвестора какому
технологического пытаетесь продать как бы мне как бы ну соответственно свой проект при этом
я еще буду смотреть соответственно как там это все закожено вот и ребят на что же как бы аудитора
вот так все по домашним сказал очень сегодня ссылку скину изменение там будут скорее всего
только косметические за домашних 70 баллов соответственно сумма вот у меня есть вопрос
по by zantin фолк талеранс как мы можем узнать что двум третьим можно доверять это какие-то
доверенные надо должны мне это нет это это чисто такое как бы формальное предположение то есть мы
это это сеть не будет никогда как бы остановлена и в ней не появится короче небезопасных блоков при
условии при строгом условии что больше 2 2 3 следует протоколу мы сказать не можем как бы
да там сколько там сейчас то есть это просто по сути ну ну как это такое как бы как ты пишешь
что там статье как бы что не знаю это машина будет ехать как бы при условиях
если не знаю там градус наклона не больше там 60 градусов а вот азиат но здесь есть прям вот
конкретное число типа если вот это число как бы выполняется то такие свойства они как бы со
стопроцентной вероятностью протокола исполняются то есть если больше двух трети честных современных
пруфов стейках никто не сможет но если под прям если прямо не знаю там шестьдесят семь из девяносто
матчей как OS на этот день но только любые такие обзоры да это же порядок существенно
то есть dessas vitamin будет к stake świat школа
along hd
общаться с
игровым
к
R对
и такие захваты кстати и были вот уже тоже поговорим интересные истории ну то есть в
теории ничего не мешает поднять много зловредных нот ничего не мешает как бы но деньги в пруфов
стейки и вы пожалуйста да как бы если у вас есть там много миллиардов долларов кэш можно
как бы захватить и так вот что ты делаешь там не вас был там захвачен там например там тут
вообще на самом деле происходит куча таких 8 штук получили за что мы как были у которых
все аналоги в общем-то нету в таком как бы в централизованном мире и разработка чуть-чуть
другая как бы истории там совсем другие и безопасность другая как бы вот она все
базируется на тех же принципах там техника практически там тоже как бы но много всего
еще мега интересного
да там были захваты сетей там тоже были если у нас небольшая сеть как мы можем обеспечить
бизонтина фолкторио
никак как-то заставить как бы больше двух третий как бы быть честными ну то есть никак если они
сговорятся как бы если у вас там три валидатора как бы там или там 5 короче там четверо из них
сговорятся как бы сорян ну то есть они могут
что хотят делать хорошего смешно было в заметках типа что лучший блокчейн это блокчейн и в которых
валидаторы ненавидят друг друга искренне вот как бы там не знаю там прямо где упали прям
идеальный блокчейн это не знаю cb китае цб россии цб сша и еще там куча всяких разных
они как бы
не смогут без задобрения как бы других ничего делать с протоколом при этом он сам при бы нужен
для работы для проведения там не знаки международных платежей как бы я не другу не доверяют они себя
перепроверяют как бы там все блоки все транзакции как бы следят за ними как бы то есть чем меньше
и другую верить и лучше прекрасно как мне кажется очень интересно но вообще вы поэтому в этом
курсе узнаете что не эфир не bitcoin на самом-то деле как мне особо не особо-то они децентрализованы
сказать как бы и пруфов стейки тоже как бы там здесь там киты с большим количеством денег там
как бы майнинговые пулы которые тоже огромные мощи как бы обладают и что bitcoin манится там
десятка майнинговых полов всего десяткам никаких там миллионов майнеров нету как бы никто пока не
такого вот так что так так ладно все 15 1 все заканчиваем тогда так
